{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/components/Navigation.vue?8189","webpack:///./src/App.vue?a2e3","webpack:///./src/App.vue","webpack:///./src/components/Navigation.vue","webpack:///./src/components/Navigation.vue?5c4c","webpack:///./src/components/Navigation.vue?e903","webpack:///./src/App.vue?3acc","webpack:///./src/App.vue?dfb6","webpack:///./src/pages/Home.vue","webpack:///./src/components/GraphView.vue","webpack:///./src/backend/models/Reuse.ts","webpack:///./src/clients/crossref/runtime.ts","webpack:///./src/clients/crossref/models/Affiliation.ts","webpack:///./src/clients/crossref/models/Agency.ts","webpack:///./src/clients/crossref/models/AgencyMessage.ts","webpack:///./src/clients/crossref/models/Author.ts","webpack:///./src/clients/crossref/models/DateParts.ts","webpack:///./src/clients/crossref/models/DoiAgency.ts","webpack:///./src/clients/crossref/models/ModelDate.ts","webpack:///./src/clients/crossref/models/Query.ts","webpack:///./src/clients/crossref/models/Reference.ts","webpack:///./src/clients/crossref/models/Work.ts","webpack:///./src/clients/crossref/models/WorkAssertion.ts","webpack:///./src/clients/crossref/models/WorkClinicalTrial.ts","webpack:///./src/clients/crossref/models/WorkDomain.ts","webpack:///./src/clients/crossref/models/WorkFreeToRead.ts","webpack:///./src/clients/crossref/models/WorkFunder.ts","webpack:///./src/clients/crossref/models/WorkISSNType.ts","webpack:///./src/clients/crossref/models/WorkInstitution.ts","webpack:///./src/clients/crossref/models/WorkJournalIssue.ts","webpack:///./src/clients/crossref/models/WorkLicense.ts","webpack:///./src/clients/crossref/models/WorkLink.ts","webpack:///./src/clients/crossref/models/WorkMessage.ts","webpack:///./src/clients/crossref/models/WorkReview.ts","webpack:///./src/clients/crossref/models/WorkStandardsBody.ts","webpack:///./src/clients/crossref/models/WorkUpdate.ts","webpack:///./src/clients/crossref/models/Works.ts","webpack:///./src/clients/crossref/models/WorksMessage.ts","webpack:///./src/clients/crossref/models/WorksMessageMessageItemsAssertionExplanation.ts","webpack:///./src/clients/crossref/models/WorksMessageMessageItemsAssertionGroup.ts","webpack:///./src/clients/crossref/models/WorksMessageMessageItemsRelationJavaLangString34985.ts","webpack:///./src/clients/crossref/apis/DepositsApi.ts","webpack:///./src/clients/crossref/apis/WorksApi.ts","webpack:///./src/tools/WorksCache.ts","webpack:///./src/tools/CachedWorksApi.ts","webpack:///./src/clients/arxiv/runtime.ts","webpack:///./src/clients/arxiv/models/Author.ts","webpack:///./src/clients/arxiv/models/Category.ts","webpack:///./src/clients/arxiv/models/Comment.ts","webpack:///./src/clients/arxiv/models/Link.ts","webpack:///./src/clients/arxiv/models/Entry.ts","webpack:///./src/clients/arxiv/models/ItemsPerPage.ts","webpack:///./src/clients/arxiv/models/Title.ts","webpack:///./src/clients/arxiv/models/Feed.ts","webpack:///./src/clients/arxiv/apis/QueryApi.ts","webpack:///./src/tools/ArxivFeedCache.ts","webpack:///./src/tools/CachedArxivApi.ts","webpack:///./src/tools/CompoundSet.ts","webpack:///./src/components/GraphView.vue?50b1","webpack:///./src/components/GraphView.vue?fb2c","webpack:///./src/components/TopFive.vue","webpack:///./src/tools/Histogram.ts","webpack:///./src/backend/RIndex.ts","webpack:///./src/components/TopFive.vue?8c75","webpack:///./src/components/TopFive.vue?cad9","webpack:///./src/components/Stats.vue","webpack:///./src/components/Stats.vue?c63e","webpack:///./src/components/Stats.vue?bc93","webpack:///./src/components/Legend.vue","webpack:///./src/components/Legend.vue?b7ae","webpack:///./src/components/Legend.vue?ae57","webpack:///./src/pages/Home.vue?d81f","webpack:///./src/pages/Home.vue?0022","webpack:///./src/pages/Contributors.vue","webpack:///./src/pages/Contributors.vue?66f7","webpack:///./src/pages/Contributors.vue?dcd0","webpack:///./src/pages/Paper.vue","webpack:///./src/pages/Paper.vue?6632","webpack:///./src/pages/Paper.vue?53ab","webpack:///./src/tools/router/index.ts","webpack:///./src/main.ts","webpack:///./src/assets/dor-logo.svg"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","id","class","alt","src","href","showSplash","to","setup","render","__scopeId","components","Navigation","setTimeout","style","selectedFilter","reuseTypes","type","reuseData","filter","ReuseType","ReuseTypeFilterAdditions","ReuseFromJson","json","undefined","BASE_PATH","replace","isBlob","Blob","configuration","fetchApi","url","init","fetchParams","middleware","pre","fetch","response","post","clone","this","next","concat","preMiddlewares","middlewares","map","withMiddleware","postMiddlewares","context","createFetchParams","status","basePath","path","query","keys","queryParamsStringify","body","FormData","URLSearchParams","JSON","stringify","headers","assign","method","credentials","constructor","field","msg","Error","querystring","username","password","apiKey","accessToken","exists","params","prefix","fullKey","Array","multiValue","singleValue","encodeURIComponent","String","join","Date","toISOString","part","mapValues","fn","reduce","acc","raw","transformer","jsonValue","AffiliationFromJSON","AffiliationFromJSONTyped","ignoreDiscriminator","AgencyFromJSON","AgencyFromJSONTyped","AgencyMessageFromJSON","AgencyMessageFromJSONTyped","DoiAgencyFromJSON","AuthorFromJSON","AuthorFromJSONTyped","DatePartsFromJSON","DatePartsFromJSONTyped","DoiAgencyFromJSONTyped","ModelDateFromJSON","ModelDateFromJSONTyped","QueryFromJSON","QueryFromJSONTyped","ReferenceFromJSON","ReferenceFromJSONTyped","WorkFromJSON","WorkFromJSONTyped","WorkInstitutionFromJSON","WorkUpdateFromJSON","WorkStandardsBodyFromJSON","WorkISSNTypeFromJSON","WorkLicenseFromJSON","WorkFunderFromJSON","WorkDomainFromJSON","WorkClinicalTrialFromJSON","isArray","WorkReviewFromJSON","WorkLinkFromJSON","WorkFreeToReadFromJSON","WorkJournalIssueFromJSON","WorksMessageMessageItemsRelationJavaLangString34985FromJSON","WorkAssertionFromJSON","WorkAssertionFromJSONTyped","WorksMessageMessageItemsAssertionGroupFromJSON","WorksMessageMessageItemsAssertionExplanationFromJSON","WorkClinicalTrialFromJSONTyped","WorkDomainFromJSONTyped","WorkFreeToReadFromJSONTyped","WorkFunderFromJSONTyped","WorkISSNTypeFromJSONTyped","WorkInstitutionFromJSONTyped","WorkJournalIssueFromJSONTyped","WorkLicenseFromJSONTyped","WorkLinkFromJSONTyped","WorkMessageFromJSON","WorkMessageFromJSONTyped","WorkReviewFromJSONTyped","WorkStandardsBodyFromJSONTyped","WorkUpdateFromJSONTyped","WorksFromJSON","WorksFromJSONTyped","WorksMessageFromJSON","WorksMessageFromJSONTyped","WorksMessageMessageItemsAssertionExplanationFromJSONTyped","WorksMessageMessageItemsAssertionGroupFromJSONTyped","WorksMessageMessageItemsRelationJavaLangString34985FromJSONTyped","requestParameters","doi","queryParameters","headerParameters","request","worksDoiAgencyGetRaw","worksDoiGetRaw","rows","order","facet","sample","sort","offset","mailto","select","cursor","worksGetRaw","cache","set","recordExists","cacheRecord","find","x","toLowerCase","WorksCache","instance","prefill","prefillWorks","forEach","currentWork","dOI","apiCache","worksDoiGetInteral","requestOnCacheMiss","Promise","resolve","console","debug","message","xmlValue","text","parsedText","explicitArray","error","AuthorFromXml","xml","AuthorFromXmlTyped","CategoryFromXml","CategoryFromXmlTyped","term","$","scheme","CategoryFromJSON","CategoryFromJSONTyped","CommentFromXml","CommentFromXmlTyped","_","CommentFromJSON","CommentFromJSONTyped","LinkFromXml","LinkFromXmlTyped","rel","title","LinkFromJSON","LinkFromJSONTyped","EntryFromXml","EntryFromXmlTyped","author","link","category","updated","published","summary","comment","primary_category","EntryFromJSON","EntryFromJSONTyped","ItemsPerPageFromXml","ItemsPerPageFromXmlTyped","namespace","ItemsPerPageFromJSON","ItemsPerPageFromJSONTyped","TitleFromXml","TitleFromXmlTyped","TitleFromJSON","TitleFromJSONTyped","FeedFromXml","FeedFromXmlTyped","feed","totalResults","startIndex","itemsPerPage","entry","_xmlns","xmlns","FeedFromJSON","FeedFromJSONTyped","queryByIdRaw","startsWith","ArxivFeedCache","currentFeed","initial","Map","val","toKey","has","delete","values","size","iterator","props","cyInstance","worksApi","arxivApi","transformToGraph","getNodes","transformedNodes","nodes","edges","getLinks","trimGitHubURL","githubPrefix","firstSlashPos","indexOf","secondSlashPos","substring","sourceDois","from","Set","sourceDOI","trim","destinationDois","reusedDOI","findIndex","arxivIds","alternativeID","githubRepos","urls","all","currentDoi","createNodeFromDOI","createNodeFromArxivId","createGithubNode","createWebsiteNode","protocolStripped","nodeName","classes","queryById","catch","err","warn","arxivEntry","getFullYear","extraClass","worksDoiGet","work","citationCount","isReferencedByCount","getItemTitle","citations","linksToDois","item","source","target","linksToArxiv","linksToGithub","linksToWebsites","issued","getAuthors","dateParts","authors","family","elements","cytoConfig","container","document","getElementById","animate","layout","selector","content","width","height","color","use","cy","filterElements","run","filteredElements","e","restore","filterValue","getValueOrDefault","filterExpression","remove","isLoading","researchers","reused","index","given","frequency","reusing","publications","histo","add","currentCount","a","b","uniqueReuse","dest","crWorksApi","then","works","flatMap","w","histogram","reason","validWorks","indexer","computeAuthorsReused","computeAuthorsReusing","computeWorksReused","computeWorksReusing","colspan","papersInspected","targetDoiNodes","targetArxivNodes","targetGitHubNodes","targetWebsiteNodes","edgeTypes","websiteFilter","edgeTypeHistogram","Stats","TopFive","GraphView","Legend","reuse","getEntries","contributors","contributor","uniqueContributorDoiPair","parse","paper","subtitle","containerTitle","created","dateTime","toLocaleDateString","reusedStuff","doiDetails","reusingStuff","alternativeId","route","loadPaper","reducer","accumulator","currentValue","resolveDois","stuff","resolveDoi","workResult","doiPrefix","currentRoute","doiSuffix","newParams","routerHistory","router","history","routes","component","Home","Contributors","Paper","app","App","mount"],"mappings":"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","file":"js/app.cb83648c.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([0,\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Navigation.vue?vue&type=style&index=0&id=48fa359d&scoped=true&lang=css\"","export * from \"-!../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../node_modules/vue-loader-v16/dist/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./App.vue?vue&type=style&index=0&id=ba191530&lang=css\"","<template>\n  <div id=\"root\" class=\"\">\n    <div v-if=\"showSplash\">\n      <img\n        alt=\"Department of Reuse logo\"\n        src=\"./assets/dor-logo.svg\"\n        class=\"place-self-center w-1/3 mx-auto mt-10\"\n      />\n    </div>\n    <div v-else class=\"bg-logo bg-no-repeat bg-cover bg-center\">\n      <Navigation />\n      <!-- <navbar />-->\n      <div class=\"bg-gray-50 bg-opacity-95 min-h-screen \">\n        <router-view />\n      </div>\n\n      <footer\n        class=\"\n          mt-3\n          fixed\n          -bottom-0\n          mx-auto\n          w-full\n          pb-2\n          bg-opacity-90 bg-gray-200\n        \"\n      >\n        <p class=\"text-xs\">\n          This is a community effort started by Maria Teresa Baldassarre, Neil\n          Ernst, Ben Hermann, and Tim Menzies.\n        </p>\n        <p class=\"text-xs\">\n          Please feel free to\n          <a class=\"text-blue-600\" href=\"https://github.com/bhermann/DoR\"\n            >comment or contribute on GitHub</a\n          >.\n        </p>\n      </footer>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { ref } from '@vue/reactivity';\nimport Navigation from \"./components/Navigation.vue\";\nimport { onMounted } from '@vue/runtime-core';\n\nexport default {\n  name: \"App\",\n  components: { Navigation },\n  setup() {\n      let showSplash = ref(true);\n\n    onMounted(() => {\n      setTimeout(() => {\n        showSplash.value = false;\n      }, 2000);\n    });\n\n    return { showSplash };\n  },\n};\n</script>\n\n<style>\n#app {\n  font-family: 'Bitter', serif;\n\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n\n#app h1,\n#app h2 {\n  font-weight: bold;\n}\n.fade-enter-active,\n.fade-leave-active {\n  transition: opacity 0.3s;\n}\n\n.fade-enter-from,\n.fade-leave-to {\n  opacity: 0;\n}\n</style>\n","<template>\n    <div id=\"nav\" class=\"h-6 bg-opacity-80 bg-blue-500 text-white text-xs font-bold relative flex px-5 py-1\">\n        <div class=\"flex-auto text-left flex gap-1.5\">\n            <router-link :to=\"{ name: 'home' }\" class=\"hover:bg-blue-400 px-1\">Home</router-link>\n            <router-link :to=\"{ name: 'contributors'}\" class=\"hover:bg-blue-400 px-1\">Contributors</router-link>\n            <a class=\"hover:bg-blue-400 px-1\" href=\"https://github.com/bhermann/DoR\">Source code</a>\n            <!-- <a class=\"hover:bg-blue-400 px-1\" href=\"https://github.com/bhermann/DoR\">Meet the team</a> -->\n        </div>\n        <div class=\"flex-none\">The Department of Reuse is a department within the ROSE initiative.</div>\n    </div>\n</template>\n<script lang=\"ts\">\n\nexport default {\n    setup() {\n        \n    },\n}\n</script>\n<style scoped>\n    #nav {\n        font-family: \"Roboto Condensed\", \"Helvetica\", \"Arial\", sans-serif;\n    }\n</style>\n","\n\nexport default {\n    setup() {\n        \n    },\n}\n","import { render } from \"./Navigation.vue?vue&type=template&id=48fa359d&scoped=true\"\nimport script from \"./Navigation.vue?vue&type=script&lang=ts\"\nexport * from \"./Navigation.vue?vue&type=script&lang=ts\"\n\nimport \"./Navigation.vue?vue&type=style&index=0&id=48fa359d&scoped=true&lang=css\"\nscript.render = render\nscript.__scopeId = \"data-v-48fa359d\"\n\nexport default script","\nimport { ref } from '@vue/reactivity';\nimport Navigation from \"./components/Navigation.vue\";\nimport { onMounted } from '@vue/runtime-core';\n\nexport default {\n  name: \"App\",\n  components: { Navigation },\n  setup() {\n      let showSplash = ref(true);\n\n    onMounted(() => {\n      setTimeout(() => {\n        showSplash.value = false;\n      }, 2000);\n    });\n\n    return { showSplash };\n  },\n};\n","import { render } from \"./App.vue?vue&type=template&id=ba191530\"\nimport script from \"./App.vue?vue&type=script&lang=ts\"\nexport * from \"./App.vue?vue&type=script&lang=ts\"\n\nimport \"./App.vue?vue&type=style&index=0&id=ba191530&lang=css\"\nscript.render = render\n\nexport default script","<template>\n  <div class=\"w-full\">\n      <div class=\"flex gap-2\">\n        <div class=\"w-72 h-screen\" style=\"margin-bottom: -125px\">\n            <h2 class=\"text-xl bg-opacity-80 bg-blue-200\">Filter</h2>\n            <label>Reuse type</label>\n            <select class=\"\" name=\"\" v-model=\"selectedFilter\">\n                <option value=\"ALL\">All</option>\n                <option v-for=\"type in reuseTypes\" :key=\"type[0]\" :value=\"type[0]\">\n                  {{ type[1] }}\n                </option>\n            </select>\n            <div class=\"w-full h-full\">\n            <GraphView :reuseData=\"reuseData\" :filter=\"selectedFilter\" />\n          </div>\n        </div>\n        <div class=\"w-full\">\n          <header class=\"bg-opacity-40 bg-gray-200 z-10\">\n            <h1 class=\"text-4xl\">Department of Reuse</h1>\n            <h2>- under development / data widely incomplete -</h2>\n          </header>\n\n\n        </div>\n        <div class=\"flex-none w-72 order-3 hidden lg:block z-10 overflow-y-auto h-screen\" >\n            <TopFive class=\"z-10\" :reuseData=\"reuseData\" />\n            <Stats :reuseData=\"reuseData\" />\n            <Legend />\n        </div>\n      </div>\n    </div>\n</template>\n\n<script lang=\"ts\">\nimport GraphView from '../components/GraphView.vue';\nimport TopFive from '../components/TopFive.vue';\nimport Stats from '../components/Stats.vue';\nimport Legend from '../components/Legend.vue';\n\nimport reuseJson from '../assets/data/reuse.json';\nimport { ReuseFromJson, ReuseType } from '../backend/models/Reuse';\n\nimport { $enum } from \"ts-enum-util\";\nimport { ref } from '@vue/reactivity';\n\nexport default {\n  name: \"Home\",\n  components: { Stats, TopFive, GraphView, Legend },\n  setup() {\n\n    const selectedFilter = ref(\"ALL\");\n\n    const reuseData = (reuseJson as Array<any>).map(ReuseFromJson);\n\n    const reuseTypes = $enum(ReuseType).getEntries().sort((a,b) => {\n      if (a[1] < b[1]) return -1;\n      else if (a[1] > b[1]) return 1;\n      else return 0;\n    });\n\n    return { reuseData, reuseTypes, selectedFilter};\n  },\n};\n</script>\n\n\n","<template>\n  <div id=\"cyroot\" class=\"w-full h-full fixed\"></div>\n</template>\n\n<script lang=\"ts\">\nimport cytoscape, { Core, CytoscapeOptions, ElementsDefinition, NodeDefinition, EdgeDefinition, CollectionReturnValue } from \"cytoscape\";\n//import popper from \"cytoscape-popper\";\nimport fcose from \"cytoscape-fcose\";\n//import cola from \"cytoscape-cola\";\n//import d3Force from 'cytoscape-d3-force';\n\nimport { ref, PropType, onBeforeMount, watch } from \"vue\";\n\nimport Reuse, {  ReuseType, ReuseTypeFilter } from \"../backend/models/Reuse\";\nimport { CachedWorksApi } from \"../tools/CachedWorksApi\";\nimport { CachedArxivApi } from \"../tools/CachedArxivApi\";\nimport { Author, Work, WorkMessage } from \"../clients/crossref\";\nimport { Feed } from \"../clients/arxiv\";\n\nimport CompoundSet from \"../tools/CompoundSet\";\nimport { $enum } from 'ts-enum-util';\n\nconst websiteFilter = (id: string): boolean => !id.startsWith(\"https://github.com/\")&&(id.startsWith(\"http://\")||id.startsWith(\"https://\"));\n\nexport default {\n  props: {\n    reuseData: Array as PropType<Array<Reuse>>,\n    filter : String as PropType<ReuseTypeFilter>\n  },\n  setup(props: any) {\n    const cyInstance = ref<Core | null>(null);\n    const worksApi = new CachedWorksApi();\n    const arxivApi = new CachedArxivApi();\n\n    async function transformToGraph(data: Array<Reuse>) : Promise<ElementsDefinition> {\n      const transformedNodes = await getNodes(data);\n      \n      return {\n        nodes: transformedNodes,\n        edges: getLinks(data),\n      };\n    }\n\n    function trimGitHubURL(url : string) : string {\n      const githubPrefix = \"https://github.com/\"\n      const path = url.replace(githubPrefix, \"\");\n      const firstSlashPos = path.indexOf(\"/\");\n      const secondSlashPos = path.indexOf(\"/\", firstSlashPos + 1);\n\n      if (firstSlashPos > 0 && secondSlashPos > 0) return url.substring(0, secondSlashPos + githubPrefix.length);\n      return url;\n    }\n\n    async function getNodes(data: Array<Reuse>) : Promise<Array<NodeDefinition>> {\n      const sourceDois = Array.from(new Set(data\n                        .map(entry => entry.sourceDOI)\n                        .filter(doi => doi.trim() != \"\")));\n\n      const destinationDois = Array.from(new Set(data\n                        .map(entry => entry.reusedDOI)\n                        .filter(doi => doi.trim() != \"\")\n                        .filter(doi => (sourceDois.findIndex(d => d == doi) < 0))));\n\n      const arxivIds = Array.from(new Set(data\n                        .map(entry => entry.alternativeID)\n                        .filter(id => id.startsWith(\"arxiv:\"))\n                        .map(id => id.replace(\"arxiv:\", \"\"))));\n\n      const githubRepos = Array.from(new Set(data\n                        .map(entry => entry.alternativeID)\n                        .filter(id => id.startsWith(\"https://github.com/\"))\n                        .map(id => trimGitHubURL(id))));\n\n      const urls = Array.from(new Set(data\n                        .map(entry => entry.alternativeID)\n                        .filter(websiteFilter)\n      ))\n\n      return Promise.all(sourceDois.map(currentDoi => createNodeFromDOI(currentDoi, \"source\"))\n                             .concat(destinationDois.map(currentDoi => createNodeFromDOI(currentDoi, \"\")))\n                             .concat(arxivIds.map(id => createNodeFromArxivId(id)))\n                             .concat(githubRepos.map(url => createGithubNode(url)))\n                             .concat(urls.map(url => createWebsiteNode(url)))\n                         );\n    }\n\n    async function createWebsiteNode(url : string) : Promise<NodeDefinition> {\n      const protocolStripped = url.replace(\"https://\", \"\").replace(\"http://\", \"\");\n      const nodeName = protocolStripped.substring(0, protocolStripped.indexOf(\"/\") > 0 ? protocolStripped.indexOf(\"/\") : protocolStripped.length)\n      return { data: {id: url, name: nodeName}, classes: \"website\" };\n    }\n\n    async function createGithubNode(url : string) : Promise<NodeDefinition> {\n      const nodeName = url.replace(\"https://github.com/\", \"\");\n      return { data: {id: url, name: nodeName}, classes: \"github\" };\n    }\n\n    async function createNodeFromArxivId(id : string) : Promise<NodeDefinition> {\n      const arxivEntry = await arxivApi.queryById({id : id}).catch((err) => {\n          console.warn(err);\n        });\n      var nodeName = id;\n\n      if (arxivEntry as Feed) {\n        const entry = (arxivEntry as Feed).entry;\n\n        if (entry.author.length > 0) {\n          if (entry.author.length == 1) nodeName = entry.author[0].name\n          else nodeName = entry.author[0].name + \" et al.\"\n        }\n        nodeName += ` (${entry.published == null ? '???' : new Date(entry.published).getFullYear()})` \n      }\n\n      return { data: {id: \"arxiv:\" + id, name: nodeName}, classes: \"arxiv\" };\n    }\n\n    \n\n    async function createNodeFromDOI(doi : string, extraClass : string) : Promise<NodeDefinition> {\n      const work = await worksApi.worksDoiGet({ doi: doi })\n        .catch((err) => {\n          console.warn(err);\n        });\n\n      if (work as WorkMessage) {\n        const message = (work as WorkMessage).message\n        const citationCount =  message.isReferencedByCount;\n        const title = getItemTitle(message);\n        return { data: {id: doi, name : title, citations: citationCount}, classes: \"crossref \" + extraClass  };\n      } else {\n        return { data: {id: doi, name : doi, citations: 0}, classes: \"crossref \" + extraClass   };\n      }\n    }\n    \n    function getLinks(data: Array<Reuse>) : Array<EdgeDefinition> {\n      const linksToDois = Array.from(new CompoundSet(data.filter(item => item.reusedDOI.trim().length > 0).map((item: Reuse) => {\n        return { data: { source: item.sourceDOI, target: item.reusedDOI, type: item.type } };\n      })));\n\n      const linksToArxiv = Array.from(new CompoundSet(data.filter(item => item.alternativeID.startsWith(\"arxiv:\")).map((item : Reuse) => {\n          return { data: { source: item.sourceDOI, target: item.alternativeID, type: item.type } };\n      })));\n\n      const linksToGithub = Array.from(new CompoundSet(data.filter(item => item.alternativeID.startsWith(\"https://github.com/\")).map((item: Reuse) => {\n          return { data: { source: item.sourceDOI, target: trimGitHubURL(item.alternativeID), type: item.type } };\n      })));\n\n      const linksToWebsites = Array.from(new CompoundSet(data.filter(item => websiteFilter(item.alternativeID)).map((item: Reuse) => {\n          return { data: { source: item.sourceDOI, target: item.alternativeID, type: item.type } }\n      })));\n\n      return linksToDois\n              .concat(linksToArxiv)\n              .concat(linksToGithub)\n              .concat(linksToWebsites);\n    }\n    function getItemTitle(work: Work) {\n      if (work.issued) \n        return getAuthors(work.author) + \" (\" + work.issued.dateParts[0][0] + \")\"; \n      else \n        return getAuthors(work.author) + \"(???)\"; \n    }\n\n    function getAuthors(authors: Array<Author>): string {\n      if (!authors) return \"\";\n      if (!authors[0]) return \"\";\n      if (authors.length == 1) return authors[0].family;\n      return authors[0].family + \" et al.\";\n    }\n\n\n\n    onBeforeMount(async () => {\n      const elements = await transformToGraph(props.reuseData);\n      \n      var cytoConfig = {\n        container: document.getElementById('cyroot'),\n        elements: elements,\n        animate: true,\n        layout: { name: \"fcose\" },\n        style: [\n          {\n            selector: \"node\",\n            style: {\n              content: \"data(name)\",\n              \"font-family\": \"Roboto Condensed, Helvetica, Arial, sans-serif\",\n              width: 10,\n              height: 10,\n              \"font-size\": \"8pt\",\n              \"text-opacity\": 1,\n              \"text-valign\": \"center\",\n              \"text-halign\": \"right\",\n              color: \"#2c3e50\"\n            },\n          },\n          {\n            selector: \".crossref\",\n            style: {\n              \"background-color\": \"#77aaff\"\n            }\n          },\n          {\n            selector: \".source\",\n            style: {\n              \"border-width\": \"2px\",\n              \"border-color\": \"#5588dd\"\n            }\n          },\n          {\n            selector: \".arxiv\",\n            style: {\n              \"background-color\": \"#b31b1b\"\n            }\n          },\n          {\n            selector: \".github\",\n            style: {\n              \"background-color\": \"#238636\"\n            }\n          },\n          {\n            selector: \"edge\",\n            style: {\n              content: \"data(type)\",\n              \"font-size\": \"4pt\",\n              'text-wrap': 'wrap' ,\n               'edge-text-rotation': 'autorotate',\n               'min-zoomed-font-size': 10,\n              \"curve-style\": \"straight\",\n              \"target-arrow-shape\": \"triangle\",\n              \"line-color\": \"#9dbaea\",\n              \"target-arrow-color\": \"#9dbaea\",\n            },\n          },\n        ],\n      } as CytoscapeOptions;\n\n      cytoscape.use(fcose);\n      //cytoscape.use(popper);\n      var cy = cytoscape(cytoConfig);\n      cyInstance.value = cy;\n      \n      /* This function is a work-in-progress. How to get the tooltip\n      is one of the world's greatest mysteries. For whoever attempts\n      this task, may God be with you. */\n      /*cy.on(\"click\", \"node\", event => {\n        //let element = cy.getElementById(event.target._private.data.id);\n        var node = event.target._private;\n        console.log(node.data.citations);\n      });*/\n\n      filterElements(props.filter)\n\n      cy.layout({ name: \"fcose\" }).run();\n\n\n      //var throttle: any;\n      /*function handleWindowResize() {\n        clearTimeout(throttle);\n        throttle = setTimeout(function () {\n          cyInstance.value!.layout({ name: \"fcose\" }).run();\n        }, 100);\n      }*/\n\n      // window.addEventListener(\"resize\", handleWindowResize);\n    })\n  \n    var filteredElements : CollectionReturnValue | null = null ;\n\n    function filterElements(filter : ReuseTypeFilter) {\n        const cy = cyInstance.value!\n\n        if (filteredElements != null) filteredElements!.forEach(e => {\n          e.restore()\n        });\n\n        if (filter as String != \"ALL\") {\n          const filterValue = $enum(ReuseType).getValueOrDefault(filter);\n          const filterExpression = `edge[type != \"${filterValue}\"]`;\n          filteredElements = cy.filter(filterExpression);\n          \n          cy.remove(filteredElements)\n        }\n    }\n\n    watch(\n      () => props.filter,\n      async filter => {\n        filterElements(filter)\n      })\n    return {\n      cyInstance,\n    };\n  },\n};\n</script>\n","export default interface Reuse {\n  sourceDOI: string,\n  type : ReuseType,\n  comment: string,\n  sourceReference: string,\n  reusedDOI: string,\n  alternativeID: string,\n  sourceReferenceDetail: string,\n  contributor: string\n}\n\nexport enum ReuseType {\n  UNKNOWN = \"Other\",\n  METHODOLOGY = \"Methodology\",\n  DATASET = \"Dataset\",\n  TOOL = \"Tool\",\n  STATISTICS = \"Statistics\",\n  METRIC = \"Metric\",\n  SANITYCHECK = \"Sanity check\",\n  STEPPINGSTONE = \"Stepping stone\",\n  REPLICATION = \"Replication\"\n}\n\nexport enum ReuseTypeFilterAdditions {\n  ALL = \"All\"\n}\n\nexport type ReuseTypeFilter = ReuseType | ReuseTypeFilterAdditions\n\nexport function ReuseFromJson(json: any): Reuse {\n  if ((json === undefined) || (json === null)) {\n    return json;\n  }\n  return {\n    \"sourceDOI\": json['sourceDOI'],\n    \"type\" : json['type'],\n    \"comment\": json['comment'],\n    \"sourceReference\": json['sourceReference'],\n    \"reusedDOI\": json['reusedDOI'],\n    \"alternativeID\": json['alternativeID'],\n    \"sourceReferenceDetail\": json['sourceReferenceDetail'],\n    \"contributor\" : json['contributor']\n  };\n}\n\n\nexport function ReuseToJson(value? : Reuse) : any {\n  if (value === undefined) {\n    return undefined;\n  }\n  if (value === null) {\n    return null;\n  }\n  return {\n    \"sourceDOI\": value.sourceDOI,\n    \"reusedDOI\": value.reusedDOI,\n    \"type\" : value.type,\n    \"comment\": value.comment,\n    \"sourceReference\": value.sourceReference,\n    \"alternativeID\": value.alternativeID,\n    \"sourceReferenceDetail\": value.sourceReferenceDetail,\n    \"contributor\" : value.contributor\n  };\n}","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport const BASE_PATH = \"https://api.crossref.org\".replace(/\\/+$/, \"\");\n\nconst isBlob = (value: any) => typeof Blob !== 'undefined' && value instanceof Blob;\n\n/**\n * This is the base class for all generated API classes.\n */\nexport class BaseAPI {\n\n    private middleware: Middleware[];\n\n    constructor(protected configuration = new Configuration()) {\n        this.middleware = configuration.middleware;\n    }\n\n    withMiddleware<T extends BaseAPI>(this: T, ...middlewares: Middleware[]) {\n        const next = this.clone<T>();\n        next.middleware = next.middleware.concat(...middlewares);\n        return next;\n    }\n\n    withPreMiddleware<T extends BaseAPI>(this: T, ...preMiddlewares: Array<Middleware['pre']>) {\n        const middlewares = preMiddlewares.map((pre) => ({ pre }));\n        return this.withMiddleware<T>(...middlewares);\n    }\n\n    withPostMiddleware<T extends BaseAPI>(this: T, ...postMiddlewares: Array<Middleware['post']>) {\n        const middlewares = postMiddlewares.map((post) => ({ post }));\n        return this.withMiddleware<T>(...middlewares);\n    }\n\n    protected async request(context: RequestOpts): Promise<Response> {\n        const { url, init } = this.createFetchParams(context);\n        const response = await this.fetchApi(url, init);\n        if (response.status >= 200 && response.status < 300) {\n            return response;\n        }\n        throw response;\n    }\n\n    private createFetchParams(context: RequestOpts) {\n        let url = this.configuration.basePath + context.path;\n        if (context.query !== undefined && Object.keys(context.query).length !== 0) {\n            // only add the querystring to the URL if there are query parameters.\n            // this is done to avoid urls ending with a \"?\" character which buggy webservers\n            // do not handle correctly sometimes.\n            url += '?' + this.configuration.queryParamsStringify(context.query);\n        }\n        const body = ((typeof FormData !== \"undefined\" && context.body instanceof FormData) || context.body instanceof URLSearchParams || isBlob(context.body))\n        ? context.body\n        : JSON.stringify(context.body);\n\n        const headers = Object.assign({}, this.configuration.headers, context.headers);\n        const init = {\n            method: context.method,\n            headers: headers,\n            body,\n            credentials: this.configuration.credentials\n        };\n        return { url, init };\n    }\n\n    private fetchApi = async (url: string, init: RequestInit) => {\n        let fetchParams = { url, init };\n        for (const middleware of this.middleware) {\n            if (middleware.pre) {\n                fetchParams = await middleware.pre({\n                    fetch: this.fetchApi,\n                    ...fetchParams,\n                }) || fetchParams;\n            }\n        }\n        let response = await this.configuration.fetchApi(fetchParams.url, fetchParams.init);\n        for (const middleware of this.middleware) {\n            if (middleware.post) {\n                response = await middleware.post({\n                    fetch: this.fetchApi,\n                    url,\n                    init,\n                    response: response.clone(),\n                }) || response;\n            }\n        }\n        return response;\n    }\n\n    /**\n     * Create a shallow clone of `this` by constructing a new instance\n     * and then shallow cloning data members.\n     */\n    private clone<T extends BaseAPI>(this: T): T {\n        const constructor = this.constructor as any;\n        const next = new constructor(this.configuration);\n        next.middleware = this.middleware.slice();\n        return next;\n    }\n};\n\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\nexport type FetchAPI = WindowOrWorkerGlobalScope['fetch'];\n\nexport interface ConfigurationParameters {\n    basePath?: string; // override base path\n    fetchApi?: FetchAPI; // override for fetch implementation\n    middleware?: Middleware[]; // middleware to apply before/after fetch requests\n    queryParamsStringify?: (params: HTTPQuery) => string; // stringify function for query strings\n    username?: string; // parameter for basic security\n    password?: string; // parameter for basic security\n    apiKey?: string | ((name: string) => string); // parameter for apiKey security\n    accessToken?: string | ((name?: string, scopes?: string[]) => string); // parameter for oauth2 security\n    headers?: HTTPHeaders; //header params we want to use on every request\n    credentials?: RequestCredentials; //value for the credentials param we want to use on each request\n}\n\nexport class Configuration {\n    constructor(private configuration: ConfigurationParameters = {}) {}\n\n    get basePath(): string {\n        return this.configuration.basePath != null ? this.configuration.basePath : BASE_PATH;\n    }\n\n    get fetchApi(): FetchAPI {\n        return this.configuration.fetchApi || window.fetch.bind(window);\n    }\n\n    get middleware(): Middleware[] {\n        return this.configuration.middleware || [];\n    }\n\n    get queryParamsStringify(): (params: HTTPQuery) => string {\n        return this.configuration.queryParamsStringify || querystring;\n    }\n\n    get username(): string | undefined {\n        return this.configuration.username;\n    }\n\n    get password(): string | undefined {\n        return this.configuration.password;\n    }\n\n    get apiKey(): ((name: string) => string) | undefined {\n        const apiKey = this.configuration.apiKey;\n        if (apiKey) {\n            return typeof apiKey === 'function' ? apiKey : () => apiKey;\n        }\n        return undefined;\n    }\n\n    get accessToken(): ((name: string, scopes?: string[]) => string) | undefined {\n        const accessToken = this.configuration.accessToken;\n        if (accessToken) {\n            return typeof accessToken === 'function' ? accessToken : () => accessToken;\n        }\n        return undefined;\n    }\n\n    get headers(): HTTPHeaders | undefined {\n        return this.configuration.headers;\n    }\n\n    get credentials(): RequestCredentials | undefined {\n        return this.configuration.credentials;\n    }\n}\n\nexport type Json = any;\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';\nexport type HTTPHeaders = { [key: string]: string };\nexport type HTTPQuery = { [key: string]: string | number | null | boolean | Array<string | number | null | boolean> | HTTPQuery };\nexport type HTTPBody = Json | FormData | URLSearchParams;\nexport type ModelPropertyNaming = 'camelCase' | 'snake_case' | 'PascalCase' | 'original';\n\nexport interface FetchParams {\n    url: string;\n    init: RequestInit;\n}\n\nexport interface RequestOpts {\n    path: string;\n    method: HTTPMethod;\n    headers: HTTPHeaders;\n    query?: HTTPQuery;\n    body?: HTTPBody;\n}\n\nexport function exists(json: any, key: string) {\n    const value = json[key];\n    return value !== null && value !== undefined;\n}\n\nexport function querystring(params: HTTPQuery, prefix: string = ''): string {\n    return Object.keys(params)\n        .map((key) => {\n            const fullKey = prefix + (prefix.length ? `[${key}]` : key);\n            const value = params[key];\n            if (value instanceof Array) {\n                const multiValue = value.map(singleValue => encodeURIComponent(String(singleValue)))\n                    .join(`&${encodeURIComponent(fullKey)}=`);\n                return `${encodeURIComponent(fullKey)}=${multiValue}`;\n            }\n            if (value instanceof Date) {\n                return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;\n            }\n            if (value instanceof Object) {\n                return querystring(value as HTTPQuery, fullKey);\n            }\n            return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;\n        })\n        .filter(part => part.length > 0)\n        .join('&');\n}\n\nexport function mapValues(data: any, fn: (item: any) => any) {\n  return Object.keys(data).reduce(\n    (acc, key) => ({ ...acc, [key]: fn(data[key]) }),\n    {}\n  );\n}\n\nexport function canConsumeForm(consumes: Consume[]): boolean {\n    for (const consume of consumes) {\n        if ('multipart/form-data' === consume.contentType) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport interface Consume {\n    contentType: string\n}\n\nexport interface RequestContext {\n    fetch: FetchAPI;\n    url: string;\n    init: RequestInit;\n}\n\nexport interface ResponseContext {\n    fetch: FetchAPI;\n    url: string;\n    init: RequestInit;\n    response: Response;\n}\n\nexport interface Middleware {\n    pre?(context: RequestContext): Promise<FetchParams | void>;\n    post?(context: ResponseContext): Promise<Response | void>;\n}\n\nexport interface ApiResponse<T> {\n    raw: Response;\n    value(): Promise<T>;\n}\n\nexport interface ResponseTransformer<T> {\n    (json: any): T;\n}\n\nexport class JSONApiResponse<T> {\n    constructor(public raw: Response, private transformer: ResponseTransformer<T> = (jsonValue: any) => jsonValue) {}\n\n    async value(): Promise<T> {\n        return this.transformer(await this.raw.json());\n    }\n}\n\nexport class VoidApiResponse {\n    constructor(public raw: Response) {}\n\n    async value(): Promise<void> {\n        return undefined;\n    }\n}\n\nexport class BlobApiResponse {\n    constructor(public raw: Response) {}\n\n    async value(): Promise<Blob> {\n        return await this.raw.blob();\n    };\n}\n\nexport class TextApiResponse {\n    constructor(public raw: Response) {}\n\n    async value(): Promise<string> {\n        return await this.raw.text();\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\n/**\n * \n * @export\n * @interface Affiliation\n */\nexport interface Affiliation {\n    /**\n     * \n     * @type {string}\n     * @memberof Affiliation\n     */\n    name: string;\n}\n\nexport function AffiliationFromJSON(json: any): Affiliation {\n    return AffiliationFromJSONTyped(json, false);\n}\n\nexport function AffiliationFromJSONTyped(json: any, ignoreDiscriminator: boolean): Affiliation {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'name': json['name'],\n    };\n}\n\nexport function AffiliationToJSON(value?: Affiliation | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'name': value.name,\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\n/**\n * \n * @export\n * @interface Agency\n */\nexport interface Agency {\n    /**\n     * \n     * @type {string}\n     * @memberof Agency\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Agency\n     */\n    label: string;\n}\n\nexport function AgencyFromJSON(json: any): Agency {\n    return AgencyFromJSONTyped(json, false);\n}\n\nexport function AgencyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Agency {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'id': json['id'],\n        'label': json['label'],\n    };\n}\n\nexport function AgencyToJSON(value?: Agency | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'id': value.id,\n        'label': value.label,\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\nimport {\n    DoiAgency,\n    DoiAgencyFromJSON,\n    DoiAgencyFromJSONTyped,\n    DoiAgencyToJSON,\n} from './';\n\n/**\n * \n * @export\n * @interface AgencyMessage\n */\nexport interface AgencyMessage {\n    /**\n     * \n     * @type {string}\n     * @memberof AgencyMessage\n     */\n    status: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AgencyMessage\n     */\n    messageType: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AgencyMessage\n     */\n    messageVersion: string;\n    /**\n     * \n     * @type {DoiAgency}\n     * @memberof AgencyMessage\n     */\n    message: DoiAgency;\n}\n\nexport function AgencyMessageFromJSON(json: any): AgencyMessage {\n    return AgencyMessageFromJSONTyped(json, false);\n}\n\nexport function AgencyMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): AgencyMessage {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'status': json['status'],\n        'messageType': json['message-type'],\n        'messageVersion': json['message-version'],\n        'message': DoiAgencyFromJSON(json['message']),\n    };\n}\n\nexport function AgencyMessageToJSON(value?: AgencyMessage | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'status': value.status,\n        'message-type': value.messageType,\n        'message-version': value.messageVersion,\n        'message': DoiAgencyToJSON(value.message),\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\nimport {\n    Affiliation,\n    AffiliationFromJSON,\n    AffiliationFromJSONTyped,\n    AffiliationToJSON,\n} from './';\n\n/**\n * \n * @export\n * @interface Author\n */\nexport interface Author {\n    /**\n     * \n     * @type {string}\n     * @memberof Author\n     */\n    oRCID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Author\n     */\n    suffix?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Author\n     */\n    given?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Author\n     */\n    family: string;\n    /**\n     * \n     * @type {Array<Affiliation>}\n     * @memberof Author\n     */\n    affiliation: Array<Affiliation>;\n    /**\n     * \n     * @type {string}\n     * @memberof Author\n     */\n    name?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Author\n     */\n    authenticatedOrcid?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Author\n     */\n    prefix?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Author\n     */\n    sequence: string;\n}\n\nexport function AuthorFromJSON(json: any): Author {\n    return AuthorFromJSONTyped(json, false);\n}\n\nexport function AuthorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Author {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'oRCID': !exists(json, 'ORCID') ? undefined : json['ORCID'],\n        'suffix': !exists(json, 'suffix') ? undefined : json['suffix'],\n        'given': !exists(json, 'given') ? undefined : json['given'],\n        'family': json['family'],\n        'affiliation': ((json['affiliation'] as Array<any>).map(AffiliationFromJSON)),\n        'name': !exists(json, 'name') ? undefined : json['name'],\n        'authenticatedOrcid': !exists(json, 'authenticated-orcid') ? undefined : json['authenticated-orcid'],\n        'prefix': !exists(json, 'prefix') ? undefined : json['prefix'],\n        'sequence': json['sequence'],\n    };\n}\n\nexport function AuthorToJSON(value?: Author | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'ORCID': value.oRCID,\n        'suffix': value.suffix,\n        'given': value.given,\n        'family': value.family,\n        'affiliation': ((value.affiliation as Array<any>).map(AffiliationToJSON)),\n        'name': value.name,\n        'authenticated-orcid': value.authenticatedOrcid,\n        'prefix': value.prefix,\n        'sequence': value.sequence,\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\n/**\n * \n * @export\n * @interface DateParts\n */\nexport interface DateParts {\n    /**\n     * \n     * @type {Array<Array<number>>}\n     * @memberof DateParts\n     */\n    dateParts: Array<Array<number>>;\n}\n\nexport function DatePartsFromJSON(json: any): DateParts {\n    return DatePartsFromJSONTyped(json, false);\n}\n\nexport function DatePartsFromJSONTyped(json: any, ignoreDiscriminator: boolean): DateParts {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'dateParts': json['date-parts'],\n    };\n}\n\nexport function DatePartsToJSON(value?: DateParts | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'date-parts': value.dateParts,\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\nimport {\n    Agency,\n    AgencyFromJSON,\n    AgencyFromJSONTyped,\n    AgencyToJSON,\n} from './';\n\n/**\n * \n * @export\n * @interface DoiAgency\n */\nexport interface DoiAgency {\n    /**\n     * The DOI identifier associated with the work\n     * @type {string}\n     * @memberof DoiAgency\n     */\n    dOI: string;\n    /**\n     * \n     * @type {Agency}\n     * @memberof DoiAgency\n     */\n    agency: Agency;\n}\n\nexport function DoiAgencyFromJSON(json: any): DoiAgency {\n    return DoiAgencyFromJSONTyped(json, false);\n}\n\nexport function DoiAgencyFromJSONTyped(json: any, ignoreDiscriminator: boolean): DoiAgency {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'dOI': json['DOI'],\n        'agency': AgencyFromJSON(json['agency']),\n    };\n}\n\nexport function DoiAgencyToJSON(value?: DoiAgency | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'DOI': value.dOI,\n        'agency': AgencyToJSON(value.agency),\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\n/**\n * \n * @export\n * @interface ModelDate\n */\nexport interface ModelDate {\n    /**\n     * \n     * @type {Array<Array<number>>}\n     * @memberof ModelDate\n     */\n    dateParts: Array<Array<number>>;\n    /**\n     * \n     * @type {Date}\n     * @memberof ModelDate\n     */\n    dateTime: Date;\n    /**\n     * \n     * @type {number}\n     * @memberof ModelDate\n     */\n    timestamp: number;\n}\n\nexport function ModelDateFromJSON(json: any): ModelDate {\n    return ModelDateFromJSONTyped(json, false);\n}\n\nexport function ModelDateFromJSONTyped(json: any, ignoreDiscriminator: boolean): ModelDate {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'dateParts': json['date-parts'],\n        'dateTime': (new Date(json['date-time'])),\n        'timestamp': json['timestamp'],\n    };\n}\n\nexport function ModelDateToJSON(value?: ModelDate | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'date-parts': value.dateParts,\n        'date-time': (value.dateTime.toISOString()),\n        'timestamp': value.timestamp,\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\n/**\n * \n * @export\n * @interface Query\n */\nexport interface Query {\n    /**\n     * \n     * @type {number}\n     * @memberof Query\n     */\n    startIndex: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Query\n     */\n    searchTerms: string;\n}\n\nexport function QueryFromJSON(json: any): Query {\n    return QueryFromJSONTyped(json, false);\n}\n\nexport function QueryFromJSONTyped(json: any, ignoreDiscriminator: boolean): Query {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'startIndex': json['start-index'],\n        'searchTerms': json['search-terms'],\n    };\n}\n\nexport function QueryToJSON(value?: Query | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'start-index': value.startIndex,\n        'search-terms': value.searchTerms,\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\n/**\n * \n * @export\n * @interface Reference\n */\nexport interface Reference {\n    /**\n     * \n     * @type {string}\n     * @memberof Reference\n     */\n    issn?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Reference\n     */\n    standardsBody?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Reference\n     */\n    issue?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Reference\n     */\n    key: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Reference\n     */\n    seriesTitle?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Reference\n     */\n    isbnType?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Reference\n     */\n    doiAssertedBy?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Reference\n     */\n    firstPage?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Reference\n     */\n    isbn?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Reference\n     */\n    doi?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Reference\n     */\n    component?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Reference\n     */\n    articleTitle?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Reference\n     */\n    volumeTitle?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Reference\n     */\n    volume?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Reference\n     */\n    author?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Reference\n     */\n    standardDesignator?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Reference\n     */\n    year?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Reference\n     */\n    unstructured?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Reference\n     */\n    edition?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Reference\n     */\n    journalTitle?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Reference\n     */\n    issnType?: string;\n}\n\nexport function ReferenceFromJSON(json: any): Reference {\n    return ReferenceFromJSONTyped(json, false);\n}\n\nexport function ReferenceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Reference {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'issn': !exists(json, 'issn') ? undefined : json['issn'],\n        'standardsBody': !exists(json, 'standards-body') ? undefined : json['standards-body'],\n        'issue': !exists(json, 'issue') ? undefined : json['issue'],\n        'key': json['key'],\n        'seriesTitle': !exists(json, 'series-title') ? undefined : json['series-title'],\n        'isbnType': !exists(json, 'isbn-type') ? undefined : json['isbn-type'],\n        'doiAssertedBy': !exists(json, 'doi-asserted-by') ? undefined : json['doi-asserted-by'],\n        'firstPage': !exists(json, 'first-page') ? undefined : json['first-page'],\n        'isbn': !exists(json, 'isbn') ? undefined : json['isbn'],\n        'doi': !exists(json, 'doi') ? undefined : json['doi'],\n        'component': !exists(json, 'component') ? undefined : json['component'],\n        'articleTitle': !exists(json, 'article-title') ? undefined : json['article-title'],\n        'volumeTitle': !exists(json, 'volume-title') ? undefined : json['volume-title'],\n        'volume': !exists(json, 'volume') ? undefined : json['volume'],\n        'author': !exists(json, 'author') ? undefined : json['author'],\n        'standardDesignator': !exists(json, 'standard-designator') ? undefined : json['standard-designator'],\n        'year': !exists(json, 'year') ? undefined : json['year'],\n        'unstructured': !exists(json, 'unstructured') ? undefined : json['unstructured'],\n        'edition': !exists(json, 'edition') ? undefined : json['edition'],\n        'journalTitle': !exists(json, 'journal-title') ? undefined : json['journal-title'],\n        'issnType': !exists(json, 'issn-type') ? undefined : json['issn-type'],\n    };\n}\n\nexport function ReferenceToJSON(value?: Reference | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'issn': value.issn,\n        'standards-body': value.standardsBody,\n        'issue': value.issue,\n        'key': value.key,\n        'series-title': value.seriesTitle,\n        'isbn-type': value.isbnType,\n        'doi-asserted-by': value.doiAssertedBy,\n        'first-page': value.firstPage,\n        'isbn': value.isbn,\n        'doi': value.doi,\n        'component': value.component,\n        'article-title': value.articleTitle,\n        'volume-title': value.volumeTitle,\n        'volume': value.volume,\n        'author': value.author,\n        'standard-designator': value.standardDesignator,\n        'year': value.year,\n        'unstructured': value.unstructured,\n        'edition': value.edition,\n        'journal-title': value.journalTitle,\n        'issn-type': value.issnType,\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\nimport {\n    Author,\n    AuthorFromJSON,\n    AuthorFromJSONTyped,\n    AuthorToJSON,\n    DateParts,\n    DatePartsFromJSON,\n    DatePartsFromJSONTyped,\n    DatePartsToJSON,\n    ModelDate,\n    ModelDateFromJSON,\n    ModelDateFromJSONTyped,\n    ModelDateToJSON,\n    Reference,\n    ReferenceFromJSON,\n    ReferenceFromJSONTyped,\n    ReferenceToJSON,\n    WorkAssertion,\n    WorkAssertionFromJSON,\n    WorkAssertionFromJSONTyped,\n    WorkAssertionToJSON,\n    WorkClinicalTrial,\n    WorkClinicalTrialFromJSON,\n    WorkClinicalTrialFromJSONTyped,\n    WorkClinicalTrialToJSON,\n    WorkDomain,\n    WorkDomainFromJSON,\n    WorkDomainFromJSONTyped,\n    WorkDomainToJSON,\n    WorkFreeToRead,\n    WorkFreeToReadFromJSON,\n    WorkFreeToReadFromJSONTyped,\n    WorkFreeToReadToJSON,\n    WorkFunder,\n    WorkFunderFromJSON,\n    WorkFunderFromJSONTyped,\n    WorkFunderToJSON,\n    WorkISSNType,\n    WorkISSNTypeFromJSON,\n    WorkISSNTypeFromJSONTyped,\n    WorkISSNTypeToJSON,\n    WorkInstitution,\n    WorkInstitutionFromJSON,\n    WorkInstitutionFromJSONTyped,\n    WorkInstitutionToJSON,\n    WorkJournalIssue,\n    WorkJournalIssueFromJSON,\n    WorkJournalIssueFromJSONTyped,\n    WorkJournalIssueToJSON,\n    WorkLicense,\n    WorkLicenseFromJSON,\n    WorkLicenseFromJSONTyped,\n    WorkLicenseToJSON,\n    WorkLink,\n    WorkLinkFromJSON,\n    WorkLinkFromJSONTyped,\n    WorkLinkToJSON,\n    WorkReview,\n    WorkReviewFromJSON,\n    WorkReviewFromJSONTyped,\n    WorkReviewToJSON,\n    WorkStandardsBody,\n    WorkStandardsBodyFromJSON,\n    WorkStandardsBodyFromJSONTyped,\n    WorkStandardsBodyToJSON,\n    WorkUpdate,\n    WorkUpdateFromJSON,\n    WorkUpdateFromJSONTyped,\n    WorkUpdateToJSON,\n    WorksMessageMessageItemsRelationJavaLangString34985,\n    WorksMessageMessageItemsRelationJavaLangString34985FromJSON,\n    WorksMessageMessageItemsRelationJavaLangString34985FromJSONTyped,\n    WorksMessageMessageItemsRelationJavaLangString34985ToJSON,\n} from './';\n\n/**\n * \n * @export\n * @interface Work\n */\nexport interface Work {\n    /**\n     * \n     * @type {WorkInstitution}\n     * @memberof Work\n     */\n    institution?: WorkInstitution;\n    /**\n     * \n     * @type {ModelDate}\n     * @memberof Work\n     */\n    indexed: ModelDate;\n    /**\n     * \n     * @type {DateParts}\n     * @memberof Work\n     */\n    posted?: DateParts;\n    /**\n     * \n     * @type {string}\n     * @memberof Work\n     */\n    publisherLocation?: string;\n    /**\n     * \n     * @type {Array<WorkUpdate>}\n     * @memberof Work\n     */\n    updateTo?: Array<WorkUpdate>;\n    /**\n     * \n     * @type {Array<WorkStandardsBody>}\n     * @memberof Work\n     */\n    standardsBody?: Array<WorkStandardsBody>;\n    /**\n     * \n     * @type {string}\n     * @memberof Work\n     */\n    editionNumber?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Work\n     */\n    groupTitle?: Array<string>;\n    /**\n     * \n     * @type {number}\n     * @memberof Work\n     */\n    referenceCount: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Work\n     */\n    publisher: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Work\n     */\n    issue?: string;\n    /**\n     * \n     * @type {Array<WorkISSNType>}\n     * @memberof Work\n     */\n    isbnType?: Array<WorkISSNType>;\n    /**\n     * \n     * @type {Array<WorkLicense>}\n     * @memberof Work\n     */\n    license?: Array<WorkLicense>;\n    /**\n     * \n     * @type {Array<WorkFunder>}\n     * @memberof Work\n     */\n    funder?: Array<WorkFunder>;\n    /**\n     * \n     * @type {WorkDomain}\n     * @memberof Work\n     */\n    contentDomain: WorkDomain;\n    /**\n     * \n     * @type {Array<Author>}\n     * @memberof Work\n     */\n    chair?: Array<Author>;\n    /**\n     * \n     * @type {string}\n     * @memberof Work\n     */\n    shortContainerTitle?: string;\n    /**\n     * \n     * @type {DateParts}\n     * @memberof Work\n     */\n    accepted?: DateParts;\n    /**\n     * \n     * @type {DateParts}\n     * @memberof Work\n     */\n    contentUpdated?: DateParts;\n    /**\n     * \n     * @type {DateParts}\n     * @memberof Work\n     */\n    publishedPrint?: DateParts;\n    /**\n     * \n     * @type {string}\n     * @memberof Work\n     */\n    _abstract?: string;\n    /**\n     * The DOI identifier associated with the work\n     * @type {string}\n     * @memberof Work\n     */\n    dOI: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Work\n     */\n    type: string;\n    /**\n     * \n     * @type {ModelDate}\n     * @memberof Work\n     */\n    created: ModelDate;\n    /**\n     * \n     * @type {DateParts}\n     * @memberof Work\n     */\n    approved?: DateParts;\n    /**\n     * \n     * @type {string}\n     * @memberof Work\n     */\n    page?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Work\n     */\n    updatePolicy?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Work\n     */\n    source: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Work\n     */\n    isReferencedByCount: number;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Work\n     */\n    title: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof Work\n     */\n    prefix: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Work\n     */\n    volume?: string;\n    /**\n     * \n     * @type {Array<WorkClinicalTrial>}\n     * @memberof Work\n     */\n    clinicalTrialNumber?: Array<WorkClinicalTrial>;\n    /**\n     * \n     * @type {Array<Author>}\n     * @memberof Work\n     */\n    author: Array<Author>;\n    /**\n     * \n     * @type {string}\n     * @memberof Work\n     */\n    member: string;\n    /**\n     * \n     * @type {DateParts}\n     * @memberof Work\n     */\n    contentCreated?: DateParts;\n    /**\n     * \n     * @type {DateParts}\n     * @memberof Work\n     */\n    publishedOnline?: DateParts;\n    /**\n     * \n     * @type {Reference}\n     * @memberof Work\n     */\n    reference?: Array<Reference>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Work\n     */\n    containerTitle?: Array<string>;\n    /**\n     * \n     * @type {WorkReview}\n     * @memberof Work\n     */\n    review?: WorkReview;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Work\n     */\n    originalTitle?: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof Work\n     */\n    language?: string;\n    /**\n     * \n     * @type {Array<WorkLink>}\n     * @memberof Work\n     */\n    link?: Array<WorkLink>;\n    /**\n     * \n     * @type {ModelDate}\n     * @memberof Work\n     */\n    deposited: ModelDate;\n    /**\n     * \n     * @type {number}\n     * @memberof Work\n     */\n    score: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Work\n     */\n    degree?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Work\n     */\n    subtitle?: Array<string>;\n    /**\n     * \n     * @type {Array<Author>}\n     * @memberof Work\n     */\n    translator?: Array<Author>;\n    /**\n     * \n     * @type {WorkFreeToRead}\n     * @memberof Work\n     */\n    freeToRead?: WorkFreeToRead;\n    /**\n     * \n     * @type {Array<Author>}\n     * @memberof Work\n     */\n    editor?: Array<Author>;\n    /**\n     * \n     * @type {string}\n     * @memberof Work\n     */\n    componentNumber?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Work\n     */\n    shortTitle?: Array<string>;\n    /**\n     * \n     * @type {DateParts}\n     * @memberof Work\n     */\n    issued: DateParts;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Work\n     */\n    iSBN?: Array<string>;\n    /**\n     * \n     * @type {number}\n     * @memberof Work\n     */\n    referencesCount: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Work\n     */\n    partNumber?: string;\n    /**\n     * \n     * @type {WorkJournalIssue}\n     * @memberof Work\n     */\n    journalIssue?: WorkJournalIssue;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Work\n     */\n    alternativeId?: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof Work\n     */\n    uRL: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Work\n     */\n    archive?: Array<string>;\n    /**\n     * \n     * @type {{ [key: string]: WorksMessageMessageItemsRelationJavaLangString34985; }}\n     * @memberof Work\n     */\n    relation?: { [key: string]: WorksMessageMessageItemsRelationJavaLangString34985; };\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Work\n     */\n    iSSN?: Array<string>;\n    /**\n     * \n     * @type {Array<WorkISSNType>}\n     * @memberof Work\n     */\n    issnType?: Array<WorkISSNType>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof Work\n     */\n    subject?: Array<string>;\n    /**\n     * \n     * @type {DateParts}\n     * @memberof Work\n     */\n    publishedOther?: DateParts;\n    /**\n     * \n     * @type {DateParts}\n     * @memberof Work\n     */\n    published?: DateParts;\n    /**\n     * \n     * @type {Array<WorkAssertion>}\n     * @memberof Work\n     */\n    assertion?: Array<WorkAssertion>;\n    /**\n     * \n     * @type {string}\n     * @memberof Work\n     */\n    subtype?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Work\n     */\n    articleNumber?: string;\n}\n\nexport function WorkFromJSON(json: any): Work {\n    return WorkFromJSONTyped(json, false);\n}\n\nexport function WorkFromJSONTyped(json: any, ignoreDiscriminator: boolean): Work {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'institution': !exists(json, 'institution') ? undefined : WorkInstitutionFromJSON(json['institution']),\n        'indexed': ModelDateFromJSON(json['indexed']),\n        'posted': !exists(json, 'posted') ? undefined : DatePartsFromJSON(json['posted']),\n        'publisherLocation': !exists(json, 'publisher-location') ? undefined : json['publisher-location'],\n        'updateTo': !exists(json, 'update-to') ? undefined : ((json['update-to'] as Array<any>).map(WorkUpdateFromJSON)),\n        'standardsBody': !exists(json, 'standards-body') ? undefined : ((json['standards-body'] as Array<any>).map(WorkStandardsBodyFromJSON)),\n        'editionNumber': !exists(json, 'edition-number') ? undefined : json['edition-number'],\n        'groupTitle': !exists(json, 'group-title') ? undefined : json['group-title'],\n        'referenceCount': json['reference-count'],\n        'publisher': json['publisher'],\n        'issue': !exists(json, 'issue') ? undefined : json['issue'],\n        'isbnType': !exists(json, 'isbn-type') ? undefined : ((json['isbn-type'] as Array<any>).map(WorkISSNTypeFromJSON)),\n        'license': !exists(json, 'license') ? undefined : ((json['license'] as Array<any>).map(WorkLicenseFromJSON)),\n        'funder': !exists(json, 'funder') ? undefined : ((json['funder'] as Array<any>).map(WorkFunderFromJSON)),\n        'contentDomain': WorkDomainFromJSON(json['content-domain']),\n        'chair': !exists(json, 'chair') ? undefined : ((json['chair'] as Array<any>).map(AuthorFromJSON)),\n        'shortContainerTitle': !exists(json, 'short-container-title') ? undefined : json['short-container-title'],\n        'accepted': !exists(json, 'accepted') ? undefined : DatePartsFromJSON(json['accepted']),\n        'contentUpdated': !exists(json, 'content-updated') ? undefined : DatePartsFromJSON(json['content-updated']),\n        'publishedPrint': !exists(json, 'published-print') ? undefined : DatePartsFromJSON(json['published-print']),\n        '_abstract': !exists(json, 'abstract') ? undefined : json['abstract'],\n        'dOI': json['DOI'],\n        'type': json['type'],\n        'created': ModelDateFromJSON(json['created']),\n        'approved': !exists(json, 'approved') ? undefined : DatePartsFromJSON(json['approved']),\n        'page': !exists(json, 'page') ? undefined : json['page'],\n        'updatePolicy': !exists(json, 'update-policy') ? undefined : json['update-policy'],\n        'source': json['source'],\n        'isReferencedByCount': json['is-referenced-by-count'],\n        'title': json['title'],\n        'prefix': json['prefix'],\n        'volume': !exists(json, 'volume') ? undefined : json['volume'],\n        'clinicalTrialNumber': !exists(json, 'clinical-trial-number') ? undefined : ((json['clinical-trial-number'] as Array<any>).map(WorkClinicalTrialFromJSON)),\n        'author': !exists(json, 'author') ? new Array<Author>() : (json['author'] as Array<any>).map(AuthorFromJSON),\n        'member': json['member'],\n        'contentCreated': !exists(json, 'content-created') ? undefined : DatePartsFromJSON(json['content-created']),\n        'publishedOnline': !exists(json, 'published-online') ? undefined : DatePartsFromJSON(json['published-online']),\n        'reference': !exists(json, 'reference') ? undefined : (Array.isArray(json['reference']) ? ((json['reference'] as Array<any>).map(ReferenceFromJSON)) : new Array(ReferenceFromJSON(json['reference']))),\n        'containerTitle': !exists(json, 'container-title') ? undefined : json['container-title'],\n        'review': !exists(json, 'review') ? undefined : WorkReviewFromJSON(json['review']),\n        'originalTitle': !exists(json, 'original-title') ? undefined : json['original-title'],\n        'language': !exists(json, 'language') ? undefined : json['language'],\n        'link': !exists(json, 'link') ? undefined : ((json['link'] as Array<any>).map(WorkLinkFromJSON)),\n        'deposited': ModelDateFromJSON(json['deposited']),\n        'score': json['score'],\n        'degree': !exists(json, 'degree') ? undefined : json['degree'],\n        'subtitle': !exists(json, 'subtitle') ? undefined : json['subtitle'],\n        'translator': !exists(json, 'translator') ? undefined : ((json['translator'] as Array<any>).map(AuthorFromJSON)),\n        'freeToRead': !exists(json, 'free-to-read') ? undefined : WorkFreeToReadFromJSON(json['free-to-read']),\n        'editor': !exists(json, 'editor') ? undefined : ((json['editor'] as Array<any>).map(AuthorFromJSON)),\n        'componentNumber': !exists(json, 'component-number') ? undefined : json['component-number'],\n        'shortTitle': !exists(json, 'short-title') ? undefined : json['short-title'],\n        'issued': DatePartsFromJSON(json['issued']),\n        'iSBN': !exists(json, 'ISBN') ? undefined : json['ISBN'],\n        'referencesCount': json['references-count'],\n        'partNumber': !exists(json, 'part-number') ? undefined : json['part-number'],\n        'journalIssue': !exists(json, 'journal-issue') ? undefined : WorkJournalIssueFromJSON(json['journal-issue']),\n        'alternativeId': !exists(json, 'alternative-id') ? undefined : json['alternative-id'],\n        'uRL': json['URL'],\n        'archive': !exists(json, 'archive') ? undefined : json['archive'],\n        'relation': !exists(json, 'relation') ? undefined : (mapValues(json['relation'], WorksMessageMessageItemsRelationJavaLangString34985FromJSON)),\n        'iSSN': !exists(json, 'ISSN') ? undefined : json['ISSN'],\n        'issnType': !exists(json, 'issn-type') ? undefined : ((json['issn-type'] as Array<any>).map(WorkISSNTypeFromJSON)),\n        'subject': !exists(json, 'subject') ? undefined : json['subject'],\n        'publishedOther': !exists(json, 'published-other') ? undefined : DatePartsFromJSON(json['published-other']),\n        'published': !exists(json, 'published') ? undefined : DatePartsFromJSON(json['published']),\n        'assertion': !exists(json, 'assertion') ? undefined : ((json['assertion'] as Array<any>).map(WorkAssertionFromJSON)),\n        'subtype': !exists(json, 'subtype') ? undefined : json['subtype'],\n        'articleNumber': !exists(json, 'article-number') ? undefined : json['article-number'],\n    };\n}\n\nexport function WorkToJSON(value?: Work | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'institution': WorkInstitutionToJSON(value.institution),\n        'indexed': ModelDateToJSON(value.indexed),\n        'posted': DatePartsToJSON(value.posted),\n        'publisher-location': value.publisherLocation,\n        'update-to': value.updateTo === undefined ? undefined : ((value.updateTo as Array<any>).map(WorkUpdateToJSON)),\n        'standards-body': value.standardsBody === undefined ? undefined : ((value.standardsBody as Array<any>).map(WorkStandardsBodyToJSON)),\n        'edition-number': value.editionNumber,\n        'group-title': value.groupTitle,\n        'reference-count': value.referenceCount,\n        'publisher': value.publisher,\n        'issue': value.issue,\n        'isbn-type': value.isbnType === undefined ? undefined : ((value.isbnType as Array<any>).map(WorkISSNTypeToJSON)),\n        'license': value.license === undefined ? undefined : ((value.license as Array<any>).map(WorkLicenseToJSON)),\n        'funder': value.funder === undefined ? undefined : ((value.funder as Array<any>).map(WorkFunderToJSON)),\n        'content-domain': WorkDomainToJSON(value.contentDomain),\n        'chair': value.chair === undefined ? undefined : ((value.chair as Array<any>).map(AuthorToJSON)),\n        'short-container-title': value.shortContainerTitle,\n        'accepted': DatePartsToJSON(value.accepted),\n        'content-updated': DatePartsToJSON(value.contentUpdated),\n        'published-print': DatePartsToJSON(value.publishedPrint),\n        'abstract': value._abstract,\n        'DOI': value.dOI,\n        'type': value.type,\n        'created': ModelDateToJSON(value.created),\n        'approved': DatePartsToJSON(value.approved),\n        'page': value.page,\n        'update-policy': value.updatePolicy,\n        'source': value.source,\n        'is-referenced-by-count': value.isReferencedByCount,\n        'title': value.title,\n        'prefix': value.prefix,\n        'volume': value.volume,\n        'clinical-trial-number': value.clinicalTrialNumber === undefined ? undefined : ((value.clinicalTrialNumber as Array<any>).map(WorkClinicalTrialToJSON)),\n        'author': ((value.author as Array<any>).map(AuthorToJSON)),\n        'member': value.member,\n        'content-created': DatePartsToJSON(value.contentCreated),\n        'published-online': DatePartsToJSON(value.publishedOnline),\n        'reference': value.reference === undefined ? undefined : ((value.reference as Array<any>).map(ReferenceToJSON)),\n        'container-title': value.containerTitle,\n        'review': WorkReviewToJSON(value.review),\n        'original-title': value.originalTitle,\n        'language': value.language,\n        'link': value.link === undefined ? undefined : ((value.link as Array<any>).map(WorkLinkToJSON)),\n        'deposited': ModelDateToJSON(value.deposited),\n        'score': value.score,\n        'degree': value.degree,\n        'subtitle': value.subtitle,\n        'translator': value.translator === undefined ? undefined : ((value.translator as Array<any>).map(AuthorToJSON)),\n        'free-to-read': WorkFreeToReadToJSON(value.freeToRead),\n        'editor': value.editor === undefined ? undefined : ((value.editor as Array<any>).map(AuthorToJSON)),\n        'component-number': value.componentNumber,\n        'short-title': value.shortTitle,\n        'issued': DatePartsToJSON(value.issued),\n        'ISBN': value.iSBN,\n        'references-count': value.referencesCount,\n        'part-number': value.partNumber,\n        'journal-issue': WorkJournalIssueToJSON(value.journalIssue),\n        'alternative-id': value.alternativeId,\n        'URL': value.uRL,\n        'archive': value.archive,\n        'relation': value.relation === undefined ? undefined : (mapValues(value.relation, WorksMessageMessageItemsRelationJavaLangString34985ToJSON)),\n        'ISSN': value.iSSN,\n        'issn-type': value.issnType === undefined ? undefined : ((value.issnType as Array<any>).map(WorkISSNTypeToJSON)),\n        'subject': value.subject,\n        'published-other': DatePartsToJSON(value.publishedOther),\n        'published': DatePartsToJSON(value.published),\n        'assertion': value.assertion === undefined ? undefined : ((value.assertion as Array<any>).map(WorkAssertionToJSON)),\n        'subtype': value.subtype,\n        'article-number': value.articleNumber,\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\nimport {\n    WorksMessageMessageItemsAssertionExplanation,\n    WorksMessageMessageItemsAssertionExplanationFromJSON,\n    WorksMessageMessageItemsAssertionExplanationFromJSONTyped,\n    WorksMessageMessageItemsAssertionExplanationToJSON,\n    WorksMessageMessageItemsAssertionGroup,\n    WorksMessageMessageItemsAssertionGroupFromJSON,\n    WorksMessageMessageItemsAssertionGroupFromJSONTyped,\n    WorksMessageMessageItemsAssertionGroupToJSON,\n} from './';\n\n/**\n * \n * @export\n * @interface WorkAssertion\n */\nexport interface WorkAssertion {\n    /**\n     * \n     * @type {WorksMessageMessageItemsAssertionGroup}\n     * @memberof WorkAssertion\n     */\n    group: WorksMessageMessageItemsAssertionGroup;\n    /**\n     * \n     * @type {WorksMessageMessageItemsAssertionExplanation}\n     * @memberof WorkAssertion\n     */\n    explanation: WorksMessageMessageItemsAssertionExplanation;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkAssertion\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkAssertion\n     */\n    value: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkAssertion\n     */\n    uRL: string;\n    /**\n     * \n     * @type {number}\n     * @memberof WorkAssertion\n     */\n    order: number;\n}\n\nexport function WorkAssertionFromJSON(json: any): WorkAssertion {\n    return WorkAssertionFromJSONTyped(json, false);\n}\n\nexport function WorkAssertionFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkAssertion {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'group': WorksMessageMessageItemsAssertionGroupFromJSON(json['group']),\n        'explanation': WorksMessageMessageItemsAssertionExplanationFromJSON(json['explanation']),\n        'name': json['name'],\n        'value': json['value'],\n        'uRL': json['URL'],\n        'order': json['order'],\n    };\n}\n\nexport function WorkAssertionToJSON(value?: WorkAssertion | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'group': WorksMessageMessageItemsAssertionGroupToJSON(value.group),\n        'explanation': WorksMessageMessageItemsAssertionExplanationToJSON(value.explanation),\n        'name': value.name,\n        'value': value.value,\n        'URL': value.uRL,\n        'order': value.order,\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\n/**\n * \n * @export\n * @interface WorkClinicalTrial\n */\nexport interface WorkClinicalTrial {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkClinicalTrial\n     */\n    clinicalTrialNumber: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkClinicalTrial\n     */\n    registry: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkClinicalTrial\n     */\n    type: string;\n}\n\nexport function WorkClinicalTrialFromJSON(json: any): WorkClinicalTrial {\n    return WorkClinicalTrialFromJSONTyped(json, false);\n}\n\nexport function WorkClinicalTrialFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkClinicalTrial {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'clinicalTrialNumber': json['clinical-trial-number'],\n        'registry': json['registry'],\n        'type': json['type'],\n    };\n}\n\nexport function WorkClinicalTrialToJSON(value?: WorkClinicalTrial | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'clinical-trial-number': value.clinicalTrialNumber,\n        'registry': value.registry,\n        'type': value.type,\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\n/**\n * \n * @export\n * @interface WorkDomain\n */\nexport interface WorkDomain {\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof WorkDomain\n     */\n    domain: Array<string>;\n    /**\n     * \n     * @type {boolean}\n     * @memberof WorkDomain\n     */\n    crossmarkRestriction: boolean;\n}\n\nexport function WorkDomainFromJSON(json: any): WorkDomain {\n    return WorkDomainFromJSONTyped(json, false);\n}\n\nexport function WorkDomainFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkDomain {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'domain': json['domain'],\n        'crossmarkRestriction': json['crossmark-restriction'],\n    };\n}\n\nexport function WorkDomainToJSON(value?: WorkDomain | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'domain': value.domain,\n        'crossmark-restriction': value.crossmarkRestriction,\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\nimport {\n    DateParts,\n    DatePartsFromJSON,\n    DatePartsFromJSONTyped,\n    DatePartsToJSON,\n} from './';\n\n/**\n * \n * @export\n * @interface WorkFreeToRead\n */\nexport interface WorkFreeToRead {\n    /**\n     * \n     * @type {DateParts}\n     * @memberof WorkFreeToRead\n     */\n    startDate?: DateParts;\n    /**\n     * \n     * @type {DateParts}\n     * @memberof WorkFreeToRead\n     */\n    endDate?: DateParts;\n}\n\nexport function WorkFreeToReadFromJSON(json: any): WorkFreeToRead {\n    return WorkFreeToReadFromJSONTyped(json, false);\n}\n\nexport function WorkFreeToReadFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkFreeToRead {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'startDate': !exists(json, 'start-date') ? undefined : DatePartsFromJSON(json['start-date']),\n        'endDate': !exists(json, 'end-date') ? undefined : DatePartsFromJSON(json['end-date']),\n    };\n}\n\nexport function WorkFreeToReadToJSON(value?: WorkFreeToRead | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'start-date': DatePartsToJSON(value.startDate),\n        'end-date': DatePartsToJSON(value.endDate),\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\n/**\n * \n * @export\n * @interface WorkFunder\n */\nexport interface WorkFunder {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkFunder\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkFunder\n     */\n    dOI?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkFunder\n     */\n    doiAssertedBy?: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof WorkFunder\n     */\n    award: Array<string>;\n}\n\nexport function WorkFunderFromJSON(json: any): WorkFunder {\n    return WorkFunderFromJSONTyped(json, false);\n}\n\nexport function WorkFunderFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkFunder {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'name': json['name'],\n        'dOI': !exists(json, 'DOI') ? undefined : json['DOI'],\n        'doiAssertedBy': !exists(json, 'doi-asserted-by') ? undefined : json['doi-asserted-by'],\n        'award': json['award'],\n    };\n}\n\nexport function WorkFunderToJSON(value?: WorkFunder | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'name': value.name,\n        'DOI': value.dOI,\n        'doi-asserted-by': value.doiAssertedBy,\n        'award': value.award,\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\n/**\n * \n * @export\n * @interface WorkISSNType\n */\nexport interface WorkISSNType {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkISSNType\n     */\n    type: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof WorkISSNType\n     */\n    value: Array<string>;\n}\n\nexport function WorkISSNTypeFromJSON(json: any): WorkISSNType {\n    return WorkISSNTypeFromJSONTyped(json, false);\n}\n\nexport function WorkISSNTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkISSNType {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'type': json['type'],\n        'value': json['value'],\n    };\n}\n\nexport function WorkISSNTypeToJSON(value?: WorkISSNType | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'type': value.type,\n        'value': value.value,\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\n/**\n * \n * @export\n * @interface WorkInstitution\n */\nexport interface WorkInstitution {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkInstitution\n     */\n    name: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof WorkInstitution\n     */\n    place: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof WorkInstitution\n     */\n    department: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof WorkInstitution\n     */\n    acronym: Array<string>;\n}\n\nexport function WorkInstitutionFromJSON(json: any): WorkInstitution {\n    return WorkInstitutionFromJSONTyped(json, false);\n}\n\nexport function WorkInstitutionFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkInstitution {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'name': json['name'],\n        'place': json['place'],\n        'department': json['department'],\n        'acronym': json['acronym'],\n    };\n}\n\nexport function WorkInstitutionToJSON(value?: WorkInstitution | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'name': value.name,\n        'place': value.place,\n        'department': value.department,\n        'acronym': value.acronym,\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\n/**\n * \n * @export\n * @interface WorkJournalIssue\n */\nexport interface WorkJournalIssue {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkJournalIssue\n     */\n    issue: string;\n}\n\nexport function WorkJournalIssueFromJSON(json: any): WorkJournalIssue {\n    return WorkJournalIssueFromJSONTyped(json, false);\n}\n\nexport function WorkJournalIssueFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkJournalIssue {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'issue': json['issue'],\n    };\n}\n\nexport function WorkJournalIssueToJSON(value?: WorkJournalIssue | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'issue': value.issue,\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\nimport {\n    ModelDate,\n    ModelDateFromJSON,\n    ModelDateFromJSONTyped,\n    ModelDateToJSON,\n} from './';\n\n/**\n * \n * @export\n * @interface WorkLicense\n */\nexport interface WorkLicense {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkLicense\n     */\n    uRL: string;\n    /**\n     * \n     * @type {ModelDate}\n     * @memberof WorkLicense\n     */\n    start: ModelDate;\n    /**\n     * \n     * @type {number}\n     * @memberof WorkLicense\n     */\n    delayInDays: number;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkLicense\n     */\n    contentVersion: string;\n}\n\nexport function WorkLicenseFromJSON(json: any): WorkLicense {\n    return WorkLicenseFromJSONTyped(json, false);\n}\n\nexport function WorkLicenseFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkLicense {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'uRL': json['URL'],\n        'start': ModelDateFromJSON(json['start']),\n        'delayInDays': json['delay-in-days'],\n        'contentVersion': json['content-version'],\n    };\n}\n\nexport function WorkLicenseToJSON(value?: WorkLicense | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'URL': value.uRL,\n        'start': ModelDateToJSON(value.start),\n        'delay-in-days': value.delayInDays,\n        'content-version': value.contentVersion,\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\n/**\n * \n * @export\n * @interface WorkLink\n */\nexport interface WorkLink {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkLink\n     */\n    uRL: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkLink\n     */\n    contentType: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkLink\n     */\n    contentVersion: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkLink\n     */\n    intendedApplication: string;\n}\n\nexport function WorkLinkFromJSON(json: any): WorkLink {\n    return WorkLinkFromJSONTyped(json, false);\n}\n\nexport function WorkLinkFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkLink {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'uRL': json['URL'],\n        'contentType': json['content-type'],\n        'contentVersion': json['content-version'],\n        'intendedApplication': json['intended-application'],\n    };\n}\n\nexport function WorkLinkToJSON(value?: WorkLink | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'URL': value.uRL,\n        'content-type': value.contentType,\n        'content-version': value.contentVersion,\n        'intended-application': value.intendedApplication,\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\nimport {\n    Work,\n    WorkFromJSON,\n    WorkFromJSONTyped,\n    WorkToJSON,\n} from './';\n\n/**\n * \n * @export\n * @interface WorkMessage\n */\nexport interface WorkMessage {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkMessage\n     */\n    status: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkMessage\n     */\n    messageType: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkMessage\n     */\n    messageVersion: string;\n    /**\n     * \n     * @type {Work}\n     * @memberof WorkMessage\n     */\n    message: Work;\n}\n\nexport function WorkMessageFromJSON(json: any): WorkMessage {\n    return WorkMessageFromJSONTyped(json, false);\n}\n\nexport function WorkMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkMessage {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        'status': json['status'],\n        'messageType': json['message-type'],\n        'messageVersion': json['message-version'],\n        'message': WorkFromJSON(json['message']),\n    };\n}\n\nexport function WorkMessageToJSON(value?: WorkMessage | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'status': value.status,\n        'message-type': value.messageType,\n        'message-version': value.messageVersion,\n        'message': WorkToJSON(value.message),\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\n/**\n * \n * @export\n * @interface WorkReview\n */\nexport interface WorkReview {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkReview\n     */\n    type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkReview\n     */\n    runningNumber: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkReview\n     */\n    revisionRound: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkReview\n     */\n    stage: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkReview\n     */\n    competingInterestStatement: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkReview\n     */\n    recommendation: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkReview\n     */\n    language: string;\n}\n\nexport function WorkReviewFromJSON(json: any): WorkReview {\n    return WorkReviewFromJSONTyped(json, false);\n}\n\nexport function WorkReviewFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkReview {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'type': json['type'],\n        'runningNumber': json['running-number'],\n        'revisionRound': json['revision-round'],\n        'stage': json['stage'],\n        'competingInterestStatement': json['competing-interest-statement'],\n        'recommendation': json['recommendation'],\n        'language': json['language'],\n    };\n}\n\nexport function WorkReviewToJSON(value?: WorkReview | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'type': value.type,\n        'running-number': value.runningNumber,\n        'revision-round': value.revisionRound,\n        'stage': value.stage,\n        'competing-interest-statement': value.competingInterestStatement,\n        'recommendation': value.recommendation,\n        'language': value.language,\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\n/**\n * \n * @export\n * @interface WorkStandardsBody\n */\nexport interface WorkStandardsBody {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkStandardsBody\n     */\n    name: string;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof WorkStandardsBody\n     */\n    acronym: Array<string>;\n}\n\nexport function WorkStandardsBodyFromJSON(json: any): WorkStandardsBody {\n    return WorkStandardsBodyFromJSONTyped(json, false);\n}\n\nexport function WorkStandardsBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkStandardsBody {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'name': json['name'],\n        'acronym': json['acronym'],\n    };\n}\n\nexport function WorkStandardsBodyToJSON(value?: WorkStandardsBody | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'name': value.name,\n        'acronym': value.acronym,\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\nimport {\n    ModelDate,\n    ModelDateFromJSON,\n    ModelDateFromJSONTyped,\n    ModelDateToJSON,\n} from './';\n\n/**\n * \n * @export\n * @interface WorkUpdate\n */\nexport interface WorkUpdate {\n    /**\n     * \n     * @type {string}\n     * @memberof WorkUpdate\n     */\n    label: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkUpdate\n     */\n    dOI: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorkUpdate\n     */\n    type: string;\n    /**\n     * \n     * @type {ModelDate}\n     * @memberof WorkUpdate\n     */\n    updated: ModelDate;\n}\n\nexport function WorkUpdateFromJSON(json: any): WorkUpdate {\n    return WorkUpdateFromJSONTyped(json, false);\n}\n\nexport function WorkUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorkUpdate {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'label': json['label'],\n        'dOI': json['DOI'],\n        'type': json['type'],\n        'updated': ModelDateFromJSON(json['updated']),\n    };\n}\n\nexport function WorkUpdateToJSON(value?: WorkUpdate | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'label': value.label,\n        'DOI': value.dOI,\n        'type': value.type,\n        'updated': ModelDateToJSON(value.updated),\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\nimport {\n    Query,\n    QueryFromJSON,\n    QueryFromJSONTyped,\n    QueryToJSON,\n    Work,\n    WorkFromJSON,\n    WorkFromJSONTyped,\n    WorkToJSON,\n} from './';\n\n/**\n * \n * @export\n * @interface Works\n */\nexport interface Works {\n    /**\n     * \n     * @type {number}\n     * @memberof Works\n     */\n    itemsPerPage: number;\n    /**\n     * \n     * @type {Query}\n     * @memberof Works\n     */\n    query: Query;\n    /**\n     * \n     * @type {number}\n     * @memberof Works\n     */\n    totalResults: number;\n    /**\n     * Used to navigate to the next page of results when using cursor deep paging\n     * @type {string}\n     * @memberof Works\n     */\n    nextCursor?: string;\n    /**\n     * \n     * @type {Array<Work>}\n     * @memberof Works\n     */\n    items: Array<Work>;\n}\n\nexport function WorksFromJSON(json: any): Works {\n    return WorksFromJSONTyped(json, false);\n}\n\nexport function WorksFromJSONTyped(json: any, ignoreDiscriminator: boolean): Works {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'itemsPerPage': json['items-per-page'],\n        'query': QueryFromJSON(json['query']),\n        'totalResults': json['total-results'],\n        'nextCursor': !exists(json, 'next-cursor') ? undefined : json['next-cursor'],\n        'items': ((json['items'] as Array<any>).map(WorkFromJSON)),\n    };\n}\n\nexport function WorksToJSON(value?: Works | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'items-per-page': value.itemsPerPage,\n        'query': QueryToJSON(value.query),\n        'total-results': value.totalResults,\n        'next-cursor': value.nextCursor,\n        'items': ((value.items as Array<any>).map(WorkToJSON)),\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\nimport {\n    Works,\n    WorksFromJSON,\n    WorksFromJSONTyped,\n    WorksToJSON,\n} from './';\n\n/**\n * \n * @export\n * @interface WorksMessage\n */\nexport interface WorksMessage {\n    /**\n     * \n     * @type {string}\n     * @memberof WorksMessage\n     */\n    status: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorksMessage\n     */\n    messageType: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorksMessage\n     */\n    messageVersion: string;\n    /**\n     * \n     * @type {Works}\n     * @memberof WorksMessage\n     */\n    message: Works;\n}\n\nexport function WorksMessageFromJSON(json: any): WorksMessage {\n    return WorksMessageFromJSONTyped(json, false);\n}\n\nexport function WorksMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorksMessage {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'status': json['status'],\n        'messageType': json['message-type'],\n        'messageVersion': json['message-version'],\n        'message': WorksFromJSON(json['message']),\n    };\n}\n\nexport function WorksMessageToJSON(value?: WorksMessage | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'status': value.status,\n        'message-type': value.messageType,\n        'message-version': value.messageVersion,\n        'message': WorksToJSON(value.message),\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\n/**\n * \n * @export\n * @interface WorksMessageMessageItemsAssertionExplanation\n */\nexport interface WorksMessageMessageItemsAssertionExplanation {\n    /**\n     * \n     * @type {string}\n     * @memberof WorksMessageMessageItemsAssertionExplanation\n     */\n    uRL: string;\n}\n\nexport function WorksMessageMessageItemsAssertionExplanationFromJSON(json: any): WorksMessageMessageItemsAssertionExplanation {\n    return WorksMessageMessageItemsAssertionExplanationFromJSONTyped(json, false);\n}\n\nexport function WorksMessageMessageItemsAssertionExplanationFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorksMessageMessageItemsAssertionExplanation {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'uRL': json['URL'],\n    };\n}\n\nexport function WorksMessageMessageItemsAssertionExplanationToJSON(value?: WorksMessageMessageItemsAssertionExplanation | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'URL': value.uRL,\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\n/**\n * \n * @export\n * @interface WorksMessageMessageItemsAssertionGroup\n */\nexport interface WorksMessageMessageItemsAssertionGroup {\n    /**\n     * \n     * @type {string}\n     * @memberof WorksMessageMessageItemsAssertionGroup\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorksMessageMessageItemsAssertionGroup\n     */\n    label: string;\n}\n\nexport function WorksMessageMessageItemsAssertionGroupFromJSON(json: any): WorksMessageMessageItemsAssertionGroup {\n    return WorksMessageMessageItemsAssertionGroupFromJSONTyped(json, false);\n}\n\nexport function WorksMessageMessageItemsAssertionGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): WorksMessageMessageItemsAssertionGroup {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'name': json['name'],\n        'label': json['label'],\n    };\n}\n\nexport function WorksMessageMessageItemsAssertionGroupToJSON(value?: WorksMessageMessageItemsAssertionGroup | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'name': value.name,\n        'label': value.label,\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { exists, mapValues } from '../runtime';\n/**\n * \n * @export\n * @interface WorksMessageMessageItemsRelationJavaLangString34985\n */\nexport interface WorksMessageMessageItemsRelationJavaLangString34985 {\n    /**\n     * \n     * @type {string}\n     * @memberof WorksMessageMessageItemsRelationJavaLangString34985\n     */\n    idType: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorksMessageMessageItemsRelationJavaLangString34985\n     */\n    id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof WorksMessageMessageItemsRelationJavaLangString34985\n     */\n    assertedBy: string;\n}\n\nexport function WorksMessageMessageItemsRelationJavaLangString34985FromJSON(json: any): WorksMessageMessageItemsRelationJavaLangString34985 {\n    return WorksMessageMessageItemsRelationJavaLangString34985FromJSONTyped(json, false);\n}\n\nexport function WorksMessageMessageItemsRelationJavaLangString34985FromJSONTyped(json: any, ignoreDiscriminator: boolean): WorksMessageMessageItemsRelationJavaLangString34985 {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        \n        'idType': json['id-type'],\n        'id': json['id'],\n        'assertedBy': json['asserted-by'],\n    };\n}\n\nexport function WorksMessageMessageItemsRelationJavaLangString34985ToJSON(value?: WorksMessageMessageItemsRelationJavaLangString34985 | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        \n        'id-type': value.idType,\n        'id': value.id,\n        'asserted-by': value.assertedBy,\n    };\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as runtime from '../runtime';\nimport {\n    DepositMessage,\n    DepositMessageFromJSON,\n    DepositMessageToJSON,\n    DepositsMessage,\n    DepositsMessageFromJSON,\n    DepositsMessageToJSON,\n} from '../models';\n\nexport interface DepositsGetRequest {\n    filter?: string;\n    query?: string;\n    rows?: number;\n    mailto?: string;\n    offset?: number;\n}\n\nexport interface DepositsIdGetRequest {\n    id: string;\n}\n\nexport interface DepositsPostRequest {\n    body: string;\n    test?: boolean;\n}\n\n/**\n * \n */\nexport class DepositsApi extends runtime.BaseAPI {\n\n    /**\n     * Returns a list of deposits. ## Filters  Filters allow you to select deposits based on specific criteria. All filter results are lists.  ##  Examples:  ## ``` /deposits?filter=from-submission-time:2020-06-01 ``` ##  This endpoint supports the following filters:  ##  + `doi` + `from-submission-time` + `owner` + `status` + `test` + `type` + `until-submission-time` ## Pagination with offsets  Offsets are an easy way to iterate over results sets up to 10,000 items. This limit applies to the sum of values of parameters `offset` + `rows`.  ##  The number of items returned in a single response is controlled by `rows` parameter (default is 20, and maximum is 1,000). To limit results to 5, for example, you could do the following:  ##  ``` /works?query=allen+renear&rows=5 ```  ##  `offset` parameter can be used to retrieve items starting from a specific index of the result list. For example, to select the second set of 5 results (i.e. results 6 through 10), you would do the following:  ##  ``` /works?query=allen+renear&rows=5&offset=5 ```  ## \n     */\n    async depositsGetRaw(requestParameters: DepositsGetRequest): Promise<runtime.ApiResponse<DepositsMessage>> {\n        const queryParameters: any = {};\n\n        if (requestParameters.filter !== undefined) {\n            queryParameters['filter'] = requestParameters.filter;\n        }\n\n        if (requestParameters.query !== undefined) {\n            queryParameters['query'] = requestParameters.query;\n        }\n\n        if (requestParameters.rows !== undefined) {\n            queryParameters['rows'] = requestParameters.rows;\n        }\n\n        if (requestParameters.mailto !== undefined) {\n            queryParameters['mailto'] = requestParameters.mailto;\n        }\n\n        if (requestParameters.offset !== undefined) {\n            queryParameters['offset'] = requestParameters.offset;\n        }\n\n        const headerParameters: runtime.HTTPHeaders = {};\n\n        const response = await this.request({\n            path: `/deposits`,\n            method: 'GET',\n            headers: headerParameters,\n            query: queryParameters,\n        });\n\n        return new runtime.JSONApiResponse(response, (jsonValue) => DepositsMessageFromJSON(jsonValue));\n    }\n\n    /**\n     * Returns a list of deposits. ## Filters  Filters allow you to select deposits based on specific criteria. All filter results are lists.  ##  Examples:  ## ``` /deposits?filter=from-submission-time:2020-06-01 ``` ##  This endpoint supports the following filters:  ##  + `doi` + `from-submission-time` + `owner` + `status` + `test` + `type` + `until-submission-time` ## Pagination with offsets  Offsets are an easy way to iterate over results sets up to 10,000 items. This limit applies to the sum of values of parameters `offset` + `rows`.  ##  The number of items returned in a single response is controlled by `rows` parameter (default is 20, and maximum is 1,000). To limit results to 5, for example, you could do the following:  ##  ``` /works?query=allen+renear&rows=5 ```  ##  `offset` parameter can be used to retrieve items starting from a specific index of the result list. For example, to select the second set of 5 results (i.e. results 6 through 10), you would do the following:  ##  ``` /works?query=allen+renear&rows=5&offset=5 ```  ## \n     */\n    async depositsGet(requestParameters: DepositsGetRequest): Promise<DepositsMessage> {\n        const response = await this.depositsGetRaw(requestParameters);\n        return await response.value();\n    }\n\n    /**\n     * Returns information about a deposit.\n     */\n    async depositsIdGetRaw(requestParameters: DepositsIdGetRequest): Promise<runtime.ApiResponse<DepositMessage>> {\n        if (requestParameters.id === null || requestParameters.id === undefined) {\n            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling depositsIdGet.');\n        }\n\n        const queryParameters: any = {};\n\n        const headerParameters: runtime.HTTPHeaders = {};\n\n        const response = await this.request({\n            path: `/deposits/{id}`.replace(`{${\"id\"}}`, encodeURIComponent(String(requestParameters.id))),\n            method: 'GET',\n            headers: headerParameters,\n            query: queryParameters,\n        });\n\n        return new runtime.JSONApiResponse(response, (jsonValue) => DepositMessageFromJSON(jsonValue));\n    }\n\n    /**\n     * Returns information about a deposit.\n     */\n    async depositsIdGet(requestParameters: DepositsIdGetRequest): Promise<DepositMessage> {\n        const response = await this.depositsIdGetRaw(requestParameters);\n        return await response.value();\n    }\n\n    /**\n     * Deposit new content.\n     */\n    async depositsPostRaw(requestParameters: DepositsPostRequest): Promise<runtime.ApiResponse<DepositMessage>> {\n        if (requestParameters.body === null || requestParameters.body === undefined) {\n            throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling depositsPost.');\n        }\n\n        const queryParameters: any = {};\n\n        if (requestParameters.test !== undefined) {\n            queryParameters['test'] = requestParameters.test;\n        }\n\n        const headerParameters: runtime.HTTPHeaders = {};\n\n        headerParameters['Content-Type'] = 'application/vnd.crossref.deposit+xml';\n\n        const response = await this.request({\n            path: `/deposits`,\n            method: 'POST',\n            headers: headerParameters,\n            query: queryParameters,\n            body: requestParameters.body as any,\n        });\n\n        return new runtime.JSONApiResponse(response, (jsonValue) => DepositMessageFromJSON(jsonValue));\n    }\n\n    /**\n     * Deposit new content.\n     */\n    async depositsPost(requestParameters: DepositsPostRequest): Promise<DepositMessage> {\n        const response = await this.depositsPostRaw(requestParameters);\n        return await response.value();\n    }\n\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Crossref Unified Resource API\n * ## Preamble  The Crossref REST API is one of [a variety of tools and APIs](https://www.crossref.org/services/metadata-retrieval/) that allow anybody to search and reuse our members\\' metadata in sophisticated ways.  ## Meta  ### Frequency of indexing  Records typically appear in the REST API within 20 minutes of their having been successfully deposited with Crossref.  Summary information (e.g. counts, etc.) are processed in batch every 24 hours.  ### Learning about performance or availability problems  We record and report service issues on our [status page](http://status.crossref.org).  You might want to check this to see if we are already aware of a problem before you report it.  We also post notice of any ongoing performance problems with our services on our twitter feeds at [CrossrefOrg](https://twitter.com/CrossrefOrg) and [CrossrefSupport](https://twitter.com/@CrossrefSupport).  ### Reporting performance or availability problems  Report performance/availability at our [support site](https://www.crossref.org/contact/).  ### Reporting bugs, requesting features  Please report bugs with the API or the documentation on our [issue tracker](https://gitlab.com/crossref/issues).  ### Documentation License  <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\"><img alt=\\\"Creative Commons License\\\" style=\\\"border-width:0\\\" src=\\\"https://i.creativecommons.org/l/by/4.0/88x31.png\\\" /></a><br />This work is licensed under a <a rel=\\\"license\\\" href=\\\"http://creativecommons.org/licenses/by/4.0/\\\">Creative Commons Attribution 4.0 International License</a>.  ### Metadata License  Crossref asserts no claims of ownership to individual items of bibliographic metadata and associated Digital Object Identifiers (DOIs) acquired through the use of the Crossref Free Services. Individual items of bibliographic metadata and associated DOIs may be cached and incorporated into the user\\'s content and systems.  ### Privacy  We also have a [privacy policy](https://www.crossref.org/privacy/).  ### Libraries  You might be able to avoid reading all this documentation if you instead use one of the several excellent libraries that have been written for the Crossref REST API. For example:  - [crossref-commons](https://gitlab.com/crossref/crossref_commons_py) (Python, developed by Crossref) - [habanero](https://github.com/sckott/habanero) (Python) - [serrano](https://github.com/sckott/serrano) (Ruby) - [rcrossref](https://github.com/ropensci/rcrossref) (R) - [crossrefapi](https://github.com/fabiobatalha/crossrefapi) (Python) - [crossref-rs](https://github.com/MattsSe/crossref-rs) (rust)  If you know of another library you would like to see listed here, please let us know about it via the [issue tracker](https://gitlab.com/crossref/issues).  ### Etiquette  We want to provide a public, open, and free API for all. And we don\\'t want to unnecessarily burden developers (or ourselves) with cumbersome API tokens or registration processes in order to use the public REST API. For that to work, we ask that you be polite and try not to do anything that will take the public REST API down or otherwise make it unusable for others. Specifically, we encourage the following polite behaviour:  - Cache data so you don\\'t request the same data over and over again. - Actively monitor API response times. If they start to go up, back-off for a while. For example, add pauses between requests and/or reduce the number of parallel requests. - Specify a `User-Agent` header that properly identifies your script or tool and that provides a means of contacting you via email using \\\"mailto:\\\". For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`. This way we can contact you if we see a problem. - report problems and/or ask questions on our [issue tracker](https://gitlab.com/crossref/issues).  Alas, not all people are polite. And for this reason we reserve the right to impose rate limits and/or to block clients that are disrupting the public service.  ### Good manners = more reliable service  But we prefer carrots to sticks. As of September 18th 2017 any API queries that **use HTTPS and have appropriate contact information** will be directed to a special pool of API machines that are reserved for polite users.  Why are are we doing this? Well- we don\\'t want to force users to have to register with us. But this means that if some user of the public server writes a buggy script or ignores timeouts and errors- they can really bring the API service to its knees. What\\'s more, it is very hard for us to identify these problem users because they tend to work off multiple parallel machines and use generic User-Agent headers. They are effectively anonymous. We\\'re starting to have to spend a lot of time dealing with these problems and the degraded performance of the public API is affecting all the polite users as well.  So... we are keeping the public service as is. It will probably continue to fluctuate widely in performance. But now, if a client connects to the API using HTTPS and provides contact information either in their User-Agent header or as a parameter on their queries, then we will send them to a separate pool of machines. We expect to be able to better control the performance of these machines because, if a script starts causing problems, we can contact the people responsible for the script to ask them to fix it. Or, in extremis, we can block it.  How does it work? Simple. You can do one of two things to get directed to the \\\"polite pool\\\":  1) Include a \\\"mailto\\\" parameter in your query. For example: `https://api.crossref.org/works?filter=has-full-text:true&mailto=GroovyBib@example.org` 2) Include a \\\"mailto:\\\" in your User-Agent header. For example: `GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4`.  Note that this only works if you query the API using HTTPS. You really should be doing that anyway (wags finger).  #### Frequently anticipated questions  **Q:** Will you spam me with marketing [bumf](https://en.oxforddictionaries.com/definition/bumf) once you have our contact info?  **A:** No. We will only use it to contact you about problems with your scripts.   **Q:** Is this a secret plot to kill public access to your API?  **A:** No. It is an attempt to keep the public API reliable.   **Q:** What if I provide fake or incorrect contact info?  **A:** That is not very polite. If there is a problem and you don\\'t respond, we\\'ll block you.   **Q:** Does the contact info have to be a real name?  **A:** No. As long as somebody actually receives and pays attention to email at the address, it can be pseudo-anonymous, or whatever.  #### Rate limits  From time to time Crossref needs to impose rate limits to ensure that the free API is usable by all. Any rate limits that are in effect will be advertised in the `X-Rate-Limit-Limit` and `X-Rate-Limit-Interval` HTTP headers.  For ease-of-parsing, the `X-Rate-Limit-Interval` will always be expressed in seconds. So, for example the following tells you that you should expect to be able to perform 50 requests a second:  ``` X-Rate-Limit-Limit: 50 X-Rate-Limit-Interval: 1s ```  Note that if we wanted to adjust the measurement window, we could specify:  ``` X-Rate-Limit-Limit: 3000 X-Rate-Limit-Interval: 60s ```  #### Blocking  This is always our last resort, and you can generally avoid it if you include contact information in the `User-Agent` header or `mailto` parameter as described above.  But seriously... this is a bummer. We really want you to use the API. If you are polite about it, you shouldn\\'t have any problems.  ### Use for production services  What if you want to use our API for a production service that cannot depend on the performance uncertainties of the free and open public API? What if you don\\'t want to be affected by impolite people who do not follow the API Etiquette guidelines? Well, if you’re interested in using these tools or APIs for production services, we [have a service-level offering](https://www.crossref.org/services/metadata-retrieval/metadata-plus/) called \\\"Plus\\\". This service provides you with access to all supported APIs and metadata, but with extra service and support guarantees.  #### Authorization token for Plus service  When you sign up for the Plus service, you will be issued an API token that you should put in the `Authorization` header of all your rest API requests. This token will ensure that said requests get directed to a pool of machines that are reserved for \\\"Plus\\\" SLA users. For example, with [curl](https://curl.haxx.se/):  ``` curl -X GET \\\\   https://api.crossref.org/works \\\\   -H \\'Crossref-Plus-API-Token: Bearer yJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vY3Jvc3NyZWYub3JnLyIsImF1ZXYZImVuaGFuY2VkY21zIiwianRpIjoiN0M5ODlFNTItMTFEQS00QkY3LUJCRUUtODFCMUM3QzE0OTZEIn0.NYe3-O066sce9R1fjMzNEvP88VqSEaYdBY622FDiG8Uq\\' \\\\   -H \\'User-Agent: GroovyBib/1.1 (https://example.org/GroovyBib/; mailto:GroovyBib@example.org) BasedOnFunkyLib/1.4\\' ```  Note that you can still be \\\"polite\\\" and identify yourself as well. And, of course, replace the fake token above with the real token.  ## API overview  The API is generally RESTFUL and returns results in JSON.  The API supports HTTP and HTTPS. Examples here are provided using HTTPS.  You should always url-encode DOIs and parameter values when using the API. DOIs are notorious for including characters that break URLs (e.g. semicolons, hashes, slashes, ampersands, question marks, etc.).  Note url-encoding applies to cursors as well since they too are likely to include characters that will break URLs (e.g. `+` symbol)  Note that, for the sake of clarity, the examples in this document do *not* url-encode DOIs or parameter values.  The API will only work for Crossref DOIs. You can test the registration agency for a DOI using the following route:  `https://api.crossref.org/works/{doi}/agency`  Testing the following Crossref DOI:  `10.1037/0003-066X.59.1.29`  Using the URL:  `https://api.crossref.org/works/10.1037/0003-066X.59.1.29/agency`  Will return the following result:      {       status: \\\"ok\\\",       message-type: \\\"work-agency\\\",       message-version: \\\"1.0.0\\\",       message: {         DOI: \\\"10.1037/0003-066x.59.1.29\\\",         agency: {           id: \\\"crossref\\\",           label: \\\"Crossref\\\"         }       }     }  If you use any of the API calls listed below with a non-Crossref DOI, you will get a `404` HTTP status response. Typical agency IDs include `crossref`, `datacite`, `medra` and also `public` for test DOIs.  ## Result types  All results are returned in JSON. There are three general types of results:  - Singletons - Headers-only - Lists  The mime-type for API results is `application/vnd.crossref-api-message+json`  ### Singletons  Singletons are single results. Retrieving metadata for a specific identifier (e.g. DOI, ISSN, funder identifier) typically returns a singleton result.  ### Headers only  You can use HTTP HEAD requests to quickly determine \\\"existence\\\" of a singleton. The advantage of this technique is that it is very fast because it does not return any metadata- it only returns headers and an HTTP status code (200=exists, 404=does not exist).  To determine if member ID `98` exists:  `curl --head \\\"http://api.crossref.org/members/98\\\"`  To determine if a journal with ISSN `1549-7712` exists:  `curl --head \\\"http://api.crossref.org/journals/1549-7712\\\"`  ### Lists  Lists results can contain multiple entries. Searching or filtering typically returns a list result. A list has two parts:  - Summary, which include the following information:      - status (e.g. \\\"ok\\\", error)     - message-type (e.g. \\\"work-list\\\" )     - message-version (e.g. 1.0.0 )  - Items, which will contain the items matching the query or filter.  Note that the \\\"message-type\\\" returned will differ from the mime-type:  - funder (singleton) - prefix (singleton) - member (singleton) - work (singleton) - work-list (list) - funder-list (list) - prefix-list (list) - member-list (list)  Normally, an API list result will return both the summary and the items. If you want to just retrieve the summary, you can do so by specifying that the number of rows returned should be zero.  #### Sort order  If the API call includes a query, then the sort order will be by the relevance score. If no query is included, then the sort order will be by DOI update date.  The API allows also for custom sorting. See the documentation for each endpoint to find the list of elements that you can sort by.  #### Pagination  Large result sets can be traversed one of two ways: offsets or deep paging with cursor. Offsets are available on all `list` endpoints. Offsets are easier to use, but can be slow for larger sets, and the total number of results available through offsets is limited. Deep paging is available on selected endpoints, has better performance for large data sets, and there is no limit on total number of available results.  See the documentation for each endpoint for available paging options. \n *\n * The version of the OpenAPI document: 0.1\n * Contact: support@crossref.org\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as runtime from '../runtime';\nimport {\n    AgencyMessage,\n    AgencyMessageFromJSON,\n    AgencyMessageToJSON,\n    WorkMessage,\n    WorkMessageFromJSON,\n    WorkMessageToJSON,\n    WorksMessage,\n    WorksMessageFromJSON,\n    WorksMessageToJSON,\n} from '../models';\n\nexport interface WorksDoiAgencyGetRequest {\n    doi: string;\n}\n\nexport interface WorksDoiGetRequest {\n    doi: string;\n}\n\nexport interface WorksGetRequest {\n    rows?: number;\n    order?: string;\n    facet?: string;\n    sample?: number;\n    sort?: string;\n    offset?: number;\n    mailto?: string;\n    select?: string;\n    query?: string;\n    filter?: string;\n    cursor?: string;\n}\n\n/**\n * \n */\nexport class WorksApi extends runtime.BaseAPI {\n\n    /**\n     * Gets the agency associated with a specific work by its DOI, as an example use DOI 10.5555/12345678\n     */\n    async worksDoiAgencyGetRaw(requestParameters: WorksDoiAgencyGetRequest): Promise<runtime.ApiResponse<AgencyMessage>> {\n        if (requestParameters.doi === null || requestParameters.doi === undefined) {\n            throw new runtime.RequiredError('doi','Required parameter requestParameters.doi was null or undefined when calling worksDoiAgencyGet.');\n        }\n\n        const queryParameters: any = {};\n\n        const headerParameters: runtime.HTTPHeaders = {};\n\n        const response = await this.request({\n            path: `/works/{doi}/agency`.replace(`{${\"doi\"}}`, encodeURIComponent(String(requestParameters.doi))),\n            method: 'GET',\n            headers: headerParameters,\n            query: queryParameters,\n        });\n\n        return new runtime.JSONApiResponse(response, (jsonValue) => AgencyMessageFromJSON(jsonValue));\n    }\n\n    /**\n     * Gets the agency associated with a specific work by its DOI, as an example use DOI 10.5555/12345678\n     */\n    async worksDoiAgencyGet(requestParameters: WorksDoiAgencyGetRequest): Promise<AgencyMessage> {\n        const response = await this.worksDoiAgencyGetRaw(requestParameters);\n        return await response.value();\n    }\n\n    /**\n     * Returns metadata for the specified Crossref DOI, as an example use DOI 10.5555/12345678\n     */\n    async worksDoiGetRaw(requestParameters: WorksDoiGetRequest): Promise<runtime.ApiResponse<WorkMessage>> {\n        if (requestParameters.doi === null || requestParameters.doi === undefined) {\n            throw new runtime.RequiredError('doi','Required parameter requestParameters.doi was null or undefined when calling worksDoiGet.');\n        }\n\n        const queryParameters: any = {};\n\n        const headerParameters: runtime.HTTPHeaders = {};\n\n        const response = await this.request({\n            path: `/works/{doi}`.replace(`{${\"doi\"}}`, encodeURIComponent(String(requestParameters.doi))),\n            method: 'GET',\n            headers: headerParameters,\n            query: queryParameters,\n        });\n\n        return new runtime.JSONApiResponse(response, (jsonValue) => WorkMessageFromJSON(jsonValue));\n    }\n\n    /**\n     * Returns metadata for the specified Crossref DOI, as an example use DOI 10.5555/12345678\n     */\n    async worksDoiGet(requestParameters: WorksDoiGetRequest): Promise<WorkMessage> {\n        const response = await this.worksDoiGetRaw(requestParameters);\n        return await response.value();\n    }\n\n    /**\n     * Returns a list of all works (journal articles, conference proceedings, books, components, etc), 20 per page. ## Queries  Free form search queries can be made, for example, works that include `renear` or `ontologies` (or both):  ##  ``` /works?query=renear+ontologies ```   ## Field Queries Field queries allow for queries that match only particular fields of metadata. For example, this query matches records that contain the tokens `richard` or `feynman` (or both) in any author field:  ##  ``` /works?query.author=richard+feynman ```  ##  Field queries can be combined with the general `query` parameter and each other. Each query parameter is ANDed with the others:  ## ``` /works?query.title=room+at+the+bottom&query.author=richard+feynman ```  ##  This endpoint supports the following field queries:  ##  + `query.affiliation` - query contributor affiliations + `query.author` - query author given and family names + `query.bibliographic` - query bibliographic information, useful for citation look up, includes titles, authors, ISSNs and publication years + `query.chair` - query chair given and family names + `query.container-title` - query container title aka. publication name + `query.contributor` - query author, editor, chair and translator given and family names + `query.degree` - query degree + `query.editor` - query editor given and family names + `query.event-acronym` - query acronym of the event + `query.event-location` - query location of the event + `query.event-name` - query name of the event + `query.event-sponsor` - query sponsor of the event + `query.event-theme` - query theme of the event + `query.funder-name` - query name of the funder + `query.publisher-location` - query location of the publisher + `query.publisher-name` - query publisher name + `query.standards-body-acronym` - query acronym of the standards body + `query.standards-body-name` - query standards body name + `query.title` - query title + `query.translator` - query translator given and family names ## Sort  Results can be sorted by applying the `sort` and `order` parameters. `sort` sets the field by which results will be sorted. `order` sets the result ordering, either `asc` or `desc` (default is `desc`).  An example that sorts results in order of publication, beginning with the least recent:  ##  ``` /works?query=josiah+carberry&sort=published&order=asc ```  ##  This endpoint supports sorting by the following elements:  ##  + `created` - sort by created date + `deposited` - sort by time of most recent deposit + `indexed` - sort by time of most recent index + `is-referenced-by-count` - sort by number of times this DOI is referenced by other Crossref DOIs + `issued` - sort by issued date (earliest known publication date) + `published` - sort by publication date + `published-online` - sort by online publication date + `published-print` - sort by print publication date + `references-count` - sort by number of references included in the references section of the document identified by this DOI + `relevance` - sort by relevance score + `score` - sort by relevance score + `updated` - sort by date of most recent change to metadata, currently the same as deposited ## Facets  Facet counts can be retrieved by enabling faceting. Facets are enabled by providing facet field names along with a maximum number of returned term values. The larger the number of returned values, the longer the query will take. Some facet fields can accept a `*` as their maximum, which indicates that all values should be returned.  ##  For example, to get facet counts for all work types:  ## ``` /works?facet=type-name:* ```  ##  This endpoint supports the following facets:  ##  + `affiliation` - author affiliation + `archive` - archive location + `assertion` - custom Crossmark assertion name + `assertion-group` - custom Crossmark assertion group name + `category-name` - category name of work + `container-title` - [max value 100], work container title, such as journal title, or book title + `funder-doi` - funder DOI + `funder-name` - funder literal name as deposited alongside DOI + `issn` - [max value 100], journal ISSN (any - print, electronic, link) + `journal-issue` - journal issue number + `journal-volume` - journal volume + `license` - license URI of work + `link-application` - intended application of the full text link + `orcid` - [max value 100], contributor ORCID + `published` - earliest year of publication + `publisher-name` - publisher name of work + `relation-type` - relation type described by work or described by another work with work as object + `source` - source of the DOI + `type-name` - work type name, such as journal-article or book-chapter + `update-type` - significant update type ## Filters  Filters allow you to select items based on specific criteria. All filter results are lists.  ##  For example:  ## ``` /works?filter=type:dataset ```  ### Multiple filters  Multiple filters can be specified in a single query. In such a case, different filters will be applied with AND semantics, while specifying the same filter multiple times will result in OR semantics - that is, specifying the filters:  - `is-update:true` - `from-pub-date:2014-03-03` - `funder:10.13039/100000001` - `funder:10.13039/100000050`  would locate documents that are updates, were published on or after 3rd March 2014 and were funded by either the National Science Foundation (`10.13039/100000001`) or the National Heart, Lung, and Blood Institute (`10.13039/100000050`). These filters would be specified by joining each filter together with a comma:  ## ``` /works?filter=is-update:true,from-pub-date:2014-03-03,funder:10.13039/100000001,funder:10.13039/100000050 ```  ### Dot filters  A filter with a dot in its name is special. The dot signifies that the filter will be applied to some other record type that is related to primary resource record type. For example, with work queries, one can filter on works that have an award, where the same award has a particular award number and award-giving funding agency:  ## ``` /works?filter=award.number:CBET-0756451,award.funder:10.13039/100000001 ``` ##  Here we filter on works that have an award by the National Science Foundation that also has the award number `CBET-0756451`.  ### Note on dates  The dates in filters should always be of the form YYYY-MM-DD, YYYY-MM or YYYY. The date filters are inclusive. For example:  * `from-pub-date:2018-09-18` filters works published on or after 18th September 2018 * `from-created-date:2016-02-29,until-created-date:2016-02-29` filters works first deposited on 29th February 2016 * `until-created-date:2010-06` filters works first deposited in or before June 2010 * `from-update-date:2017,until-update-date:2017` filters works with metadata updated in 2017  Also note that date information in Crossref metadata can often be incomplete. So, for example, a publisher may only include the year and month of publication for a journal article. For a monograph they might just include the year. In these cases the API selects the earliest possible date given the information provided. So, for instance, if the publisher only provided 2013-02 as the published date, then the date would be treated as 2013-02-01. Similarly, if the publisher only provided the year 2013 as the date, it would be treated at 2013-01-01.  ### Note on owner prefixes  The prefix of a Crossref DOI does **NOT** indicate who currently owns the DOI. It only reflects who originally registered the DOI. Crossref metadata has an **prefix** element that records the current owner of the Crossref DOI in question.  ##  Crossref also has member IDs for depositing organisations. A single member may control multiple owner prefixes, which in turn may control a number of DOIs. When looking at works published by a certain organisaton, member IDs and the member routes should be used.  ### Notes on incremental metadata updates  When using time filters to retrieve periodic, incremental metadata updates, the `from-index-date` filter should be used over `from-update-date`, `from-deposit-date`, `from-created-date` and `from-pub-date`. The timestamp that `from-index-date` filters on is guaranteed to be updated every time there is a change to metadata requiring a reindex.  ##  This endpoint supports the following filters:  ##  + `alternative-id` - metadata for records with the given alternative ID, which may be a publisher-specific ID, or any other identifier a publisher may have provided + `archive` - metadata where value of archive partner equals given archive name + `article-number` - metadata for records with a given article number + `assertion` - metadata for records with a given named assertion + `assertion-group` - metadata for records with an assertion in a given group + `award`   + `award.funder` - metadata for records with award funder equal to given funder, optionally combine with `award.number`   + `award.number` - metadata for records with award number equal to given number, optionally combine with `award.funder` + `category-name` - metadata for records with category label equal to given name, category labels come from the list published by Scopus + `clinical-trial-number` - metadata for records with given clinical trial number + `container-title` - metadata with a publication title that exactly equals given title + `content-domain` - metadata where the publisher records a given domain name as the location Crossmark content will appear + `doi` - metadata describing given DOI + `from-accepted-date` - [date], metadata where accepted date is since given date (inclusive) + `from-approved-date` - [date], metadata where approved date is since given date (inclusive) + `from-created-date` - [date], metadata first deposited since given date (inclusive) + `from-deposit-date` - [date], metadata last (re)deposited since given date (inclusive) + `from-event-end-date` - [date], metadata where event end date is since given date (inclusive) + `from-event-start-date` - [date], metadata where event start date is since given date  (inclusive) + `from-index-date` - [date], metadata indexed since given date (inclusive) + `from-issued-date` - [date], metadata where issued date is since given date  (inclusive) + `from-online-pub-date` - [date], metadata where online published date is since given date (inclusive) + `from-posted-date` - [date], metadata where posted date is since given date (inclusive) + `from-print-pub-date` - [date], metadata where print published date is since given date (inclusive) + `from-pub-date` - [date], metadata where published date is since given date (inclusive) + `from-update-date` - [date], metadata updated since given date (inclusive), currently the same as `from-deposit-date` + `full-text`   + `full-text.type` - metadata where `resource` element\\'s `content_type` attribute equals given version mime type (e.g. application/pdf)   + `full-text.application` - [text-mining, similarity-checking or unspecified], metadata where `resource` link has given application   + `full-text.version` - metadata where `resource` element\\'s `content_version` attribute equals given version + `funder` - metadata which include given funder id in FundRef data + `funder-doi-asserted-by` - metadata where funder DOI was asserted by given body + `group-title` - metadata with given group title + `has-abstract` - [0 or 1], metadata for records with/without an abstract + `has-affiliation` - [0 or 1], metadata for records with/without affiliation information + `has-archive` - [0 or 1], metadata which includes/does not include name of archive partner + `has-assertion` - [0 or 1], metadata for records with/without assertions + `has-authenticated-orcid` - [0 or 1], metadata which includes/does not include one or more ORCIDs where the depositing publisher claims to have witness the ORCID owner authenticate with ORCID + `has-award` - [0 or 1], metadata for records with/without award + `has-clinical-trial-number` - [0 or 1], metadata for records with/without a clinical trial number + `has-content-domain` - [0 or 1], metadata where the publisher records/does not record a domain name location for Crossmark content + `has-domain-restriction` - [0 or 1], metadata where the publisher restricts/does not restrict Crossmark usage to content domains + `has-event` - [0 or 1], metadata for records with/without event + `has-full-text` - [0 or 1], metadata that includes/does not include any full text `resource` elements + `has-funder` - [0 or 1], metadata which includes/does not include one or more funder entry + `has-funder-doi` - [0 or 1], metadata for records with/without funder DOI + `has-license` - [0 or 1], metadata that includes/does not include any `license_ref` elements + `has-orcid` - [0 or 1], metadata which includes/does not include one or more ORCIDs + `has-references` - [0 or 1], metadata for works that have/don\\'t have a list of references + `has-relation` - [0 or 1], metadata for records that either assert/do not assert or are/are not the object of a relation + `has-update` - [0 or 1], metadata for records with/without update information + `has-update-policy` - [0 or 1], metadata for records that include/do not include a link to an editorial update policy + `is-update` - [0 or 1], metadata for records that represent/do not represent editorial updates + `isbn` - metadata with given ISBN + `issn` - metadata with given ISSN, format is xxxx-xxxx + `license`   + `license.url` - metadata where `license_ref` value equals given url   + `license.version` - metadata where the `license_ref`\\'s `applies_to` attribute equals given version   + `license.delay` - metadata where difference between publication date and the `license_ref`\\'s `start_date` attribute is <= than given delay (in days) + `member` - metadata belonging to a given Crossref member + `orcid` - metadata where there is a contributor with given ORCID + `prefix` - metadata belonging to a given DOI owner prefix (e.g. 10.1016) + `reference-visibility` - [open, limited or closed], metadata for works where references are either open, limited (to [Metadata Plus subscribers](https://www.crossref.org/services/metadata-retrieval/metadata-plus/)) or closed + `relation`   + `relation.type` - metadata for records with a relation with the given type from the Crossref relations schema (e.g. is-referenced-by, is-parent-of, is-preprint-of)   + `relation.object-type` - metadata for records with a relation, where the object type matches given type from the Crossref relations schema (e.g. doi, issn)   + `relation.object` - metadata for records with a relation, where the object identifier matches given identifier + `type` - metadata records whose type equals given type, type must be an ID value from the list of types returned by the /types resource + `type-name` - metadata for records with type name equal to given name + `until-accepted-date` - [date], metadata where accepted date is before given date (inclusive) + `until-approved-date` - [date], metadata where approved date is before given date (inclusive) + `until-created-date` - [date], metadata first deposited before given date (inclusive) + `until-deposit-date` - [date], metadata last (re)deposited before given date (inclusive) + `until-event-end-date` - [date], metadata where event end date is before given date (inclusive) + `until-event-start-date` - [date], metadata where event start date is before given date  (inclusive) + `until-index-date` - [date], metadata indexed before given date (inclusive) + `until-issued-date` - [date], metadata where issued date is before given date  (inclusive) + `until-online-pub-date` - [date], metadata where online published date is before given date (inclusive) + `until-posted-date` - [date], metadata where posted date is before given date (inclusive) + `until-print-pub-date` - [date], metadata where print published date is before given date (inclusive) + `until-pub-date` - [date], metadata where published date is before given date (inclusive) + `until-update-date` - [date], metadata updated before given date (inclusive), currently the same as `until-deposit-date` + `update-type` - metadata with given update type + `updates` - metadata for records that represent editorial updates to given DOI ## Elements  Crossref metadata records can be quite large. Sometimes you just want a few elements from the schema. You can \\\\\\\"select\\\\\\\" a subset of elements to return using the `select` parameter. This can make your API calls much more efficient. For example:  ## ``` /works?select=DOI,prefix,title ```  ##  This endpoint supports selecting the following elements.  ##  + `DOI` + `ISBN` + `ISSN` + `URL` + `abstract` + `accepted` + `alternative-id` + `approved` + `archive` + `article-number` + `assertion` + `author` + `chair` + `clinical-trial-number` + `container-title` + `content-created` + `content-domain` + `created` + `degree` + `deposited` + `editor` + `event` + `funder` + `group-title` + `indexed` + `is-referenced-by-count` + `issn-type` + `issue` + `issued` + `license` + `link` + `member` + `original-title` + `page` + `posted` + `prefix` + `published` + `published-online` + `published-print` + `publisher` + `publisher-location` + `reference` + `references-count` + `relation` + `score` + `short-container-title` + `short-title` + `standards-body` + `subject` + `subtitle` + `title` + `translator` + `type` + `update-policy` + `update-to` + `updated-by` + `volume` ## Pagination with offsets  Offsets are an easy way to iterate over results sets up to 10,000 items. This limit applies to the sum of values of parameters `offset` + `rows`.  ##  The number of items returned in a single response is controlled by `rows` parameter (default is 20, and maximum is 1,000). To limit results to 5, for example, you could do the following:  ##  ``` /works?query=allen+renear&rows=5 ```  ##  `offset` parameter can be used to retrieve items starting from a specific index of the result list. For example, to select the second set of 5 results (i.e. results 6 through 10), you would do the following:  ##  ``` /works?query=allen+renear&rows=5&offset=5 ```  ##  ## Deep paging  Deep paging using cursors can be used to iterate over large result sets, without any limits on their size.  ##  To use deep paging make a query as normal, but include the `cursor` parameter with a value of `*`, for example:  ##  ``` /members/311/works?filter=type:journal-article&cursor=* ```  ##  A `next-cursor` field will be provided in the JSON response. To get the next page of results, pass the value of `next-cursor` as the cursor parameter (remember to URL-encode). For example:  ##  ``` /members/311/works?filter=type:journal-article&cursor=<value of next-cursor parameter> ```  ##  Clients should check the number of returned items. If the number of returned items is equal to the number of expected rows then the end of the result set has been reached. Using next-cursor beyond this point will result in responses with an empty items list.  ##  ## Sample  Being able to select random results is useful for both testing and sampling. You can use the `sample` parameter to retrieve random results. So, for example, the following selects 10 random works:  ## ``` /works?sample=10 ``` ##  Note that when you use the `sample` parameter, the `rows` and `offset` parameters are ignored.   ## Parameter combinations  Any combination of `query`, `query.*`, `filter`, `facet`, `select` and `sort` can be used with offsets. Sampling cannot be combined with offsets.  ##  Any combination of `query`, `query.*`, `filter`, `facet`, `select` and `sort` may also be used with deep paging cursors. `rows` may also be specified.  ##  `offset` and `sample` cannot be used in combination with cursors.  ## \n     */\n    async worksGetRaw(requestParameters: WorksGetRequest): Promise<runtime.ApiResponse<WorksMessage>> {\n        const queryParameters: any = {};\n\n        if (requestParameters.rows !== undefined) {\n            queryParameters['rows'] = requestParameters.rows;\n        }\n\n        if (requestParameters.order !== undefined) {\n            queryParameters['order'] = requestParameters.order;\n        }\n\n        if (requestParameters.facet !== undefined) {\n            queryParameters['facet'] = requestParameters.facet;\n        }\n\n        if (requestParameters.sample !== undefined) {\n            queryParameters['sample'] = requestParameters.sample;\n        }\n\n        if (requestParameters.sort !== undefined) {\n            queryParameters['sort'] = requestParameters.sort;\n        }\n\n        if (requestParameters.offset !== undefined) {\n            queryParameters['offset'] = requestParameters.offset;\n        }\n\n        if (requestParameters.mailto !== undefined) {\n            queryParameters['mailto'] = requestParameters.mailto;\n        }\n\n        if (requestParameters.select !== undefined) {\n            queryParameters['select'] = requestParameters.select;\n        }\n\n        if (requestParameters.query !== undefined) {\n            queryParameters['query'] = requestParameters.query;\n        }\n\n        if (requestParameters.filter !== undefined) {\n            queryParameters['filter'] = requestParameters.filter;\n        }\n\n        if (requestParameters.cursor !== undefined) {\n            queryParameters['cursor'] = requestParameters.cursor;\n        }\n\n        const headerParameters: runtime.HTTPHeaders = {};\n\n        const response = await this.request({\n            path: `/works`,\n            method: 'GET',\n            headers: headerParameters,\n            query: queryParameters,\n        });\n\n        return new runtime.JSONApiResponse(response, (jsonValue) => WorksMessageFromJSON(jsonValue));\n    }\n\n    /**\n     * Returns a list of all works (journal articles, conference proceedings, books, components, etc), 20 per page. ## Queries  Free form search queries can be made, for example, works that include `renear` or `ontologies` (or both):  ##  ``` /works?query=renear+ontologies ```   ## Field Queries Field queries allow for queries that match only particular fields of metadata. For example, this query matches records that contain the tokens `richard` or `feynman` (or both) in any author field:  ##  ``` /works?query.author=richard+feynman ```  ##  Field queries can be combined with the general `query` parameter and each other. Each query parameter is ANDed with the others:  ## ``` /works?query.title=room+at+the+bottom&query.author=richard+feynman ```  ##  This endpoint supports the following field queries:  ##  + `query.affiliation` - query contributor affiliations + `query.author` - query author given and family names + `query.bibliographic` - query bibliographic information, useful for citation look up, includes titles, authors, ISSNs and publication years + `query.chair` - query chair given and family names + `query.container-title` - query container title aka. publication name + `query.contributor` - query author, editor, chair and translator given and family names + `query.degree` - query degree + `query.editor` - query editor given and family names + `query.event-acronym` - query acronym of the event + `query.event-location` - query location of the event + `query.event-name` - query name of the event + `query.event-sponsor` - query sponsor of the event + `query.event-theme` - query theme of the event + `query.funder-name` - query name of the funder + `query.publisher-location` - query location of the publisher + `query.publisher-name` - query publisher name + `query.standards-body-acronym` - query acronym of the standards body + `query.standards-body-name` - query standards body name + `query.title` - query title + `query.translator` - query translator given and family names ## Sort  Results can be sorted by applying the `sort` and `order` parameters. `sort` sets the field by which results will be sorted. `order` sets the result ordering, either `asc` or `desc` (default is `desc`).  An example that sorts results in order of publication, beginning with the least recent:  ##  ``` /works?query=josiah+carberry&sort=published&order=asc ```  ##  This endpoint supports sorting by the following elements:  ##  + `created` - sort by created date + `deposited` - sort by time of most recent deposit + `indexed` - sort by time of most recent index + `is-referenced-by-count` - sort by number of times this DOI is referenced by other Crossref DOIs + `issued` - sort by issued date (earliest known publication date) + `published` - sort by publication date + `published-online` - sort by online publication date + `published-print` - sort by print publication date + `references-count` - sort by number of references included in the references section of the document identified by this DOI + `relevance` - sort by relevance score + `score` - sort by relevance score + `updated` - sort by date of most recent change to metadata, currently the same as deposited ## Facets  Facet counts can be retrieved by enabling faceting. Facets are enabled by providing facet field names along with a maximum number of returned term values. The larger the number of returned values, the longer the query will take. Some facet fields can accept a `*` as their maximum, which indicates that all values should be returned.  ##  For example, to get facet counts for all work types:  ## ``` /works?facet=type-name:* ```  ##  This endpoint supports the following facets:  ##  + `affiliation` - author affiliation + `archive` - archive location + `assertion` - custom Crossmark assertion name + `assertion-group` - custom Crossmark assertion group name + `category-name` - category name of work + `container-title` - [max value 100], work container title, such as journal title, or book title + `funder-doi` - funder DOI + `funder-name` - funder literal name as deposited alongside DOI + `issn` - [max value 100], journal ISSN (any - print, electronic, link) + `journal-issue` - journal issue number + `journal-volume` - journal volume + `license` - license URI of work + `link-application` - intended application of the full text link + `orcid` - [max value 100], contributor ORCID + `published` - earliest year of publication + `publisher-name` - publisher name of work + `relation-type` - relation type described by work or described by another work with work as object + `source` - source of the DOI + `type-name` - work type name, such as journal-article or book-chapter + `update-type` - significant update type ## Filters  Filters allow you to select items based on specific criteria. All filter results are lists.  ##  For example:  ## ``` /works?filter=type:dataset ```  ### Multiple filters  Multiple filters can be specified in a single query. In such a case, different filters will be applied with AND semantics, while specifying the same filter multiple times will result in OR semantics - that is, specifying the filters:  - `is-update:true` - `from-pub-date:2014-03-03` - `funder:10.13039/100000001` - `funder:10.13039/100000050`  would locate documents that are updates, were published on or after 3rd March 2014 and were funded by either the National Science Foundation (`10.13039/100000001`) or the National Heart, Lung, and Blood Institute (`10.13039/100000050`). These filters would be specified by joining each filter together with a comma:  ## ``` /works?filter=is-update:true,from-pub-date:2014-03-03,funder:10.13039/100000001,funder:10.13039/100000050 ```  ### Dot filters  A filter with a dot in its name is special. The dot signifies that the filter will be applied to some other record type that is related to primary resource record type. For example, with work queries, one can filter on works that have an award, where the same award has a particular award number and award-giving funding agency:  ## ``` /works?filter=award.number:CBET-0756451,award.funder:10.13039/100000001 ``` ##  Here we filter on works that have an award by the National Science Foundation that also has the award number `CBET-0756451`.  ### Note on dates  The dates in filters should always be of the form YYYY-MM-DD, YYYY-MM or YYYY. The date filters are inclusive. For example:  * `from-pub-date:2018-09-18` filters works published on or after 18th September 2018 * `from-created-date:2016-02-29,until-created-date:2016-02-29` filters works first deposited on 29th February 2016 * `until-created-date:2010-06` filters works first deposited in or before June 2010 * `from-update-date:2017,until-update-date:2017` filters works with metadata updated in 2017  Also note that date information in Crossref metadata can often be incomplete. So, for example, a publisher may only include the year and month of publication for a journal article. For a monograph they might just include the year. In these cases the API selects the earliest possible date given the information provided. So, for instance, if the publisher only provided 2013-02 as the published date, then the date would be treated as 2013-02-01. Similarly, if the publisher only provided the year 2013 as the date, it would be treated at 2013-01-01.  ### Note on owner prefixes  The prefix of a Crossref DOI does **NOT** indicate who currently owns the DOI. It only reflects who originally registered the DOI. Crossref metadata has an **prefix** element that records the current owner of the Crossref DOI in question.  ##  Crossref also has member IDs for depositing organisations. A single member may control multiple owner prefixes, which in turn may control a number of DOIs. When looking at works published by a certain organisaton, member IDs and the member routes should be used.  ### Notes on incremental metadata updates  When using time filters to retrieve periodic, incremental metadata updates, the `from-index-date` filter should be used over `from-update-date`, `from-deposit-date`, `from-created-date` and `from-pub-date`. The timestamp that `from-index-date` filters on is guaranteed to be updated every time there is a change to metadata requiring a reindex.  ##  This endpoint supports the following filters:  ##  + `alternative-id` - metadata for records with the given alternative ID, which may be a publisher-specific ID, or any other identifier a publisher may have provided + `archive` - metadata where value of archive partner equals given archive name + `article-number` - metadata for records with a given article number + `assertion` - metadata for records with a given named assertion + `assertion-group` - metadata for records with an assertion in a given group + `award`   + `award.funder` - metadata for records with award funder equal to given funder, optionally combine with `award.number`   + `award.number` - metadata for records with award number equal to given number, optionally combine with `award.funder` + `category-name` - metadata for records with category label equal to given name, category labels come from the list published by Scopus + `clinical-trial-number` - metadata for records with given clinical trial number + `container-title` - metadata with a publication title that exactly equals given title + `content-domain` - metadata where the publisher records a given domain name as the location Crossmark content will appear + `doi` - metadata describing given DOI + `from-accepted-date` - [date], metadata where accepted date is since given date (inclusive) + `from-approved-date` - [date], metadata where approved date is since given date (inclusive) + `from-created-date` - [date], metadata first deposited since given date (inclusive) + `from-deposit-date` - [date], metadata last (re)deposited since given date (inclusive) + `from-event-end-date` - [date], metadata where event end date is since given date (inclusive) + `from-event-start-date` - [date], metadata where event start date is since given date  (inclusive) + `from-index-date` - [date], metadata indexed since given date (inclusive) + `from-issued-date` - [date], metadata where issued date is since given date  (inclusive) + `from-online-pub-date` - [date], metadata where online published date is since given date (inclusive) + `from-posted-date` - [date], metadata where posted date is since given date (inclusive) + `from-print-pub-date` - [date], metadata where print published date is since given date (inclusive) + `from-pub-date` - [date], metadata where published date is since given date (inclusive) + `from-update-date` - [date], metadata updated since given date (inclusive), currently the same as `from-deposit-date` + `full-text`   + `full-text.type` - metadata where `resource` element\\'s `content_type` attribute equals given version mime type (e.g. application/pdf)   + `full-text.application` - [text-mining, similarity-checking or unspecified], metadata where `resource` link has given application   + `full-text.version` - metadata where `resource` element\\'s `content_version` attribute equals given version + `funder` - metadata which include given funder id in FundRef data + `funder-doi-asserted-by` - metadata where funder DOI was asserted by given body + `group-title` - metadata with given group title + `has-abstract` - [0 or 1], metadata for records with/without an abstract + `has-affiliation` - [0 or 1], metadata for records with/without affiliation information + `has-archive` - [0 or 1], metadata which includes/does not include name of archive partner + `has-assertion` - [0 or 1], metadata for records with/without assertions + `has-authenticated-orcid` - [0 or 1], metadata which includes/does not include one or more ORCIDs where the depositing publisher claims to have witness the ORCID owner authenticate with ORCID + `has-award` - [0 or 1], metadata for records with/without award + `has-clinical-trial-number` - [0 or 1], metadata for records with/without a clinical trial number + `has-content-domain` - [0 or 1], metadata where the publisher records/does not record a domain name location for Crossmark content + `has-domain-restriction` - [0 or 1], metadata where the publisher restricts/does not restrict Crossmark usage to content domains + `has-event` - [0 or 1], metadata for records with/without event + `has-full-text` - [0 or 1], metadata that includes/does not include any full text `resource` elements + `has-funder` - [0 or 1], metadata which includes/does not include one or more funder entry + `has-funder-doi` - [0 or 1], metadata for records with/without funder DOI + `has-license` - [0 or 1], metadata that includes/does not include any `license_ref` elements + `has-orcid` - [0 or 1], metadata which includes/does not include one or more ORCIDs + `has-references` - [0 or 1], metadata for works that have/don\\'t have a list of references + `has-relation` - [0 or 1], metadata for records that either assert/do not assert or are/are not the object of a relation + `has-update` - [0 or 1], metadata for records with/without update information + `has-update-policy` - [0 or 1], metadata for records that include/do not include a link to an editorial update policy + `is-update` - [0 or 1], metadata for records that represent/do not represent editorial updates + `isbn` - metadata with given ISBN + `issn` - metadata with given ISSN, format is xxxx-xxxx + `license`   + `license.url` - metadata where `license_ref` value equals given url   + `license.version` - metadata where the `license_ref`\\'s `applies_to` attribute equals given version   + `license.delay` - metadata where difference between publication date and the `license_ref`\\'s `start_date` attribute is <= than given delay (in days) + `member` - metadata belonging to a given Crossref member + `orcid` - metadata where there is a contributor with given ORCID + `prefix` - metadata belonging to a given DOI owner prefix (e.g. 10.1016) + `reference-visibility` - [open, limited or closed], metadata for works where references are either open, limited (to [Metadata Plus subscribers](https://www.crossref.org/services/metadata-retrieval/metadata-plus/)) or closed + `relation`   + `relation.type` - metadata for records with a relation with the given type from the Crossref relations schema (e.g. is-referenced-by, is-parent-of, is-preprint-of)   + `relation.object-type` - metadata for records with a relation, where the object type matches given type from the Crossref relations schema (e.g. doi, issn)   + `relation.object` - metadata for records with a relation, where the object identifier matches given identifier + `type` - metadata records whose type equals given type, type must be an ID value from the list of types returned by the /types resource + `type-name` - metadata for records with type name equal to given name + `until-accepted-date` - [date], metadata where accepted date is before given date (inclusive) + `until-approved-date` - [date], metadata where approved date is before given date (inclusive) + `until-created-date` - [date], metadata first deposited before given date (inclusive) + `until-deposit-date` - [date], metadata last (re)deposited before given date (inclusive) + `until-event-end-date` - [date], metadata where event end date is before given date (inclusive) + `until-event-start-date` - [date], metadata where event start date is before given date  (inclusive) + `until-index-date` - [date], metadata indexed before given date (inclusive) + `until-issued-date` - [date], metadata where issued date is before given date  (inclusive) + `until-online-pub-date` - [date], metadata where online published date is before given date (inclusive) + `until-posted-date` - [date], metadata where posted date is before given date (inclusive) + `until-print-pub-date` - [date], metadata where print published date is before given date (inclusive) + `until-pub-date` - [date], metadata where published date is before given date (inclusive) + `until-update-date` - [date], metadata updated before given date (inclusive), currently the same as `until-deposit-date` + `update-type` - metadata with given update type + `updates` - metadata for records that represent editorial updates to given DOI ## Elements  Crossref metadata records can be quite large. Sometimes you just want a few elements from the schema. You can \\\\\\\"select\\\\\\\" a subset of elements to return using the `select` parameter. This can make your API calls much more efficient. For example:  ## ``` /works?select=DOI,prefix,title ```  ##  This endpoint supports selecting the following elements.  ##  + `DOI` + `ISBN` + `ISSN` + `URL` + `abstract` + `accepted` + `alternative-id` + `approved` + `archive` + `article-number` + `assertion` + `author` + `chair` + `clinical-trial-number` + `container-title` + `content-created` + `content-domain` + `created` + `degree` + `deposited` + `editor` + `event` + `funder` + `group-title` + `indexed` + `is-referenced-by-count` + `issn-type` + `issue` + `issued` + `license` + `link` + `member` + `original-title` + `page` + `posted` + `prefix` + `published` + `published-online` + `published-print` + `publisher` + `publisher-location` + `reference` + `references-count` + `relation` + `score` + `short-container-title` + `short-title` + `standards-body` + `subject` + `subtitle` + `title` + `translator` + `type` + `update-policy` + `update-to` + `updated-by` + `volume` ## Pagination with offsets  Offsets are an easy way to iterate over results sets up to 10,000 items. This limit applies to the sum of values of parameters `offset` + `rows`.  ##  The number of items returned in a single response is controlled by `rows` parameter (default is 20, and maximum is 1,000). To limit results to 5, for example, you could do the following:  ##  ``` /works?query=allen+renear&rows=5 ```  ##  `offset` parameter can be used to retrieve items starting from a specific index of the result list. For example, to select the second set of 5 results (i.e. results 6 through 10), you would do the following:  ##  ``` /works?query=allen+renear&rows=5&offset=5 ```  ##  ## Deep paging  Deep paging using cursors can be used to iterate over large result sets, without any limits on their size.  ##  To use deep paging make a query as normal, but include the `cursor` parameter with a value of `*`, for example:  ##  ``` /members/311/works?filter=type:journal-article&cursor=* ```  ##  A `next-cursor` field will be provided in the JSON response. To get the next page of results, pass the value of `next-cursor` as the cursor parameter (remember to URL-encode). For example:  ##  ``` /members/311/works?filter=type:journal-article&cursor=<value of next-cursor parameter> ```  ##  Clients should check the number of returned items. If the number of returned items is equal to the number of expected rows then the end of the result set has been reached. Using next-cursor beyond this point will result in responses with an empty items list.  ##  ## Sample  Being able to select random results is useful for both testing and sampling. You can use the `sample` parameter to retrieve random results. So, for example, the following selects 10 random works:  ## ``` /works?sample=10 ``` ##  Note that when you use the `sample` parameter, the `rows` and `offset` parameters are ignored.   ## Parameter combinations  Any combination of `query`, `query.*`, `filter`, `facet`, `select` and `sort` can be used with offsets. Sampling cannot be combined with offsets.  ##  Any combination of `query`, `query.*`, `filter`, `facet`, `select` and `sort` may also be used with deep paging cursors. `rows` may also be specified.  ##  `offset` and `sample` cannot be used in combination with cursors.  ## \n     */\n    async worksGet(requestParameters: WorksGetRequest): Promise<WorksMessage> {\n        const response = await this.worksGetRaw(requestParameters);\n        return await response.value();\n    }\n\n}\n","import { Work, WorkFromJSON} from '@/clients/crossref';\nimport prefillData from '../assets/data/works-cache.json';\n\ntype CacheResult = Work;\n\nexport class WorksCache {\n    private static instance: WorksCache;\n    private cache: { doi: string, result: Work }[] = [];\n\n    constructor() {\n        if (WorksCache.instance != null) {\n            return WorksCache.instance;\n        }\n\n        this.prefill();\n        WorksCache.instance = this;\n\n        return this;\n    }\n\n    private prefill() {\n        const prefillWorks = ((prefillData as Array<any>).map(WorkFromJSON));\n        prefillWorks.forEach( currentWork => this.set(currentWork.dOI, currentWork));\n    }\n\n    public set = (doi: string, result: CacheResult): void => {\n        if (!this.recordExists(doi)) {\n            this.cache.push({\n                doi,\n                result\n            });\n        }\n    }\n\n    public get = (doi: string): CacheResult | null => {\n        const cacheRecord = this.cache.find(x => {\n            return x.doi.toLowerCase() == doi.toLowerCase();\n        });\n\n        if (cacheRecord) {\n            return cacheRecord.result;\n        }\n\n        return null;\n    }\n\n    public recordExists = (doi: string): boolean => {\n        return this.get(doi) != null;\n    }\n}","import { WorksCache } from './WorksCache';\nimport { WorksApi, WorksDoiGetRequest,WorkMessage } from '@/clients/crossref';\n\nexport class CachedWorksApi extends WorksApi {\n    private apiCache = new WorksCache();\n\n    async worksDoiGet(requestParameters: WorksDoiGetRequest): Promise<WorkMessage> {\n        return this.worksDoiGetInteral(requestParameters, false);\n    }\n\n    async worksDoiGetInteral(requestParameters: WorksDoiGetRequest, requestOnCacheMiss : boolean): Promise<WorkMessage> {\n        if (this.apiCache.recordExists(requestParameters.doi)) {\n            //console.debug(\"Cache hit\")\n            return new Promise(resolve => \n                resolve({\n                    \"status\" : \"\",\n                    \"messageType\" : \"\",\n                    \"messageVersion\" : \"\",\n                    \"message\" : this.apiCache.get(requestParameters.doi)!\n                }\n                )\n            );\n        } else {\n            if(requestOnCacheMiss) {\n                console.debug(\"Cache miss\")\n                const response = await super.worksDoiGet(requestParameters);\n                this.apiCache.set(requestParameters.doi, response.message);\n                return response;\n            } else {\n                throw new Error('Cache miss');   \n            }\n        \n        }\n\n    }\n}","/* tslint:disable */\n/* eslint-disable */\n/**\n * ArXiV API\n */\n\nimport { parseString } from 'xml2js';\n\nexport const BASE_PATH = \"https://export.arxiv.org/api\".replace(/\\/+$/, \"\");\n\nconst isBlob = (value: any) => typeof Blob !== 'undefined' && value instanceof Blob;\n\n/**\n * This is the base class for all generated API classes.\n */\nexport class BaseAPI {\n\n    private middleware: Middleware[];\n\n    constructor(protected configuration = new Configuration()) {\n        this.middleware = configuration.middleware;\n    }\n\n    withMiddleware<T extends BaseAPI>(this: T, ...middlewares: Middleware[]) {\n        const next = this.clone<T>();\n        next.middleware = next.middleware.concat(...middlewares);\n        return next;\n    }\n\n    withPreMiddleware<T extends BaseAPI>(this: T, ...preMiddlewares: Array<Middleware['pre']>) {\n        const middlewares = preMiddlewares.map((pre) => ({ pre }));\n        return this.withMiddleware<T>(...middlewares);\n    }\n\n    withPostMiddleware<T extends BaseAPI>(this: T, ...postMiddlewares: Array<Middleware['post']>) {\n        const middlewares = postMiddlewares.map((post) => ({ post }));\n        return this.withMiddleware<T>(...middlewares);\n    }\n\n    protected async request(context: RequestOpts): Promise<Response> {\n        const { url, init } = this.createFetchParams(context);\n        const response = await this.fetchApi(url, init);\n        if (response.status >= 200 && response.status < 300) {\n            return response;\n        }\n        throw response;\n    }\n\n    private createFetchParams(context: RequestOpts) {\n        let url = this.configuration.basePath + context.path;\n        if (context.query !== undefined && Object.keys(context.query).length !== 0) {\n            // only add the querystring to the URL if there are query parameters.\n            // this is done to avoid urls ending with a \"?\" character which buggy webservers\n            // do not handle correctly sometimes.\n            url += '?' + this.configuration.queryParamsStringify(context.query);\n        }\n        const body = ((typeof FormData !== \"undefined\" && context.body instanceof FormData) || context.body instanceof URLSearchParams || isBlob(context.body))\n        ? context.body\n        : JSON.stringify(context.body);\n\n        const headers = Object.assign({}, this.configuration.headers, context.headers);\n        const init = {\n            method: context.method,\n            headers: headers,\n            body,\n            credentials: this.configuration.credentials\n        };\n        return { url, init };\n    }\n\n    private fetchApi = async (url: string, init: RequestInit) => {\n        let fetchParams = { url, init };\n        for (const middleware of this.middleware) {\n            if (middleware.pre) {\n                fetchParams = await middleware.pre({\n                    fetch: this.fetchApi,\n                    ...fetchParams,\n                }) || fetchParams;\n            }\n        }\n        let response = await this.configuration.fetchApi(fetchParams.url, fetchParams.init);\n        for (const middleware of this.middleware) {\n            if (middleware.post) {\n                response = await middleware.post({\n                    fetch: this.fetchApi,\n                    url,\n                    init,\n                    response: response.clone(),\n                }) || response;\n            }\n        }\n        return response;\n    }\n\n    /**\n     * Create a shallow clone of `this` by constructing a new instance\n     * and then shallow cloning data members.\n     */\n    private clone<T extends BaseAPI>(this: T): T {\n        const constructor = this.constructor as any;\n        const next = new constructor(this.configuration);\n        next.middleware = this.middleware.slice();\n        return next;\n    }\n};\n\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\nexport type FetchAPI = WindowOrWorkerGlobalScope['fetch'];\n\nexport interface ConfigurationParameters {\n    basePath?: string; // override base path\n    fetchApi?: FetchAPI; // override for fetch implementation\n    middleware?: Middleware[]; // middleware to apply before/after fetch requests\n    queryParamsStringify?: (params: HTTPQuery) => string; // stringify function for query strings\n    username?: string; // parameter for basic security\n    password?: string; // parameter for basic security\n    apiKey?: string | ((name: string) => string); // parameter for apiKey security\n    accessToken?: string | ((name?: string, scopes?: string[]) => string); // parameter for oauth2 security\n    headers?: HTTPHeaders; //header params we want to use on every request\n    credentials?: RequestCredentials; //value for the credentials param we want to use on each request\n}\n\nexport class Configuration {\n    constructor(private configuration: ConfigurationParameters = {}) {}\n\n    get basePath(): string {\n        return this.configuration.basePath != null ? this.configuration.basePath : BASE_PATH;\n    }\n\n    get fetchApi(): FetchAPI {\n        return this.configuration.fetchApi || window.fetch.bind(window);\n    }\n\n    get middleware(): Middleware[] {\n        return this.configuration.middleware || [];\n    }\n\n    get queryParamsStringify(): (params: HTTPQuery) => string {\n        return this.configuration.queryParamsStringify || querystring;\n    }\n\n    get username(): string | undefined {\n        return this.configuration.username;\n    }\n\n    get password(): string | undefined {\n        return this.configuration.password;\n    }\n\n    get apiKey(): ((name: string) => string) | undefined {\n        const apiKey = this.configuration.apiKey;\n        if (apiKey) {\n            return typeof apiKey === 'function' ? apiKey : () => apiKey;\n        }\n        return undefined;\n    }\n\n    get accessToken(): ((name: string, scopes?: string[]) => string) | undefined {\n        const accessToken = this.configuration.accessToken;\n        if (accessToken) {\n            return typeof accessToken === 'function' ? accessToken : () => accessToken;\n        }\n        return undefined;\n    }\n\n    get headers(): HTTPHeaders | undefined {\n        return this.configuration.headers;\n    }\n\n    get credentials(): RequestCredentials | undefined {\n        return this.configuration.credentials;\n    }\n}\n\nexport type Json = any;\nexport type HTTPMethod = 'GET' | 'POST' | 'PUT' | 'PATCH' | 'DELETE' | 'OPTIONS' | 'HEAD';\nexport type HTTPHeaders = { [key: string]: string };\nexport type HTTPQuery = { [key: string]: string | number | null | boolean | Array<string | number | null | boolean> | HTTPQuery };\nexport type HTTPBody = Json | FormData | URLSearchParams;\nexport type ModelPropertyNaming = 'camelCase' | 'snake_case' | 'PascalCase' | 'original';\n\nexport interface FetchParams {\n    url: string;\n    init: RequestInit;\n}\n\nexport interface RequestOpts {\n    path: string;\n    method: HTTPMethod;\n    headers: HTTPHeaders;\n    query?: HTTPQuery;\n    body?: HTTPBody;\n}\n\nexport function exists(json: any, key: string) {\n    const value = json[key];\n    return value !== null && value !== undefined;\n}\n\nexport function querystring(params: HTTPQuery, prefix: string = ''): string {\n    return Object.keys(params)\n        .map((key) => {\n            const fullKey = prefix + (prefix.length ? `[${key}]` : key);\n            const value = params[key];\n            if (value instanceof Array) {\n                const multiValue = value.map(singleValue => encodeURIComponent(String(singleValue)))\n                    .join(`&${encodeURIComponent(fullKey)}=`);\n                return `${encodeURIComponent(fullKey)}=${multiValue}`;\n            }\n            if (value instanceof Date) {\n                return `${encodeURIComponent(fullKey)}=${encodeURIComponent(value.toISOString())}`;\n            }\n            if (value instanceof Object) {\n                return querystring(value as HTTPQuery, fullKey);\n            }\n            return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;\n        })\n        .filter(part => part.length > 0)\n        .join('&');\n}\n\nexport function mapValues(data: any, fn: (item: any) => any) {\n  return Object.keys(data).reduce(\n    (acc, key) => ({ ...acc, [key]: fn(data[key]) }),\n    {}\n  );\n}\n\nexport function canConsumeForm(consumes: Consume[]): boolean {\n    for (const consume of consumes) {\n        if ('multipart/form-data' === consume.contentType) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport interface Consume {\n    contentType: string\n}\n\nexport interface RequestContext {\n    fetch: FetchAPI;\n    url: string;\n    init: RequestInit;\n}\n\nexport interface ResponseContext {\n    fetch: FetchAPI;\n    url: string;\n    init: RequestInit;\n    response: Response;\n}\n\nexport interface Middleware {\n    pre?(context: RequestContext): Promise<FetchParams | void>;\n    post?(context: ResponseContext): Promise<Response | void>;\n}\n\nexport interface ApiResponse<T> {\n    raw: Response;\n    value(): Promise<T>;\n}\n\nexport interface ResponseTransformer<T> {\n    (json: any): T;\n}\n\nexport class JSONApiResponse<T> {\n    constructor(public raw: Response, private transformer: ResponseTransformer<T> = (jsonValue: any) => jsonValue) {}\n\n    async value(): Promise<T> {\n        return this.transformer(await this.raw.json());\n    }\n}\n\nexport class XMLApiResponse<T> {\n    constructor(public raw: Response, private transformer: ResponseTransformer<T> = (xmlValue: any) => xmlValue) {}\n\n    async value(): Promise<T> {\n        const text = await this.raw.text();      \n        let parsedText : any = null;\n        parseString(text, { explicitArray: false }, function(error, result) {\n            parsedText = result;\n        });\n        return this.transformer(await parsedText);\n    }\n\n}\n\nexport class VoidApiResponse {\n    constructor(public raw: Response) {}\n\n    async value(): Promise<void> {\n        return undefined;\n    }\n}\n\nexport class BlobApiResponse {\n    constructor(public raw: Response) {}\n\n    async value(): Promise<Blob> {\n        return await this.raw.blob();\n    };\n}\n\nexport class TextApiResponse {\n    constructor(public raw: Response) {}\n\n    async value(): Promise<string> {\n        return await this.raw.text();\n    };\n}\n","\nexport interface Author {\n    name: string;\n}\n\nexport function AuthorFromXml(xml: any): Author {\n    return AuthorFromXmlTyped(xml, false);\n}\n\nexport function AuthorFromXmlTyped(xml: any, ignoreDiscriminator: boolean): Author {\n    if ((xml === undefined) || (xml === null)) {\n        return xml;\n    }\n    return {\n        name: xml.name\n    };\n}\n\nexport function AuthorFromJSON(json: any): Author {\n    return AuthorFromJSONTyped(json, false);\n}\n\nexport function AuthorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Author {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        name: json['name']\n    }\n}\n\nexport function AuthorToJSON(value?: Author | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        name: value.name\n    }\n}","export interface Category {\n    term: string;\n    scheme: string;\n}\n\nexport function CategoryFromXml(xml: any): Category {\n    return CategoryFromXmlTyped(xml, false);\n}\n\nexport function CategoryFromXmlTyped(xml: any, ignoreDiscriminator: boolean) {\n    if ((xml === undefined) || (xml === null)) {\n        return xml;\n    }\n    return {\n        term: xml.$.term,\n        scheme: xml.$.scheme\n    };\n}\n\nexport function CategoryFromJSON(json: any): Category {\n    return CategoryFromJSONTyped(json, false);\n}\n\nexport function CategoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): Category {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        term: json['term'],\n        scheme: json['scheme']\n    }\n}\n\nexport function CategoryToJSON(value?: Category | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        term: value.term,\n        scheme: value.scheme\n    }\n}","\nexport interface Comment {\n    text: string;\n}\n\nexport function CommentFromXml(xml: any): Comment {\n    return CommentFromXmlTyped(xml, false);\n}\n\nexport function CommentFromXmlTyped(xml: any, ignoreDiscriminator: boolean): Comment {\n    if ((xml === undefined) || (xml === null)) {\n        return xml;\n    }\n    return {\n        text: xml._\n    };\n}\n\nexport function CommentFromJSON(json: any): Comment {\n    return CommentFromJSONTyped(json, false);\n}\n\nexport function CommentFromJSONTyped(json: any, ignoreDiscriminator: boolean): Comment {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        text: json['text']\n    }\n}\n\nexport function CommentToJSON(value?: Comment | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        text: value.text\n    }\n}","import { exists } from '../runtime';\n\n\nexport interface Link {\n    href: string;\n    rel: string;\n    type: string;\n    title?: string;\n}\n\nexport function LinkFromXml(xml: any): Link {\n    return LinkFromXmlTyped(xml, false);\n}\n\nexport function LinkFromXmlTyped(xml: any, ignoreDiscriminator: boolean): Link {\n    if ((xml === undefined) || (xml === null)) {\n        return xml;\n    }\n    return {\n        href: xml.$.href,\n        rel: xml.$.rel,\n        type: xml.$.type,\n        title: !exists(xml.$, 'title') ? undefined : xml.$.title\n    };\n}\n\nexport function LinkFromJSON(json: any): Link {\n    return LinkFromJSONTyped(json, false);\n}\n\nexport function LinkFromJSONTyped(json: any, ignoreDiscriminator: boolean): Link {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        href: json['href'],\n        rel: json['rel'],\n        type: json['type'],\n        title: !exists(json, 'title') ? undefined : json['title']\n    }\n}\n\nexport function LinkToJSON(value?: Link | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        href: value.href,\n        rel: value.rel,\n        type: value.type,\n        title: value.title === undefined ? undefined : value.title\n    }\n}\n","import { Author, AuthorFromXml, AuthorFromJSON, AuthorToJSON } from \"./Author\";\nimport { Category, CategoryFromXml, CategoryFromJSON, CategoryToJSON } from \"./Category\";\nimport { Comment, CommentFromXml, CommentFromJSON, CommentToJSON } from \"./Comment\";\nimport { Link, LinkFromXml, LinkFromJSON, LinkToJSON } from './Link';\n\nimport { exists } from '../runtime';\n\nexport interface Entry {\n    id: string;\n    updated: Date;\n    published: Date;\n    title: string;\n    summary: string;\n    author: Author[];\n    comment: Comment;\n    link: Link[];\n    primary_category: Category;\n    category: Category[];\n}\n\nexport function EntryFromXml(xml: any): Entry {\n    return EntryFromXmlTyped(xml, false);\n}\n\nexport function EntryFromXmlTyped(xml: any, ignoreDiscriminator: boolean) {\n    if ((xml === undefined) || (xml === null)) {\n        return xml;\n    }\n    \n    // Bugfix: Category, Link, and Author may either be an array or single category. Normalizing to arrays here.\n    if (xml.author != null && !Array.isArray(xml.author))\n        xml.author = new Array(xml.author);\n\n    if (xml.link != null && !Array.isArray(xml.link))\n        xml.link = new Array(xml.link);\n\n    if (xml.category != null && !Array.isArray(xml.category))\n        xml.category = new Array(xml.category);\n\n    \n    return {\n        id: xml.id,\n        updated: xml.updated,\n        published: xml.published,\n        title: xml.title,\n        summary: xml.summary,\n        author: (xml.author == null) ? new Array() : ((xml.author as Array<any>).map(AuthorFromXml)),\n        comment: CommentFromXml(xml['arxiv:comment']),\n        link: (xml.link == null) ? new Array() : ((xml.link as Array<any>).map(LinkFromXml)),\n        primary_category: CategoryFromXml(xml['arxiv:primary_category']),\n        category: (xml.category == null) ? new Array() : ((xml.category as Array<any>).map(CategoryFromXml))\n    };\n}\n\nexport function EntryFromJSON(json: any): Entry {\n    return EntryFromJSONTyped(json, false);\n}\n\nexport function EntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): Entry {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        id: json['id'],\n        updated: json['updated'],\n        published: json['published'],\n        title: json['title'],\n        summary: json['title'],\n        author: !exists(json, 'author') ? new Array() : ((json['author'] as Array<any>).map(AuthorFromJSON)),\n        comment: CommentFromJSON(json['comment']),\n        link: !exists(json, 'link') ? new Array() : ((json['link'] as Array<any>).map(LinkFromJSON)),\n        primary_category: CategoryFromJSON(json['primary_category']),\n        category: !exists(json, 'category') ? new Array() : ((json['category'] as Array<any>).map(CategoryFromJSON))\n    }\n}\n\nexport function EntryToJSON(value?: Entry | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        id: value.id,\n        updated: value.updated,\n        published: value.published,\n        title: value.title,\n        summary: value.summary,\n        author: value.author.map(AuthorToJSON),\n        comment: CommentToJSON(value.comment),\n        link: value.link.map(LinkToJSON),\n        primary_category: CategoryToJSON(value.primary_category),\n        category: value.category.map(CategoryToJSON)\n    }\n}","export interface ItemsPerPage {\n    namespace: string;\n    value: string;\n}\n\nexport function ItemsPerPageFromXml(xml: any): ItemsPerPage {\n    return ItemsPerPageFromXmlTyped(xml, false);\n}\n\nexport function ItemsPerPageFromXmlTyped(xml: any, ignoreDiscriminator: boolean): ItemsPerPage {\n    if ((xml === undefined) || (xml === null)) {\n        return xml;\n    }\n    return {\n        namespace: xml.$[\"xmlns:opensearch\"],\n        value: xml._\n    };\n}\n\nexport function ItemsPerPageFromJSON(json: any): ItemsPerPage {\n    return ItemsPerPageFromJSONTyped(json, false);\n}\n\nexport function ItemsPerPageFromJSONTyped(json: any, ignoreDiscriminator: boolean): ItemsPerPage {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        namespace: json['namespace'],\n        value: json['value']\n    }\n}\n\nexport function ItemsPerPageToJSON(value?: ItemsPerPage | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        namespace: value.namespace,\n        value: value.value\n    }\n}","export interface Title {\n    type: string;\n    text: string;\n}\n\nexport function TitleFromXml(xml: any): Title {\n    return TitleFromXmlTyped(xml, false);\n}\nexport function TitleFromXmlTyped(xml: any, ignoreDiscriminator: boolean): Title {\n    if ((xml === undefined) || (xml === null)) {\n        return xml;\n    }\n    return {\n        type: xml.$.type,\n        text: xml._\n    };\n}\n\nexport function TitleFromJSON(json: any): Title {\n    return TitleFromJSONTyped(json, false);\n}\n\nexport function TitleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Title {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        type: json['type'],\n        text: json['text']\n    }\n}\n\nexport function TitleToJSON(value?: Title | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        type: value.type,\n        text: value.text\n    }\n}","import { Entry, EntryFromXml, EntryFromJSON, EntryToJSON } from \"./Entry\";\nimport { ItemsPerPage, ItemsPerPageFromXml, ItemsPerPageFromJSON, ItemsPerPageToJSON } from \"./ItemsPerPage\";\nimport { Link, LinkFromXml, LinkFromJSON, LinkToJSON } from './Link';\nimport { Title, TitleFromXml, TitleFromJSON, TitleToJSON } from \"./Title\";\n\nexport interface Feed {\n    link:         Link;\n    title:        Title;\n    id:           string;\n    updated:      Date;\n    totalResults: ItemsPerPage;\n    startIndex:   ItemsPerPage;\n    itemsPerPage: ItemsPerPage;\n    entry:        Entry;\n    _xmlns:       string;\n}\n\nexport function FeedFromXml(xml: any): Feed {\n    return FeedFromXmlTyped(xml, false);\n}\n\nexport function FeedFromXmlTyped(xml: any, ignoreDiscriminator: boolean): Feed {\n    if ((xml === undefined) || (xml === null)) {\n        return xml;\n    }\n    return {\n        link:         LinkFromXml(xml.feed.link),\n        title:        TitleFromXml(xml.feed.title),\n        id:           xml.feed.id,\n        updated:      xml.feed.updated,\n        totalResults: ItemsPerPageFromXml(xml.feed[\"opensearch:totalResults\"]),\n        startIndex:   ItemsPerPageFromXml(xml.feed[\"opensearch:startIndex\"]),\n        itemsPerPage: ItemsPerPageFromXml(xml.feed[\"opensearch:itemsPerPage\"]),\n        entry:        EntryFromXml(xml.feed.entry),\n        _xmlns:       xml.feed.$.xmlns\n    };\n}\n\nexport function FeedFromJSON(json: any): Feed {\n    return FeedFromJSONTyped(json, false);\n}\n\nexport function FeedFromJSONTyped(json: any, ignoreDiscriminator: boolean): Feed {\n    if ((json === undefined) || (json === null)) {\n        return json;\n    }\n    return {\n        link: LinkFromJSON(json['link']),\n        title: TitleFromJSON(json['title']),\n        id: json['id'],\n        updated: json['updated'],\n        totalResults: ItemsPerPageFromJSON(json['totalResults']),\n        startIndex: ItemsPerPageFromJSON(json['startIndex']),\n        itemsPerPage: ItemsPerPageFromJSON(json['itemsPerPage']), \n        entry: EntryFromJSON(json['entry']),\n        _xmlns: json['_xmlns']\n    }\n}\n\n\nexport function FeedToJSON(value?: Feed | null): any {\n    if (value === undefined) {\n        return undefined;\n    }\n    if (value === null) {\n        return null;\n    }\n    return {\n        link: LinkToJSON(value.link),\n        title: TitleToJSON(value.title),\n        id: value.id,\n        updated: value.updated,\n        totalResults: ItemsPerPageFromJSON(value.totalResults),\n        startIndex: ItemsPerPageFromJSON(value.startIndex),\n        itemsPerPage: ItemsPerPageFromJSON(value.itemsPerPage), \n        entry: EntryToJSON(value.entry),\n        _xmlns: value._xmlns\n    }\n}\n\n","import * as runtime from '../runtime';\nimport { Feed, FeedFromXml } from '../models';\n\nexport class QueryApi extends runtime.BaseAPI {\n\n    async queryByIdRaw(requestParameters : QueryByIdRequest) : Promise<runtime.ApiResponse<Feed>> {\n        if (requestParameters.id === null || requestParameters.id === undefined) {\n            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling queryById.');\n        }\n\n        const queryParameters: any = {};\n\n        const headerParameters: runtime.HTTPHeaders = {};\n\n        const response = await this.request({\n            path: `/query?id_list={id}`.replace(`{${\"id\"}}`, encodeURIComponent(String(requestParameters.id))),\n            method: 'GET',\n            headers: headerParameters,\n            query: queryParameters,\n        });\n\n        return new runtime.XMLApiResponse(response, (jsonValue) => FeedFromXml(jsonValue));\n    }\n\n    async queryById(requestParameters : QueryByIdRequest) : Promise<Feed> {\n        const response = await this.queryByIdRaw(requestParameters);\n        return await response.value();\n    }\n}\n\n\n\nexport interface QueryByIdRequest {\n    id: string;\n}\n","import { Feed, FeedFromJSON } from \"@/clients/arxiv\";\nimport prefillData from '../assets/data/arxiv-cache.json';\n\ntype CacheResult = Feed;\n\nexport class ArxivFeedCache {\n    private static instance: ArxivFeedCache;\n    private cache: { id: string, result: CacheResult }[] = [];\n\n    constructor() {\n        if (ArxivFeedCache.instance != null) {\n            return ArxivFeedCache.instance;\n        }\n\n        //this.prefill();\n        ArxivFeedCache.instance = this;\n\n        return this;\n    }\n\n    \n    private prefill() {\n        const prefillWorks = ((prefillData as Array<any>).map(FeedFromJSON));\n        prefillWorks.forEach( currentFeed => this.set(currentFeed.entry.id, currentFeed));\n    }\n    \n   \n    public set = (id: string, result: CacheResult): void => {\n        if (!this.recordExists(id)) {\n            this.cache.push({\n                id,\n                result\n            });\n        }\n    }\n\n    public get = (id: string): CacheResult | null => {\n        const cacheRecord = this.cache.find(x => {\n            return x.id.startsWith(id);\n        });\n\n        if (cacheRecord) {\n            return cacheRecord.result;\n        }\n\n        return null;\n    }\n\n    public recordExists = (id: string): boolean => {\n        return this.get(id) != null;\n    }\n}","import { Feed, FeedFromXml, QueryApi, QueryByIdRequest } from \"@/clients/arxiv\";\nimport { ArxivFeedCache } from \"./ArxivFeedCache\";\n\nexport class CachedArxivApi extends QueryApi {\n    private apiCache = new ArxivFeedCache();\n\n    async queryById(requestParameters : QueryByIdRequest) : Promise<Feed> {\n        if (this.apiCache.recordExists(requestParameters.id)) {\n            //console.debug(\"Cache hit\")\n            return new Promise(resolve => \n                resolve(this.apiCache.get(requestParameters.id)!)\n            );\n        }\n        //console.debug(\"Cache miss\")\n        const response = await super.queryById(requestParameters)\n        this.apiCache.set(requestParameters.id, response);\n        return response;\n    }\n}","export default class CompoundSet<T> {\n    private set: Map<string, T>;\n\n    constructor(initial: T[] = []) {\n      this.set = new Map(initial.map(val => [this.toKey(val), val]));\n    }\n\n    has(val: T): boolean {\n      return this.set.has(this.toKey(val));\n    }\n\n    add(val: T): this {\n      this.set.set(this.toKey(val), val);\n      return this;\n    }\n\n    delete(val: T): this {\n      this.set.delete(this.toKey(val));\n      return this;\n    }\n\n    [Symbol.iterator]() {\n      return this.set.values();\n    }\n\n    get size() {\n      return this.set.size;\n    }\n\n    private toKey(val: T): string {\n      return JSON.stringify(val);\n    }\n  }","\nimport cytoscape, { Core, CytoscapeOptions, ElementsDefinition, NodeDefinition, EdgeDefinition, CollectionReturnValue } from \"cytoscape\";\n//import popper from \"cytoscape-popper\";\nimport fcose from \"cytoscape-fcose\";\n//import cola from \"cytoscape-cola\";\n//import d3Force from 'cytoscape-d3-force';\n\nimport { ref, PropType, onBeforeMount, watch } from \"vue\";\n\nimport Reuse, {  ReuseType, ReuseTypeFilter } from \"../backend/models/Reuse\";\nimport { CachedWorksApi } from \"../tools/CachedWorksApi\";\nimport { CachedArxivApi } from \"../tools/CachedArxivApi\";\nimport { Author, Work, WorkMessage } from \"../clients/crossref\";\nimport { Feed } from \"../clients/arxiv\";\n\nimport CompoundSet from \"../tools/CompoundSet\";\nimport { $enum } from 'ts-enum-util';\n\nconst websiteFilter = (id: string): boolean => !id.startsWith(\"https://github.com/\")&&(id.startsWith(\"http://\")||id.startsWith(\"https://\"));\n\nexport default {\n  props: {\n    reuseData: Array as PropType<Array<Reuse>>,\n    filter : String as PropType<ReuseTypeFilter>\n  },\n  setup(props: any) {\n    const cyInstance = ref<Core | null>(null);\n    const worksApi = new CachedWorksApi();\n    const arxivApi = new CachedArxivApi();\n\n    async function transformToGraph(data: Array<Reuse>) : Promise<ElementsDefinition> {\n      const transformedNodes = await getNodes(data);\n      \n      return {\n        nodes: transformedNodes,\n        edges: getLinks(data),\n      };\n    }\n\n    function trimGitHubURL(url : string) : string {\n      const githubPrefix = \"https://github.com/\"\n      const path = url.replace(githubPrefix, \"\");\n      const firstSlashPos = path.indexOf(\"/\");\n      const secondSlashPos = path.indexOf(\"/\", firstSlashPos + 1);\n\n      if (firstSlashPos > 0 && secondSlashPos > 0) return url.substring(0, secondSlashPos + githubPrefix.length);\n      return url;\n    }\n\n    async function getNodes(data: Array<Reuse>) : Promise<Array<NodeDefinition>> {\n      const sourceDois = Array.from(new Set(data\n                        .map(entry => entry.sourceDOI)\n                        .filter(doi => doi.trim() != \"\")));\n\n      const destinationDois = Array.from(new Set(data\n                        .map(entry => entry.reusedDOI)\n                        .filter(doi => doi.trim() != \"\")\n                        .filter(doi => (sourceDois.findIndex(d => d == doi) < 0))));\n\n      const arxivIds = Array.from(new Set(data\n                        .map(entry => entry.alternativeID)\n                        .filter(id => id.startsWith(\"arxiv:\"))\n                        .map(id => id.replace(\"arxiv:\", \"\"))));\n\n      const githubRepos = Array.from(new Set(data\n                        .map(entry => entry.alternativeID)\n                        .filter(id => id.startsWith(\"https://github.com/\"))\n                        .map(id => trimGitHubURL(id))));\n\n      const urls = Array.from(new Set(data\n                        .map(entry => entry.alternativeID)\n                        .filter(websiteFilter)\n      ))\n\n      return Promise.all(sourceDois.map(currentDoi => createNodeFromDOI(currentDoi, \"source\"))\n                             .concat(destinationDois.map(currentDoi => createNodeFromDOI(currentDoi, \"\")))\n                             .concat(arxivIds.map(id => createNodeFromArxivId(id)))\n                             .concat(githubRepos.map(url => createGithubNode(url)))\n                             .concat(urls.map(url => createWebsiteNode(url)))\n                         );\n    }\n\n    async function createWebsiteNode(url : string) : Promise<NodeDefinition> {\n      const protocolStripped = url.replace(\"https://\", \"\").replace(\"http://\", \"\");\n      const nodeName = protocolStripped.substring(0, protocolStripped.indexOf(\"/\") > 0 ? protocolStripped.indexOf(\"/\") : protocolStripped.length)\n      return { data: {id: url, name: nodeName}, classes: \"website\" };\n    }\n\n    async function createGithubNode(url : string) : Promise<NodeDefinition> {\n      const nodeName = url.replace(\"https://github.com/\", \"\");\n      return { data: {id: url, name: nodeName}, classes: \"github\" };\n    }\n\n    async function createNodeFromArxivId(id : string) : Promise<NodeDefinition> {\n      const arxivEntry = await arxivApi.queryById({id : id}).catch((err) => {\n          console.warn(err);\n        });\n      var nodeName = id;\n\n      if (arxivEntry as Feed) {\n        const entry = (arxivEntry as Feed).entry;\n\n        if (entry.author.length > 0) {\n          if (entry.author.length == 1) nodeName = entry.author[0].name\n          else nodeName = entry.author[0].name + \" et al.\"\n        }\n        nodeName += ` (${entry.published == null ? '???' : new Date(entry.published).getFullYear()})` \n      }\n\n      return { data: {id: \"arxiv:\" + id, name: nodeName}, classes: \"arxiv\" };\n    }\n\n    \n\n    async function createNodeFromDOI(doi : string, extraClass : string) : Promise<NodeDefinition> {\n      const work = await worksApi.worksDoiGet({ doi: doi })\n        .catch((err) => {\n          console.warn(err);\n        });\n\n      if (work as WorkMessage) {\n        const message = (work as WorkMessage).message\n        const citationCount =  message.isReferencedByCount;\n        const title = getItemTitle(message);\n        return { data: {id: doi, name : title, citations: citationCount}, classes: \"crossref \" + extraClass  };\n      } else {\n        return { data: {id: doi, name : doi, citations: 0}, classes: \"crossref \" + extraClass   };\n      }\n    }\n    \n    function getLinks(data: Array<Reuse>) : Array<EdgeDefinition> {\n      const linksToDois = Array.from(new CompoundSet(data.filter(item => item.reusedDOI.trim().length > 0).map((item: Reuse) => {\n        return { data: { source: item.sourceDOI, target: item.reusedDOI, type: item.type } };\n      })));\n\n      const linksToArxiv = Array.from(new CompoundSet(data.filter(item => item.alternativeID.startsWith(\"arxiv:\")).map((item : Reuse) => {\n          return { data: { source: item.sourceDOI, target: item.alternativeID, type: item.type } };\n      })));\n\n      const linksToGithub = Array.from(new CompoundSet(data.filter(item => item.alternativeID.startsWith(\"https://github.com/\")).map((item: Reuse) => {\n          return { data: { source: item.sourceDOI, target: trimGitHubURL(item.alternativeID), type: item.type } };\n      })));\n\n      const linksToWebsites = Array.from(new CompoundSet(data.filter(item => websiteFilter(item.alternativeID)).map((item: Reuse) => {\n          return { data: { source: item.sourceDOI, target: item.alternativeID, type: item.type } }\n      })));\n\n      return linksToDois\n              .concat(linksToArxiv)\n              .concat(linksToGithub)\n              .concat(linksToWebsites);\n    }\n    function getItemTitle(work: Work) {\n      if (work.issued) \n        return getAuthors(work.author) + \" (\" + work.issued.dateParts[0][0] + \")\"; \n      else \n        return getAuthors(work.author) + \"(???)\"; \n    }\n\n    function getAuthors(authors: Array<Author>): string {\n      if (!authors) return \"\";\n      if (!authors[0]) return \"\";\n      if (authors.length == 1) return authors[0].family;\n      return authors[0].family + \" et al.\";\n    }\n\n\n\n    onBeforeMount(async () => {\n      const elements = await transformToGraph(props.reuseData);\n      \n      var cytoConfig = {\n        container: document.getElementById('cyroot'),\n        elements: elements,\n        animate: true,\n        layout: { name: \"fcose\" },\n        style: [\n          {\n            selector: \"node\",\n            style: {\n              content: \"data(name)\",\n              \"font-family\": \"Roboto Condensed, Helvetica, Arial, sans-serif\",\n              width: 10,\n              height: 10,\n              \"font-size\": \"8pt\",\n              \"text-opacity\": 1,\n              \"text-valign\": \"center\",\n              \"text-halign\": \"right\",\n              color: \"#2c3e50\"\n            },\n          },\n          {\n            selector: \".crossref\",\n            style: {\n              \"background-color\": \"#77aaff\"\n            }\n          },\n          {\n            selector: \".source\",\n            style: {\n              \"border-width\": \"2px\",\n              \"border-color\": \"#5588dd\"\n            }\n          },\n          {\n            selector: \".arxiv\",\n            style: {\n              \"background-color\": \"#b31b1b\"\n            }\n          },\n          {\n            selector: \".github\",\n            style: {\n              \"background-color\": \"#238636\"\n            }\n          },\n          {\n            selector: \"edge\",\n            style: {\n              content: \"data(type)\",\n              \"font-size\": \"4pt\",\n              'text-wrap': 'wrap' ,\n               'edge-text-rotation': 'autorotate',\n               'min-zoomed-font-size': 10,\n              \"curve-style\": \"straight\",\n              \"target-arrow-shape\": \"triangle\",\n              \"line-color\": \"#9dbaea\",\n              \"target-arrow-color\": \"#9dbaea\",\n            },\n          },\n        ],\n      } as CytoscapeOptions;\n\n      cytoscape.use(fcose);\n      //cytoscape.use(popper);\n      var cy = cytoscape(cytoConfig);\n      cyInstance.value = cy;\n      \n      /* This function is a work-in-progress. How to get the tooltip\n      is one of the world's greatest mysteries. For whoever attempts\n      this task, may God be with you. */\n      /*cy.on(\"click\", \"node\", event => {\n        //let element = cy.getElementById(event.target._private.data.id);\n        var node = event.target._private;\n        console.log(node.data.citations);\n      });*/\n\n      filterElements(props.filter)\n\n      cy.layout({ name: \"fcose\" }).run();\n\n\n      //var throttle: any;\n      /*function handleWindowResize() {\n        clearTimeout(throttle);\n        throttle = setTimeout(function () {\n          cyInstance.value!.layout({ name: \"fcose\" }).run();\n        }, 100);\n      }*/\n\n      // window.addEventListener(\"resize\", handleWindowResize);\n    })\n  \n    var filteredElements : CollectionReturnValue | null = null ;\n\n    function filterElements(filter : ReuseTypeFilter) {\n        const cy = cyInstance.value!\n\n        if (filteredElements != null) filteredElements!.forEach(e => {\n          e.restore()\n        });\n\n        if (filter as String != \"ALL\") {\n          const filterValue = $enum(ReuseType).getValueOrDefault(filter);\n          const filterExpression = `edge[type != \"${filterValue}\"]`;\n          filteredElements = cy.filter(filterExpression);\n          \n          cy.remove(filteredElements)\n        }\n    }\n\n    watch(\n      () => props.filter,\n      async filter => {\n        filterElements(filter)\n      })\n    return {\n      cyInstance,\n    };\n  },\n};\n","import { render } from \"./GraphView.vue?vue&type=template&id=42ba45f3\"\nimport script from \"./GraphView.vue?vue&type=script&lang=ts\"\nexport * from \"./GraphView.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n  <div>\n    <h2 class=\"text-base bg-opacity-80 bg-blue-200\">Researchers</h2>\n\n    <h3 class=\"text-sm bg-opacity-40 bg-blue-200\">Most reused (R+)</h3>\n      <div v-if=\"isLoading\">\n        <p>Loading...</p>\n      </div>\n      <div v-else>\n        <table class=\"m-1 table-auto text-xs w-full bg-opacity-40 bg-white\">\n          <tr v-for=\"(p, index) in researchers.reused\" :key=\"index\" :class=\"index % 2 ? 'bg-opacity-80 bg-white' : ''\">\n            <td class=\"text-left hover:bg-blue-50\">{{p.entry.given}} {{p.entry.family}}</td>\n            <td>{{p.frequency}}</td>\n          </tr>\n        </table>\n      </div>\n    <h3 class=\"text-sm bg-opacity-40 bg-blue-200\">Most reusing (R)</h3>\n      <div v-if=\"isLoading\">\n        <p>Loading...</p>\n      </div>\n      <div v-else>    \n        <table class=\"m-1 table-auto text-xs w-full bg-opacity-40 bg-white\">\n          <tr v-for=\"(p, index) in researchers.reusing\" :key=\"index\" :class=\"index % 2 ? 'bg-opacity-80 bg-white' : ''\">\n            <td class=\"text-left hover:bg-blue-50\">{{p.entry.given}} {{p.entry.family}}</td>\n            <td>{{p.frequency}}</td>\n          </tr>\n        </table>\n      </div>\n    <h2 class=\"text-base bg-opacity-80 bg-blue-200 mt-3\">Artifacts</h2>\n\n    <h3 class=\"text-sm bg-opacity-40 bg-blue-200\">Most reused (R+)</h3>\n      <div v-if=\"isLoading\">\n        <p>Loading...</p>\n      </div>\n      <div v-else>    \n        <table class=\"m-1 table-auto text-xs bg-opacity-40 bg-white\">\n          <tr v-for=\"(p, index) in publications.reused\" :key=\"index\" :class=\"index % 2 ? 'bg-opacity-80 bg-white' : ''\">\n            <td class=\"text-left\">\n              <router-link\n              class=\"hover:bg-blue-50\"\n              :to=\"{\n                  name: 'paper',\n                  params: {\n                  doiPrefix: p.entry.dOI.split('/')[0],\n                  doiSuffix: p.entry.dOI.split('/')[1],\n                  },\n              }\"\n              >\n              {{ p.entry.title[0] }}\n              </router-link>\n            </td>\n            <td>{{p.frequency}}</td>\n          </tr>\n        </table>\n      </div>\n    <h3 class=\"text-sm bg-opacity-40 bg-blue-200\">Most reusing (R)</h3>\n      <div v-if=\"isLoading\">\n        <p>Loading...</p>\n      </div>\n      <div v-else>    \n        <table class=\"m-1 table-auto text-xs bg-opacity-40 bg-white\">\n          <tr v-for=\"(p, index) in publications.reusing\" :key=\"index\" :class=\"index % 2 ? 'bg-opacity-80 bg-white' : ''\">\n            <td class=\"text-left\">\n              <router-link\n              class=\"hover:bg-blue-50\"\n              :to=\"{\n                  name: 'paper',\n                  params: {\n                  doiPrefix: p.entry.dOI.split('/')[0],\n                  doiSuffix: p.entry.dOI.split('/')[1],\n                  },\n              }\"\n              >\n              {{ p.entry.title[0] }}\n              </router-link>\n            </td>\n            <td>{{p.frequency}}</td>\n          </tr>\n          </table>\n      </div>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { ref, onBeforeMount, PropType } from \"vue\";\n\nimport Reuse from '../backend/models/Reuse';\n\nimport RIndex from '../backend/RIndex';\nimport { HistogramEntry } from '../tools/Histogram';\nimport { Author, Work } from '../clients/crossref';\n\ninterface HistogramContainer<T> {\n  reused : Array<HistogramEntry<T>>,\n  reusing : Array<HistogramEntry<T>>\n}\n\nexport default {\n  props: {\n    reuseData: Array as PropType<Array<Reuse>>,\n  },\n  setup(props : any) {\n    const isLoading = ref(false);\n    const researchers = ref({} as HistogramContainer<Author>);\n    const publications = ref({} as HistogramContainer<Work>);\n    \n    onBeforeMount(async () => {\n      isLoading.value = true;\n      const indexer = new RIndex(props.reuseData);\n      \n      researchers.value = { \n        reused: (await indexer.computeAuthorsReused()).slice(0,5),\n        reusing: (await indexer.computeAuthorsReusing()).slice(0,5)\n        };\n\n      publications.value = { \n        reused: (await indexer.computeWorksReused()).slice(0,5),\n        reusing: (await indexer.computeWorksReusing()).slice(0,5)\n        };\n\n      isLoading.value = false;\n    });\n\n    return { isLoading, researchers, publications };\n  }\n}\n</script>\n","export interface HistogramEntry<T> {\n    entry: T;\n    frequency: number;\n}\n\nexport class Histogram<T> {\n    private set: Map<String, T>\n    private histo: Map<String, number>\n    private toKey: (value: T) => string; \n\n    constructor(toKey: (value : T) => string, initial: T[] = []) {\n        this.set = new Map();\n        this.histo = new Map();\n        this.toKey = (toKey != null) ? toKey :  (value : T) => { return JSON.stringify(value)};\n\n        initial.forEach(entry => this.add(entry));\n    }\n\n    add(value: T) {\n        const key = this.toKey(value);\n        if(this.set.has(key)) {\n            this.histo.set(key, this.histo.get(key)! + 1);\n        } else {\n            this.set.set(key, value);\n            this.histo.set(key, 1);\n        }\n    }\n\n    subtract(value: T) {\n        const key = this.toKey(value);\n        if(this.set.has(key)) {\n            const currentCount = this.histo.get(key)!;\n            if (currentCount <= 1) {\n                this.set.delete(key);\n                this.histo.delete(key);\n            } else {\n                this.histo.set(key, currentCount - 1);\n            }\n        }\n    }\n\n\n    histogram() : Array<HistogramEntry<T>> {\n       return Array.from(this.set.keys()).map(key => { return { entry: this.set.get(key)!, frequency: this.histo.get(key)!}}).sort((a,b) => { return b.frequency - a.frequency })\n    }\n\n}","import { Author, WorkMessage, Work } from \"@/clients/crossref\";\nimport { CachedWorksApi } from \"@/tools/CachedWorksApi\";\nimport CompoundSet from \"@/tools/CompoundSet\";\nimport { Histogram, HistogramEntry } from \"@/tools/Histogram\";\nimport Reuse from \"./models/Reuse\";\n\ninterface SimplifiedReuse {\n    source: string, \n    dest: string\n}\n\nexport default class RIndex {\n    reuseData : Array<Reuse>;\n    uniqueReuse : CompoundSet<SimplifiedReuse>;\n    \n    constructor(reuseData : Array<Reuse>) {\n        this.reuseData = reuseData;\n        this.uniqueReuse = new CompoundSet(this.reuseData\n            .filter(item => item.reusedDOI.trim().length > 0)\n            .map(item => {\n                return {source: item.sourceDOI, dest: item.reusedDOI ? item.reusedDOI : item.alternativeID }\n            }));\n    }   \n\n    async computeAuthorsReusing() : Promise<Array<HistogramEntry<Author>>> {\n        const crWorksApi = new CachedWorksApi();\n        \n        return Promise.all(Array.from(this.uniqueReuse).map(item => crWorksApi.worksDoiGet({doi: item.source})))\n                .then(works => {\n                    const authors = works.flatMap(w => w.message.author);\n                    const histogram = new Histogram<Author>((a) => `${a.given} ${a.family}`, authors).histogram()\n                    return histogram;\n                })         \n    }\n\n    async computeAuthorsReused() : Promise<Array<HistogramEntry<Author>>> {\n        const crWorksApi = new CachedWorksApi();\n        \n        return Promise.all(Array.from(this.uniqueReuse)\n            .filter(item => item.dest.trim().length > 0)\n            .map(item => crWorksApi.worksDoiGet({doi: item.dest}).catch(reason => {console.warn(`Could not resolve ${item.dest}.`)})))\n                .then(works => {\n                    const authors = works.filter(w => w != null).flatMap(w => (w as WorkMessage).message.author);\n                    const histogram = new Histogram<Author>((a) => `${a.given} ${a.family}`, authors).histogram()\n                    return histogram;\n                })         \n    }\n\n    async computeWorksReusing() : Promise<Array<HistogramEntry<Work>>> {\n        const crWorksApi = new CachedWorksApi();\n\n        return Promise.all(Array.from(this.uniqueReuse)\n                .map(item => crWorksApi.worksDoiGet({doi: item.source}).catch(reason => {console.warn(`Could not resolve ${item.dest}.`)})))\n                .then(works => {\n                    const validWorks = works.filter(w => w != null).map(w => (w as WorkMessage).message)\n                    const histogram = new Histogram<Work>((w) => w.dOI, validWorks).histogram()\n                    return histogram;\n                })\n    }\n\n    async computeWorksReused() : Promise<Array<HistogramEntry<Work>>> {\n        const crWorksApi = new CachedWorksApi();\n\n        return Promise.all(Array.from(this.uniqueReuse)\n                .map(item => crWorksApi.worksDoiGet({doi: item.dest}).catch(reason => {console.warn(`Could not resolve ${item.dest}.`)})))\n                .then(works => {\n                    const validWorks = works.filter(w => w != null).map(w => (w as WorkMessage).message)\n                    const histogram = new Histogram<Work>((w) => w.dOI, validWorks).histogram()\n                    return histogram;\n                })\n    }\n\n}","\nimport { ref, onBeforeMount, PropType } from \"vue\";\n\nimport Reuse from '../backend/models/Reuse';\n\nimport RIndex from '../backend/RIndex';\nimport { HistogramEntry } from '../tools/Histogram';\nimport { Author, Work } from '../clients/crossref';\n\ninterface HistogramContainer<T> {\n  reused : Array<HistogramEntry<T>>,\n  reusing : Array<HistogramEntry<T>>\n}\n\nexport default {\n  props: {\n    reuseData: Array as PropType<Array<Reuse>>,\n  },\n  setup(props : any) {\n    const isLoading = ref(false);\n    const researchers = ref({} as HistogramContainer<Author>);\n    const publications = ref({} as HistogramContainer<Work>);\n    \n    onBeforeMount(async () => {\n      isLoading.value = true;\n      const indexer = new RIndex(props.reuseData);\n      \n      researchers.value = { \n        reused: (await indexer.computeAuthorsReused()).slice(0,5),\n        reusing: (await indexer.computeAuthorsReusing()).slice(0,5)\n        };\n\n      publications.value = { \n        reused: (await indexer.computeWorksReused()).slice(0,5),\n        reusing: (await indexer.computeWorksReusing()).slice(0,5)\n        };\n\n      isLoading.value = false;\n    });\n\n    return { isLoading, researchers, publications };\n  }\n}\n","import { render } from \"./TopFive.vue?vue&type=template&id=4d80da1a\"\nimport script from \"./TopFive.vue?vue&type=script&lang=ts\"\nexport * from \"./TopFive.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n  <div>\n    <h2 class=\"text-base bg-opacity-80 bg-blue-200 mt-3\">Statistics</h2>\n\n    <table class=\"m-1 table-auto text-xs bg-opacity-40 bg-white\">\n      <tr>\n        <td class=\"w-full text-left\">Papers inspected</td>\n        <td class=\"text-right\">{{ papersInspected }}</td>\n      </tr>\n      <tr>\n        <td class=\"w-full text-left\">Reused papers (DOI)</td>\n        <td class=\"text-right\">{{ targetDoiNodes }}</td>\n      </tr>\n      <tr>\n        <td class=\"w-full text-left\">Reused papers (arXiv)</td>\n        <td class=\"text-right\">{{ targetArxivNodes }}</td>\n      </tr>\n      <tr>\n        <td class=\"w-full text-left\">Reused repositories (GitHub)</td>\n        <td class=\"text-right\">{{ targetGitHubNodes }}</td>\n      </tr>\n      <tr>\n        <td class=\"w-full text-left\">Reused websites</td>\n        <td class=\"text-right\">{{ targetWebsiteNodes }}</td>\n      </tr>\n      <tr>\n        <td class=\"w-full text-center\" colspan=\"2\">Reuse types</td>\n      </tr>\n      <tr>\n        <td class=\"text-center\" colspan=\"2\">{{ edgeTypes }}</td>\n      </tr>\n    </table>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { ref, PropType } from \"vue\";\nimport Reuse from \"../backend/models/Reuse\";\nimport { Histogram } from '../tools/Histogram';\nimport CompoundSet from '../tools/CompoundSet';\n\nexport default {\n  props: {\n    reuseData: Array as PropType<Array<Reuse>>,\n  },\n  setup(props: any) {\n    const data = props.reuseData as Array<Reuse>;\n\n    const papersInspected = ref(new Set(data.map((r) => r.sourceDOI)).size);\n\n    const targetDoiNodes = ref(new Set(data.filter(r => r.reusedDOI.trim().length > 0).map(r => r.reusedDOI)).size);\n    const targetGitHubNodes = ref(new Set(data.filter(r => r.alternativeID.startsWith(\"https://github.com/\")).map(r => r.alternativeID)).size);\n    const targetArxivNodes = ref(new Set(data.filter(r => r.alternativeID.startsWith(\"arxiv:\")).map(r => r.alternativeID)).size);\n    \n    const websiteFilter = (id: string): boolean => !id.startsWith(\"https://github.com/\")&&(id.startsWith(\"http://\")||id.startsWith(\"https://\"));\n    const targetWebsiteNodes = ref(new Set(data.filter(r => websiteFilter(r.alternativeID)).map(r => r.alternativeID)).size);\n\n    const edges = Array.from(new CompoundSet(data.map((item: Reuse) => {\n        return { source: item.sourceDOI, target: item.reusedDOI.trim().length > 0 ? item.reusedDOI : item.alternativeID, type: item.type } ;\n    })));\n    \n    const edgeTypeHistogram = new Histogram(e => `${e.type}`, edges).histogram();\n\n    const edgeTypes = edgeTypeHistogram.map(e => `${e.entry.type} (${e.frequency})`).join(\", \");\n\n    return { papersInspected, targetDoiNodes, targetGitHubNodes, targetArxivNodes, targetWebsiteNodes, edgeTypes };\n  },\n};\n</script>\n","\nimport { ref, PropType } from \"vue\";\nimport Reuse from \"../backend/models/Reuse\";\nimport { Histogram } from '../tools/Histogram';\nimport CompoundSet from '../tools/CompoundSet';\n\nexport default {\n  props: {\n    reuseData: Array as PropType<Array<Reuse>>,\n  },\n  setup(props: any) {\n    const data = props.reuseData as Array<Reuse>;\n\n    const papersInspected = ref(new Set(data.map((r) => r.sourceDOI)).size);\n\n    const targetDoiNodes = ref(new Set(data.filter(r => r.reusedDOI.trim().length > 0).map(r => r.reusedDOI)).size);\n    const targetGitHubNodes = ref(new Set(data.filter(r => r.alternativeID.startsWith(\"https://github.com/\")).map(r => r.alternativeID)).size);\n    const targetArxivNodes = ref(new Set(data.filter(r => r.alternativeID.startsWith(\"arxiv:\")).map(r => r.alternativeID)).size);\n    \n    const websiteFilter = (id: string): boolean => !id.startsWith(\"https://github.com/\")&&(id.startsWith(\"http://\")||id.startsWith(\"https://\"));\n    const targetWebsiteNodes = ref(new Set(data.filter(r => websiteFilter(r.alternativeID)).map(r => r.alternativeID)).size);\n\n    const edges = Array.from(new CompoundSet(data.map((item: Reuse) => {\n        return { source: item.sourceDOI, target: item.reusedDOI.trim().length > 0 ? item.reusedDOI : item.alternativeID, type: item.type } ;\n    })));\n    \n    const edgeTypeHistogram = new Histogram(e => `${e.type}`, edges).histogram();\n\n    const edgeTypes = edgeTypeHistogram.map(e => `${e.entry.type} (${e.frequency})`).join(\", \");\n\n    return { papersInspected, targetDoiNodes, targetGitHubNodes, targetArxivNodes, targetWebsiteNodes, edgeTypes };\n  },\n};\n","import { render } from \"./Stats.vue?vue&type=template&id=7715f7ba\"\nimport script from \"./Stats.vue?vue&type=script&lang=ts\"\nexport * from \"./Stats.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n  <div id=\"legend\">\n    <h2 class=\"text-base bg-opacity-80 bg-blue-200 mt-3\">Legend</h2>\n\n    <table class=\"m-1 table-auto text-xs bg-opacity-40 bg-white w-full text-left\">\n      <tr>\n        <td><div style=\"background-color: #77aaff; border-width: 2px; border-color: #5588dd\" class=\"w-4 h-4 rounded-full mx-auto\"></div></td>\n        <td>Inspected Paper</td>\n      </tr>\n      <tr>\n        <td><div style=\"background-color: #77aaff\" class=\"w-4 h-4 rounded-full mx-auto\"></div></td>\n        <td>Published Paper</td>\n      </tr>\n      <tr>\n        <td><div style=\"background-color: #b31b1b\" class=\"w-4 h-4 rounded-full mx-auto\"></div></td>\n        <td>arXiv preprint</td>\n      </tr>      \n      <tr>\n        <td><div style=\"background-color: #238636\" class=\"w-4 h-4 rounded-full mx-auto\"></div></td>\n        <td>GitHub repository</td>\n      </tr>      \n      <tr>\n        <td><div style=\"background-color: #999\" class=\"w-4 h-4 rounded-full mx-auto\"></div></td>\n        <td>Website</td>\n      </tr>      \n    </table>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\";\n\nexport default defineComponent({\n  setup() {},\n});\n</script>\n","\nimport { defineComponent } from \"vue\";\n\nexport default defineComponent({\n  setup() {},\n});\n","import { render } from \"./Legend.vue?vue&type=template&id=763226ce\"\nimport script from \"./Legend.vue?vue&type=script&lang=ts\"\nexport * from \"./Legend.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","\nimport GraphView from '../components/GraphView.vue';\nimport TopFive from '../components/TopFive.vue';\nimport Stats from '../components/Stats.vue';\nimport Legend from '../components/Legend.vue';\n\nimport reuseJson from '../assets/data/reuse.json';\nimport { ReuseFromJson, ReuseType } from '../backend/models/Reuse';\n\nimport { $enum } from \"ts-enum-util\";\nimport { ref } from '@vue/reactivity';\n\nexport default {\n  name: \"Home\",\n  components: { Stats, TopFive, GraphView, Legend },\n  setup() {\n\n    const selectedFilter = ref(\"ALL\");\n\n    const reuseData = (reuseJson as Array<any>).map(ReuseFromJson);\n\n    const reuseTypes = $enum(ReuseType).getEntries().sort((a,b) => {\n      if (a[1] < b[1]) return -1;\n      else if (a[1] > b[1]) return 1;\n      else return 0;\n    });\n\n    return { reuseData, reuseTypes, selectedFilter};\n  },\n};\n","import { render } from \"./Home.vue?vue&type=template&id=7ea4fd0c\"\nimport script from \"./Home.vue?vue&type=script&lang=ts\"\nexport * from \"./Home.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n    <div >\n        <h1 class=\"text-xl bg-opacity-80 bg-blue-200\">Contributors</h1>\n        \n        <p class=\"mt-5 mb-5\">We are thankful to our data collectors to take the time and contribute to the effort. </p>\n\n        <table class=\"m-1 table-auto text-m bg-opacity-40 bg-white mx-auto my-auto\">\n            <tr>\n                <th class=\"text-left px-2 pt-1\">Name</th>\n                <th class=\"text-right px-2 pt-1\">Papers inspected</th>\n            </tr>\n            <tr v-for=\"(contributor, index) in contributors\" :key=\"index\">\n                <td class=\"text-left px-2\"><a :href=\"'http://github.com/' + contributor.entry\">{{ contributor.entry }}</a></td>\n                <td class=\"text-right px-2\">{{ contributor.frequency }}</td>\n            </tr>\n        </table>\n\n    </div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nimport reuseJson from '@/assets/data/reuse.json';\nimport { ReuseFromJson } from '../backend/models/Reuse';\nimport { Histogram } from '../tools/Histogram';\n\nexport default defineComponent({\n    name: \"Contributors\",\n    components: {  },\n    setup() {\n        const reuseData = (reuseJson as Array<any>).map(ReuseFromJson);\n\n        const uniqueContributorDoiPair = Array.from(new Set(reuseData.map(r => { return JSON.stringify({name: r.contributor, doi: r.sourceDOI })}))).map(s => JSON.parse(s));\n\n        const contributors = new Histogram(x => x, uniqueContributorDoiPair.filter(p => p.name != null).map(r => r.name)).histogram();\n\n\n        return { contributors };\n    },\n})\n</script>\n","\nimport { defineComponent } from 'vue'\n\nimport reuseJson from '@/assets/data/reuse.json';\nimport { ReuseFromJson } from '../backend/models/Reuse';\nimport { Histogram } from '../tools/Histogram';\n\nexport default defineComponent({\n    name: \"Contributors\",\n    components: {  },\n    setup() {\n        const reuseData = (reuseJson as Array<any>).map(ReuseFromJson);\n\n        const uniqueContributorDoiPair = Array.from(new Set(reuseData.map(r => { return JSON.stringify({name: r.contributor, doi: r.sourceDOI })}))).map(s => JSON.parse(s));\n\n        const contributors = new Histogram(x => x, uniqueContributorDoiPair.filter(p => p.name != null).map(r => r.name)).histogram();\n\n\n        return { contributors };\n    },\n})\n","import { render } from \"./Contributors.vue?vue&type=template&id=9faaa564\"\nimport script from \"./Contributors.vue?vue&type=script&lang=ts\"\nexport * from \"./Contributors.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","<template>\n  <div>\n    <h1 class=\"text-xl bg-opacity-80 bg-blue-200\">Publication Details</h1>\n    <div v-if=\"isLoading\">\n      <p>Loading data for {{ doi }} ...</p>\n    </div>\n    <div v-else>\n      <div class=\"text-left p-5\">\n        <h1 class=\"text-2xl\">{{ paper.message.title.join(\": \") }} {{ paper.message.subtitle.length > 0 ? \": \" + paper.message.subtitle.join(\" \") : \"\" }} </h1>\n        <h2 class=\"text-xl\">\n          {{\n            paper.message.author.map((a) => `${a.given} ${a.family}`).join(\", \")\n          }}\n        </h2>\n        <p>\n          DOI:\n          <a :href=\"'https://doi.org/' + paper.message.dOI\">{{\n            paper.message.dOI\n          }}</a>\n        </p>\n        <p>\n          {{ paper.message.containerTitle.join(\", \") }} \n        </p>\n        <p>\n          Published: {{ paper.message.created.dateTime.toLocaleDateString() }}\n        </p>\n      </div>\n      <div class=\"grid grid-cols-2 gap-4 p-5\">\n        <div>\n          <h2 class=\"text-l bg-opacity-40 bg-blue-200\">Reused by</h2>\n          <table class=\"text-left\">\n            <tr>\n              <th class=\"w-min\">DOI</th>\n              <th>Title</th>\n              <!-- <th>Reported by</th> -->\n            </tr>\n            <tr v-for=\"(r, index) in reusedStuff\" :key=\"index\">\n              <td>\n                <router-link\n                  class=\"hover:bg-blue-50\"\n                  :to=\"{\n                    name: 'paper',\n                    params: {\n                      doiPrefix: r.doi.split('/')[0],\n                      doiSuffix: r.doi.split('/')[1],\n                    },\n                  }\"\n                >\n                  {{ r.doi }}\n                </router-link>\n              </td>\n              <td>\n                {{ r.doiDetails.title.join(\": \") }}\n              </td>\n              <!-- <td>\n                {{ r.contributors.join(\", \") }}\n              </td> -->\n            </tr>\n          </table>\n        </div>\n        <div>\n          <h2 class=\"text-l bg-opacity-40 bg-blue-200\">Reusing</h2>\n\n          <table class=\"text-left\">\n              <tr>\n                <th>Identifier</th>\n                <th>Title</th>\n                <!-- <th>Reported by</th>-->\n              </tr>\n            <tr v-for=\"(r, index) in reusingStuff\" :key=\"index\">\n               <td>\n                   <span v-if=\"r.doi\">\n                        <router-link\n                        class=\"hover:bg-blue-50\"\n                        :to=\"{\n                            name: 'paper',\n                            params: {\n                            doiPrefix: r.doi.split('/')[0],\n                            doiSuffix: r.doi.split('/')[1],\n                            },\n                        }\"\n                        >\n                        {{ r.doi }}\n                        </router-link>\n                   </span>\n                   <span v-else-if=\"r.alternativeId.startsWith('arxiv:')\">\n                       ARXIV {{ r.alternativeId }}\n                   </span>\n                    <span v-else-if=\"r.alternativeId.startsWith('https://github.com')\">\n                       GITHUB {{ r.alternativeId }}\n                   </span>\n                    <span v-else>\n\n                        {{ r.alternativeId }}\n                    </span>\n              </td>\n              <td>\n                {{ r.doiDetails ? r.doiDetails.title.join(\": \") : \"\" }}\n              </td>\n              <!--<td>\n                {{ r.contributors.join(\", \") }}\n              </td>-->\n            </tr>\n          </table>\n\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n<script lang=\"ts\">\nimport { defineComponent, onBeforeMount, ref, watch } from \"vue\";\nimport { WorkMessage } from \"../clients/crossref\";\nimport { CachedWorksApi } from \"../tools/CachedWorksApi\";\n\nimport router from \"../tools/router\";\n\nimport reuseJson from \"../assets/data/reuse.json\";\nimport { ReuseFromJson } from \"../backend/models/Reuse\";\nimport { useRoute } from \"vue-router\";\n\n//import { Feed } from \"../clients/arxiv\";\n\ninterface ReuseLine {\n  doi?: string;\n  doiDetails?: any;\n  alternativeId?: string;\n  //arxivPreprint?: Feed,\n  contributors: Array<string>;\n}\n\nexport default defineComponent({\n  name: \"Paper\",\n  components: {  },\n  setup() {\n    const isLoading = ref(false);\n    const paper = ref({} as WorkMessage);\n    const reusedStuff = ref(new Array<ReuseLine>());\n    const reusingStuff = ref(new Array<ReuseLine>());\n\n    const doi = ref(\"\");\n\n    const reuseData = (reuseJson as Array<any>).map(ReuseFromJson);\n\n    const worksApi = new CachedWorksApi();\n\n    const route = useRoute();\n\n    onBeforeMount(async () => {\n        const doiPrefix = router.currentRoute.value.params.doiPrefix as string;\n        const doiSuffix = router.currentRoute.value.params.doiSuffix as string;\n        doi.value = `${doiPrefix}/${doiSuffix}`;\n        await loadPaper();\n    });\n\n    watch(\n      () => route.params,\n      async newParams => {\n        const doiPrefix = newParams.doiPrefix as string;\n        const doiSuffix = newParams.doiSuffix as string;\n        doi.value = `${doiPrefix}/${doiSuffix}`;\n        await loadPaper();\n    })\n\n\n    async function loadPaper() {\n      isLoading.value = true;\n\n      paper.value = await worksApi.worksDoiGetInteral({\n        doi: doi.value,\n      }, true);\n\n      const reducer = (\n        accumulator: Array<ReuseLine>,\n        currentValue: ReuseLine\n      ) => {\n        var target = accumulator.find((r) => currentValue.doi ? r.doi == currentValue.doi : r.alternativeId == currentValue.alternativeId );\n        \n        if (target === undefined) {\n          accumulator.push(currentValue);\n        } else {\n          currentValue.contributors.forEach((c) =>\n            target!.contributors.push(c)\n          );\n        }\n        return accumulator;\n      };\n\n      reusedStuff.value = reuseData\n        .filter((r) => r.reusedDOI.toLowerCase() == doi.value.toLowerCase())\n        .map((r) => {\n          return {\n            doi: r.sourceDOI,\n            contributors: new Array(r.contributor),\n          };\n        })\n        .reduce(reducer, new Array<ReuseLine>());\n\n      reusedStuff.value = await resolveDois(reusedStuff.value);\n\n      reusingStuff.value = reuseData\n        .filter((r) => r.sourceDOI.toLowerCase() == doi.value.toLowerCase())\n        .map((r) => {\n          return {\n            doi: r.reusedDOI,\n            alternativeId: r.alternativeID,\n            contributors: new Array(r.contributor),\n          };\n        })\n        .reduce(reducer, new Array<ReuseLine>());\n\n        reusingStuff.value = await resolveDois(reusingStuff.value);\n\n      isLoading.value = false;\n    }\n\n    async function resolveDois(\n      stuff: Array<ReuseLine>\n    ): Promise<Array<ReuseLine>> {\n      return Promise.all(stuff.map(resolveDoi));\n    }\n\n    async function resolveDoi(reuse: ReuseLine): Promise<ReuseLine> {\n      if (reuse.doi) {\n        const workResult = await worksApi.worksDoiGetInteral({ doi: reuse.doi }, true).catch((err) => { console.warn(err); })\n        if (workResult as WorkMessage) {\n            reuse.doiDetails = (workResult as WorkMessage).message;\n        }\n      }\n      return reuse;\n    }\n\n    return { paper, reusedStuff, reusingStuff, isLoading, reuseData, doi };\n  },\n});\n</script>\n\n","\nimport { defineComponent, onBeforeMount, ref, watch } from \"vue\";\nimport { WorkMessage } from \"../clients/crossref\";\nimport { CachedWorksApi } from \"../tools/CachedWorksApi\";\n\nimport router from \"../tools/router\";\n\nimport reuseJson from \"../assets/data/reuse.json\";\nimport { ReuseFromJson } from \"../backend/models/Reuse\";\nimport { useRoute } from \"vue-router\";\n\n//import { Feed } from \"../clients/arxiv\";\n\ninterface ReuseLine {\n  doi?: string;\n  doiDetails?: any;\n  alternativeId?: string;\n  //arxivPreprint?: Feed,\n  contributors: Array<string>;\n}\n\nexport default defineComponent({\n  name: \"Paper\",\n  components: {  },\n  setup() {\n    const isLoading = ref(false);\n    const paper = ref({} as WorkMessage);\n    const reusedStuff = ref(new Array<ReuseLine>());\n    const reusingStuff = ref(new Array<ReuseLine>());\n\n    const doi = ref(\"\");\n\n    const reuseData = (reuseJson as Array<any>).map(ReuseFromJson);\n\n    const worksApi = new CachedWorksApi();\n\n    const route = useRoute();\n\n    onBeforeMount(async () => {\n        const doiPrefix = router.currentRoute.value.params.doiPrefix as string;\n        const doiSuffix = router.currentRoute.value.params.doiSuffix as string;\n        doi.value = `${doiPrefix}/${doiSuffix}`;\n        await loadPaper();\n    });\n\n    watch(\n      () => route.params,\n      async newParams => {\n        const doiPrefix = newParams.doiPrefix as string;\n        const doiSuffix = newParams.doiSuffix as string;\n        doi.value = `${doiPrefix}/${doiSuffix}`;\n        await loadPaper();\n    })\n\n\n    async function loadPaper() {\n      isLoading.value = true;\n\n      paper.value = await worksApi.worksDoiGetInteral({\n        doi: doi.value,\n      }, true);\n\n      const reducer = (\n        accumulator: Array<ReuseLine>,\n        currentValue: ReuseLine\n      ) => {\n        var target = accumulator.find((r) => currentValue.doi ? r.doi == currentValue.doi : r.alternativeId == currentValue.alternativeId );\n        \n        if (target === undefined) {\n          accumulator.push(currentValue);\n        } else {\n          currentValue.contributors.forEach((c) =>\n            target!.contributors.push(c)\n          );\n        }\n        return accumulator;\n      };\n\n      reusedStuff.value = reuseData\n        .filter((r) => r.reusedDOI.toLowerCase() == doi.value.toLowerCase())\n        .map((r) => {\n          return {\n            doi: r.sourceDOI,\n            contributors: new Array(r.contributor),\n          };\n        })\n        .reduce(reducer, new Array<ReuseLine>());\n\n      reusedStuff.value = await resolveDois(reusedStuff.value);\n\n      reusingStuff.value = reuseData\n        .filter((r) => r.sourceDOI.toLowerCase() == doi.value.toLowerCase())\n        .map((r) => {\n          return {\n            doi: r.reusedDOI,\n            alternativeId: r.alternativeID,\n            contributors: new Array(r.contributor),\n          };\n        })\n        .reduce(reducer, new Array<ReuseLine>());\n\n        reusingStuff.value = await resolveDois(reusingStuff.value);\n\n      isLoading.value = false;\n    }\n\n    async function resolveDois(\n      stuff: Array<ReuseLine>\n    ): Promise<Array<ReuseLine>> {\n      return Promise.all(stuff.map(resolveDoi));\n    }\n\n    async function resolveDoi(reuse: ReuseLine): Promise<ReuseLine> {\n      if (reuse.doi) {\n        const workResult = await worksApi.worksDoiGetInteral({ doi: reuse.doi }, true).catch((err) => { console.warn(err); })\n        if (workResult as WorkMessage) {\n            reuse.doiDetails = (workResult as WorkMessage).message;\n        }\n      }\n      return reuse;\n    }\n\n    return { paper, reusedStuff, reusingStuff, isLoading, reuseData, doi };\n  },\n});\n","import { render } from \"./Paper.vue?vue&type=template&id=0a86b033\"\nimport script from \"./Paper.vue?vue&type=script&lang=ts\"\nexport * from \"./Paper.vue?vue&type=script&lang=ts\"\nscript.render = render\n\nexport default script","import { createRouter, createWebHistory } from \"vue-router\";\n\nimport Home from '../../pages/Home.vue';\nimport Contributors from '@/pages/Contributors.vue';\nimport Paper from '@/pages/Paper.vue';\n\nconst routerHistory = createWebHistory(process.env.BASE_URL);\n\nconst router = createRouter({\n    history: routerHistory,\n    routes: [\n        { path: '/', component: Home, name: \"home\" },\n        { path: '/contributors', component: Contributors, name: \"contributors\"},\n        { path: '/doi/:doiPrefix/:doiSuffix', component: Paper, name: \"paper\" },\n    ]\n});\n\nexport default router;","import { createApp } from 'vue'\nimport App from './App.vue'\nimport './assets/tailwind.css'\nimport axios from 'axios'\nimport VueAxios from 'vue-axios'\nimport router from './tools/router'\n\nconst app = createApp(App)\napp.use(VueAxios, axios)\napp.use(router)\napp.mount('#app')\n","module.exports = __webpack_public_path__ + \"img/dor-logo.0d71f7c5.svg\";"],"sourceRoot":""}