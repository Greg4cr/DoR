/* tslint:disable */
/* eslint-disable */
/**
 * ORCID Public
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ActivitiesSummaryV30Rc1,
    ActivitiesSummaryV30Rc1FromJSON,
    ActivitiesSummaryV30Rc1ToJSON,
    DistinctionSummaryV30Rc1,
    DistinctionSummaryV30Rc1FromJSON,
    DistinctionSummaryV30Rc1ToJSON,
    DistinctionV30Rc1,
    DistinctionV30Rc1FromJSON,
    DistinctionV30Rc1ToJSON,
    DistinctionsV30Rc1,
    DistinctionsV30Rc1FromJSON,
    DistinctionsV30Rc1ToJSON,
    EducationSummaryV30Rc1,
    EducationSummaryV30Rc1FromJSON,
    EducationSummaryV30Rc1ToJSON,
    EducationV30Rc1,
    EducationV30Rc1FromJSON,
    EducationV30Rc1ToJSON,
    EducationsSummaryV30Rc1,
    EducationsSummaryV30Rc1FromJSON,
    EducationsSummaryV30Rc1ToJSON,
    EmploymentSummaryV30Rc1,
    EmploymentSummaryV30Rc1FromJSON,
    EmploymentSummaryV30Rc1ToJSON,
    EmploymentV30Rc1,
    EmploymentV30Rc1FromJSON,
    EmploymentV30Rc1ToJSON,
    FundingSummaryV30Rc1,
    FundingSummaryV30Rc1FromJSON,
    FundingSummaryV30Rc1ToJSON,
    FundingV30Rc1,
    FundingV30Rc1FromJSON,
    FundingV30Rc1ToJSON,
    FundingsV30Rc1,
    FundingsV30Rc1FromJSON,
    FundingsV30Rc1ToJSON,
    InvitedPositionSummaryV30Rc1,
    InvitedPositionSummaryV30Rc1FromJSON,
    InvitedPositionSummaryV30Rc1ToJSON,
    InvitedPositionV30Rc1,
    InvitedPositionV30Rc1FromJSON,
    InvitedPositionV30Rc1ToJSON,
    InvitedPositionsV30Rc1,
    InvitedPositionsV30Rc1FromJSON,
    InvitedPositionsV30Rc1ToJSON,
    MembershipSummaryV30Rc1,
    MembershipSummaryV30Rc1FromJSON,
    MembershipSummaryV30Rc1ToJSON,
    MembershipV30Rc1,
    MembershipV30Rc1FromJSON,
    MembershipV30Rc1ToJSON,
    MembershipsV30Rc1,
    MembershipsV30Rc1FromJSON,
    MembershipsV30Rc1ToJSON,
    PeerReviewSummaryV30Rc1,
    PeerReviewSummaryV30Rc1FromJSON,
    PeerReviewSummaryV30Rc1ToJSON,
    PeerReviewV30Rc1,
    PeerReviewV30Rc1FromJSON,
    PeerReviewV30Rc1ToJSON,
    PeerReviewsV30Rc1,
    PeerReviewsV30Rc1FromJSON,
    PeerReviewsV30Rc1ToJSON,
    QualificationSummaryV30Rc1,
    QualificationSummaryV30Rc1FromJSON,
    QualificationSummaryV30Rc1ToJSON,
    QualificationV30Rc1,
    QualificationV30Rc1FromJSON,
    QualificationV30Rc1ToJSON,
    QualificationsV30Rc1,
    QualificationsV30Rc1FromJSON,
    QualificationsV30Rc1ToJSON,
    RecordV30Rc1,
    RecordV30Rc1FromJSON,
    RecordV30Rc1ToJSON,
    ResearchResourceSummaryV30Rc1,
    ResearchResourceSummaryV30Rc1FromJSON,
    ResearchResourceSummaryV30Rc1ToJSON,
    ResearchResourceV30Rc1,
    ResearchResourceV30Rc1FromJSON,
    ResearchResourceV30Rc1ToJSON,
    ResearchResourcesV30Rc1,
    ResearchResourcesV30Rc1FromJSON,
    ResearchResourcesV30Rc1ToJSON,
    ServiceSummaryV30Rc1,
    ServiceSummaryV30Rc1FromJSON,
    ServiceSummaryV30Rc1ToJSON,
    ServiceV30Rc1,
    ServiceV30Rc1FromJSON,
    ServiceV30Rc1ToJSON,
    ServicesV30Rc1,
    ServicesV30Rc1FromJSON,
    ServicesV30Rc1ToJSON,
    WorkBulkV30Rc1,
    WorkBulkV30Rc1FromJSON,
    WorkBulkV30Rc1ToJSON,
    WorkSummaryV30Rc1,
    WorkSummaryV30Rc1FromJSON,
    WorkSummaryV30Rc1ToJSON,
    WorkV30Rc1,
    WorkV30Rc1FromJSON,
    WorkV30Rc1ToJSON,
    WorksSummaryV30Rc1,
    WorksSummaryV30Rc1FromJSON,
    WorksSummaryV30Rc1ToJSON,
} from '../models';

export interface SearchByQueryV3Rc1Request {
    q?: string;
}

export interface ViewActivitiesV3Rc1Request {
    orcid: string;
}

export interface ViewAddressV3Rc1Request {
    orcid: string;
    putCode: string;
}

export interface ViewAddressesV3Rc1Request {
    orcid: string;
}

export interface ViewBiographyV3Rc1Request {
    orcid: string;
}

export interface ViewClientV3Rc1Request {
    clientId: string;
}

export interface ViewDistinctionSummaryV3Rc1Request {
    orcid: string;
    putCode: string;
}

export interface ViewDistinctionV3Rc1Request {
    orcid: string;
    putCode: string;
}

export interface ViewDistinctionsV3Rc1Request {
    orcid: string;
}

export interface ViewEducationSummaryV3Rc1Request {
    orcid: string;
    putCode: number;
}

export interface ViewEducationV3Rc1Request {
    orcid: string;
    putCode: number;
}

export interface ViewEducationsV3Rc1Request {
    orcid: string;
}

export interface ViewEmailsV3Rc1Request {
    orcid: string;
}

export interface ViewEmploymentSummaryV3Rc1Request {
    orcid: string;
    putCode: number;
}

export interface ViewEmploymentV3Rc1Request {
    orcid: string;
    putCode: number;
}

export interface ViewEmploymentsV3Rc1Request {
    orcid: string;
}

export interface ViewExternalIdentifierV3Rc1Request {
    orcid: string;
    putCode: string;
}

export interface ViewExternalIdentifiersV3Rc1Request {
    orcid: string;
}

export interface ViewFundingSummaryV3Rc1Request {
    orcid: string;
    putCode: number;
}

export interface ViewFundingV3Rc1Request {
    orcid: string;
    putCode: number;
}

export interface ViewFundingsV3Rc1Request {
    orcid: string;
}

export interface ViewInvitedPositionSummaryV3Rc1Request {
    orcid: string;
    putCode: string;
}

export interface ViewInvitedPositionV3Rc1Request {
    orcid: string;
    putCode: string;
}

export interface ViewInvitedPositionsV3Rc1Request {
    orcid: string;
}

export interface ViewKeywordV3Rc1Request {
    orcid: string;
    putCode: string;
}

export interface ViewKeywordsV3Rc1Request {
    orcid: string;
}

export interface ViewMembershipSummaryV3Rc1Request {
    orcid: string;
    putCode: string;
}

export interface ViewMembershipV3Rc1Request {
    orcid: string;
    putCode: string;
}

export interface ViewMembershipsV3Rc1Request {
    orcid: string;
}

export interface ViewOtherNameV3Rc1Request {
    orcid: string;
    putCode: string;
}

export interface ViewOtherNamesV3Rc1Request {
    orcid: string;
}

export interface ViewPeerReviewSummaryV3Rc1Request {
    orcid: string;
    putCode: number;
}

export interface ViewPeerReviewV3Rc1Request {
    orcid: string;
    putCode: number;
}

export interface ViewPeerReviewsV3Rc1Request {
    orcid: string;
}

export interface ViewPersonV3Rc1Request {
    orcid: string;
}

export interface ViewPersonalDetailsV3Rc1Request {
    orcid: string;
}

export interface ViewQualificationSummaryV3Rc1Request {
    orcid: string;
    putCode: string;
}

export interface ViewQualificationV3Rc1Request {
    orcid: string;
    putCode: string;
}

export interface ViewQualificationsV3Rc1Request {
    orcid: string;
}

export interface ViewRecordV3Rc1Request {
    orcid: string;
}

export interface ViewResearchResourceSummaryV3Rc1Request {
    orcid: string;
    putCode: string;
}

export interface ViewResearchResourceV3Rc1Request {
    orcid: string;
    putCode: string;
}

export interface ViewResearchResourcesV3Rc1Request {
    orcid: string;
}

export interface ViewResearcherUrlV3Rc1Request {
    orcid: string;
    putCode: string;
}

export interface ViewResearcherUrlsV3Rc1Request {
    orcid: string;
}

export interface ViewServiceSummaryV3Rc1Request {
    orcid: string;
    putCode: string;
}

export interface ViewServiceV3Rc1Request {
    orcid: string;
    putCode: string;
}

export interface ViewServicesV3Rc1Request {
    orcid: string;
}

export interface ViewSpecifiedWorksV3Rc1Request {
    orcid: string;
    putCodes: string;
}

export interface ViewWorkSummaryV3Rc1Request {
    orcid: string;
    putCode: number;
}

export interface ViewWorkV3Rc1Request {
    orcid: string;
    putCode: number;
}

export interface ViewWorksV3Rc1Request {
    orcid: string;
}

/**
 * 
 */
export class DevelopmentPublicAPIV30Rc1Api extends runtime.BaseAPI {

    /**
     * Search records
     */
    async searchByQueryV3Rc1Raw(requestParameters: SearchByQueryV3Rc1Request): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Search records
     */
    async searchByQueryV3Rc1(requestParameters: SearchByQueryV3Rc1Request): Promise<void> {
        await this.searchByQueryV3Rc1Raw(requestParameters);
    }

    /**
     * Fetch all Activities
     */
    async viewActivitiesV3Rc1Raw(requestParameters: ViewActivitiesV3Rc1Request): Promise<runtime.ApiResponse<ActivitiesSummaryV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewActivitiesV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/activities`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivitiesSummaryV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch all Activities
     */
    async viewActivitiesV3Rc1(requestParameters: ViewActivitiesV3Rc1Request): Promise<ActivitiesSummaryV30Rc1> {
        const response = await this.viewActivitiesV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an address
     */
    async viewAddressV3Rc1Raw(requestParameters: ViewAddressV3Rc1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewAddressV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewAddressV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/address/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch an address
     */
    async viewAddressV3Rc1(requestParameters: ViewAddressV3Rc1Request): Promise<void> {
        await this.viewAddressV3Rc1Raw(requestParameters);
    }

    /**
     * Fetch all addresses
     */
    async viewAddressesV3Rc1Raw(requestParameters: ViewAddressesV3Rc1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewAddressesV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/address`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch all addresses
     */
    async viewAddressesV3Rc1(requestParameters: ViewAddressesV3Rc1Request): Promise<void> {
        await this.viewAddressesV3Rc1Raw(requestParameters);
    }

    /**
     * Get biography details
     */
    async viewBiographyV3Rc1Raw(requestParameters: ViewBiographyV3Rc1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewBiographyV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/biography`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get biography details
     */
    async viewBiographyV3Rc1(requestParameters: ViewBiographyV3Rc1Request): Promise<void> {
        await this.viewBiographyV3Rc1Raw(requestParameters);
    }

    /**
     * Fetch client details
     */
    async viewClientV3Rc1Raw(requestParameters: ViewClientV3Rc1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling viewClientV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/client/{client_id}`.replace(`{${"client_id"}}`, encodeURIComponent(String(requestParameters.clientId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch client details
     */
    async viewClientV3Rc1(requestParameters: ViewClientV3Rc1Request): Promise<void> {
        await this.viewClientV3Rc1Raw(requestParameters);
    }

    /**
     * Fetch an Distinction summary
     */
    async viewDistinctionSummaryV3Rc1Raw(requestParameters: ViewDistinctionSummaryV3Rc1Request): Promise<runtime.ApiResponse<DistinctionSummaryV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewDistinctionSummaryV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewDistinctionSummaryV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/distinction/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctionSummaryV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch an Distinction summary
     */
    async viewDistinctionSummaryV3Rc1(requestParameters: ViewDistinctionSummaryV3Rc1Request): Promise<DistinctionSummaryV30Rc1> {
        const response = await this.viewDistinctionSummaryV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Distinction
     */
    async viewDistinctionV3Rc1Raw(requestParameters: ViewDistinctionV3Rc1Request): Promise<runtime.ApiResponse<DistinctionV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewDistinctionV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewDistinctionV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/distinction/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctionV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch an Distinction
     */
    async viewDistinctionV3Rc1(requestParameters: ViewDistinctionV3Rc1Request): Promise<DistinctionV30Rc1> {
        const response = await this.viewDistinctionV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all distinctions
     */
    async viewDistinctionsV3Rc1Raw(requestParameters: ViewDistinctionsV3Rc1Request): Promise<runtime.ApiResponse<DistinctionsV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewDistinctionsV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/distinctions`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctionsV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch all distinctions
     */
    async viewDistinctionsV3Rc1(requestParameters: ViewDistinctionsV3Rc1Request): Promise<DistinctionsV30Rc1> {
        const response = await this.viewDistinctionsV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Education Summary
     */
    async viewEducationSummaryV3Rc1Raw(requestParameters: ViewEducationSummaryV3Rc1Request): Promise<runtime.ApiResponse<EducationSummaryV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEducationSummaryV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewEducationSummaryV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/education/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationSummaryV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch an Education Summary
     */
    async viewEducationSummaryV3Rc1(requestParameters: ViewEducationSummaryV3Rc1Request): Promise<EducationSummaryV30Rc1> {
        const response = await this.viewEducationSummaryV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Education
     */
    async viewEducationV3Rc1Raw(requestParameters: ViewEducationV3Rc1Request): Promise<runtime.ApiResponse<EducationV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEducationV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewEducationV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/education/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch an Education
     */
    async viewEducationV3Rc1(requestParameters: ViewEducationV3Rc1Request): Promise<EducationV30Rc1> {
        const response = await this.viewEducationV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all educations
     */
    async viewEducationsV3Rc1Raw(requestParameters: ViewEducationsV3Rc1Request): Promise<runtime.ApiResponse<EducationsSummaryV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEducationsV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/educations`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationsSummaryV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch all educations
     */
    async viewEducationsV3Rc1(requestParameters: ViewEducationsV3Rc1Request): Promise<EducationsSummaryV30Rc1> {
        const response = await this.viewEducationsV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all emails for an ORCID ID
     */
    async viewEmailsV3Rc1Raw(requestParameters: ViewEmailsV3Rc1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEmailsV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/email`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch all emails for an ORCID ID
     */
    async viewEmailsV3Rc1(requestParameters: ViewEmailsV3Rc1Request): Promise<void> {
        await this.viewEmailsV3Rc1Raw(requestParameters);
    }

    /**
     * Fetch an Employment Summary
     */
    async viewEmploymentSummaryV3Rc1Raw(requestParameters: ViewEmploymentSummaryV3Rc1Request): Promise<runtime.ApiResponse<EmploymentSummaryV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEmploymentSummaryV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewEmploymentSummaryV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/employment/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmploymentSummaryV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch an Employment Summary
     */
    async viewEmploymentSummaryV3Rc1(requestParameters: ViewEmploymentSummaryV3Rc1Request): Promise<EmploymentSummaryV30Rc1> {
        const response = await this.viewEmploymentSummaryV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Retrive a specific education representation
     * Fetch an Employment
     */
    async viewEmploymentV3Rc1Raw(requestParameters: ViewEmploymentV3Rc1Request): Promise<runtime.ApiResponse<EmploymentV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEmploymentV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewEmploymentV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/employment/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmploymentV30Rc1FromJSON(jsonValue));
    }

    /**
     * Retrive a specific education representation
     * Fetch an Employment
     */
    async viewEmploymentV3Rc1(requestParameters: ViewEmploymentV3Rc1Request): Promise<EmploymentV30Rc1> {
        const response = await this.viewEmploymentV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all employments
     */
    async viewEmploymentsV3Rc1Raw(requestParameters: ViewEmploymentsV3Rc1Request): Promise<runtime.ApiResponse<FundingsV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEmploymentsV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/employments`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FundingsV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch all employments
     */
    async viewEmploymentsV3Rc1(requestParameters: ViewEmploymentsV3Rc1Request): Promise<FundingsV30Rc1> {
        const response = await this.viewEmploymentsV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch external identifier
     */
    async viewExternalIdentifierV3Rc1Raw(requestParameters: ViewExternalIdentifierV3Rc1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewExternalIdentifierV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewExternalIdentifierV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/external-identifiers/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch external identifier
     */
    async viewExternalIdentifierV3Rc1(requestParameters: ViewExternalIdentifierV3Rc1Request): Promise<void> {
        await this.viewExternalIdentifierV3Rc1Raw(requestParameters);
    }

    /**
     * Fetch external identifiers
     */
    async viewExternalIdentifiersV3Rc1Raw(requestParameters: ViewExternalIdentifiersV3Rc1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewExternalIdentifiersV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("orcid_two_legs", ["/read-public"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/external-identifiers`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch external identifiers
     */
    async viewExternalIdentifiersV3Rc1(requestParameters: ViewExternalIdentifiersV3Rc1Request): Promise<void> {
        await this.viewExternalIdentifiersV3Rc1Raw(requestParameters);
    }

    /**
     * Fetch a Funding Summary
     */
    async viewFundingSummaryV3Rc1Raw(requestParameters: ViewFundingSummaryV3Rc1Request): Promise<runtime.ApiResponse<FundingSummaryV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewFundingSummaryV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewFundingSummaryV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/funding/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FundingSummaryV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch a Funding Summary
     */
    async viewFundingSummaryV3Rc1(requestParameters: ViewFundingSummaryV3Rc1Request): Promise<FundingSummaryV30Rc1> {
        const response = await this.viewFundingSummaryV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch a Funding
     */
    async viewFundingV3Rc1Raw(requestParameters: ViewFundingV3Rc1Request): Promise<runtime.ApiResponse<FundingV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewFundingV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewFundingV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/funding/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FundingV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch a Funding
     */
    async viewFundingV3Rc1(requestParameters: ViewFundingV3Rc1Request): Promise<FundingV30Rc1> {
        const response = await this.viewFundingV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all fundings
     */
    async viewFundingsV3Rc1Raw(requestParameters: ViewFundingsV3Rc1Request): Promise<runtime.ApiResponse<FundingsV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewFundingsV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/fundings`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FundingsV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch all fundings
     */
    async viewFundingsV3Rc1(requestParameters: ViewFundingsV3Rc1Request): Promise<FundingsV30Rc1> {
        const response = await this.viewFundingsV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an InvitedPosition summary
     */
    async viewInvitedPositionSummaryV3Rc1Raw(requestParameters: ViewInvitedPositionSummaryV3Rc1Request): Promise<runtime.ApiResponse<InvitedPositionSummaryV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewInvitedPositionSummaryV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewInvitedPositionSummaryV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/invited-position/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitedPositionSummaryV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch an InvitedPosition summary
     */
    async viewInvitedPositionSummaryV3Rc1(requestParameters: ViewInvitedPositionSummaryV3Rc1Request): Promise<InvitedPositionSummaryV30Rc1> {
        const response = await this.viewInvitedPositionSummaryV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an InvitedPosition
     */
    async viewInvitedPositionV3Rc1Raw(requestParameters: ViewInvitedPositionV3Rc1Request): Promise<runtime.ApiResponse<InvitedPositionV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewInvitedPositionV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewInvitedPositionV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/invited-position/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitedPositionV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch an InvitedPosition
     */
    async viewInvitedPositionV3Rc1(requestParameters: ViewInvitedPositionV3Rc1Request): Promise<InvitedPositionV30Rc1> {
        const response = await this.viewInvitedPositionV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all invitedPositions
     */
    async viewInvitedPositionsV3Rc1Raw(requestParameters: ViewInvitedPositionsV3Rc1Request): Promise<runtime.ApiResponse<InvitedPositionsV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewInvitedPositionsV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/invited-positions`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitedPositionsV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch all invitedPositions
     */
    async viewInvitedPositionsV3Rc1(requestParameters: ViewInvitedPositionsV3Rc1Request): Promise<InvitedPositionsV30Rc1> {
        const response = await this.viewInvitedPositionsV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch keyword
     */
    async viewKeywordV3Rc1Raw(requestParameters: ViewKeywordV3Rc1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewKeywordV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewKeywordV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/keywords/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch keyword
     */
    async viewKeywordV3Rc1(requestParameters: ViewKeywordV3Rc1Request): Promise<void> {
        await this.viewKeywordV3Rc1Raw(requestParameters);
    }

    /**
     * Fetch keywords
     */
    async viewKeywordsV3Rc1Raw(requestParameters: ViewKeywordsV3Rc1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewKeywordsV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/keywords`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch keywords
     */
    async viewKeywordsV3Rc1(requestParameters: ViewKeywordsV3Rc1Request): Promise<void> {
        await this.viewKeywordsV3Rc1Raw(requestParameters);
    }

    /**
     * Fetch an Membership summary
     */
    async viewMembershipSummaryV3Rc1Raw(requestParameters: ViewMembershipSummaryV3Rc1Request): Promise<runtime.ApiResponse<MembershipSummaryV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewMembershipSummaryV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewMembershipSummaryV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/membership/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipSummaryV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch an Membership summary
     */
    async viewMembershipSummaryV3Rc1(requestParameters: ViewMembershipSummaryV3Rc1Request): Promise<MembershipSummaryV30Rc1> {
        const response = await this.viewMembershipSummaryV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Membership
     */
    async viewMembershipV3Rc1Raw(requestParameters: ViewMembershipV3Rc1Request): Promise<runtime.ApiResponse<MembershipV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewMembershipV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewMembershipV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/membership/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch an Membership
     */
    async viewMembershipV3Rc1(requestParameters: ViewMembershipV3Rc1Request): Promise<MembershipV30Rc1> {
        const response = await this.viewMembershipV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all memberships
     */
    async viewMembershipsV3Rc1Raw(requestParameters: ViewMembershipsV3Rc1Request): Promise<runtime.ApiResponse<MembershipsV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewMembershipsV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/memberships`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipsV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch all memberships
     */
    async viewMembershipsV3Rc1(requestParameters: ViewMembershipsV3Rc1Request): Promise<MembershipsV30Rc1> {
        const response = await this.viewMembershipsV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch Other name
     */
    async viewOtherNameV3Rc1Raw(requestParameters: ViewOtherNameV3Rc1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewOtherNameV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewOtherNameV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/other-names/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch Other name
     */
    async viewOtherNameV3Rc1(requestParameters: ViewOtherNameV3Rc1Request): Promise<void> {
        await this.viewOtherNameV3Rc1Raw(requestParameters);
    }

    /**
     * Fetch Other names
     */
    async viewOtherNamesV3Rc1Raw(requestParameters: ViewOtherNamesV3Rc1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewOtherNamesV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/other-names`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch Other names
     */
    async viewOtherNamesV3Rc1(requestParameters: ViewOtherNamesV3Rc1Request): Promise<void> {
        await this.viewOtherNamesV3Rc1Raw(requestParameters);
    }

    /**
     * Fetch a Peer Review Summary
     */
    async viewPeerReviewSummaryV3Rc1Raw(requestParameters: ViewPeerReviewSummaryV3Rc1Request): Promise<runtime.ApiResponse<PeerReviewSummaryV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPeerReviewSummaryV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewPeerReviewSummaryV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/peer-review/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PeerReviewSummaryV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch a Peer Review Summary
     */
    async viewPeerReviewSummaryV3Rc1(requestParameters: ViewPeerReviewSummaryV3Rc1Request): Promise<PeerReviewSummaryV30Rc1> {
        const response = await this.viewPeerReviewSummaryV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch a Peer Review
     */
    async viewPeerReviewV3Rc1Raw(requestParameters: ViewPeerReviewV3Rc1Request): Promise<runtime.ApiResponse<PeerReviewV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPeerReviewV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewPeerReviewV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/peer-review/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PeerReviewV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch a Peer Review
     */
    async viewPeerReviewV3Rc1(requestParameters: ViewPeerReviewV3Rc1Request): Promise<PeerReviewV30Rc1> {
        const response = await this.viewPeerReviewV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all peer reviews
     */
    async viewPeerReviewsV3Rc1Raw(requestParameters: ViewPeerReviewsV3Rc1Request): Promise<runtime.ApiResponse<PeerReviewsV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPeerReviewsV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/peer-reviews`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PeerReviewsV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch all peer reviews
     */
    async viewPeerReviewsV3Rc1(requestParameters: ViewPeerReviewsV3Rc1Request): Promise<PeerReviewsV30Rc1> {
        const response = await this.viewPeerReviewsV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch person details
     */
    async viewPersonV3Rc1Raw(requestParameters: ViewPersonV3Rc1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPersonV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/person`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch person details
     */
    async viewPersonV3Rc1(requestParameters: ViewPersonV3Rc1Request): Promise<void> {
        await this.viewPersonV3Rc1Raw(requestParameters);
    }

    /**
     * Fetch personal details for an ORCID ID
     */
    async viewPersonalDetailsV3Rc1Raw(requestParameters: ViewPersonalDetailsV3Rc1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPersonalDetailsV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/personal-details`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch personal details for an ORCID ID
     */
    async viewPersonalDetailsV3Rc1(requestParameters: ViewPersonalDetailsV3Rc1Request): Promise<void> {
        await this.viewPersonalDetailsV3Rc1Raw(requestParameters);
    }

    /**
     * Fetch an Qualification summary
     */
    async viewQualificationSummaryV3Rc1Raw(requestParameters: ViewQualificationSummaryV3Rc1Request): Promise<runtime.ApiResponse<QualificationSummaryV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewQualificationSummaryV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewQualificationSummaryV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/qualification/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QualificationSummaryV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch an Qualification summary
     */
    async viewQualificationSummaryV3Rc1(requestParameters: ViewQualificationSummaryV3Rc1Request): Promise<QualificationSummaryV30Rc1> {
        const response = await this.viewQualificationSummaryV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Qualification
     */
    async viewQualificationV3Rc1Raw(requestParameters: ViewQualificationV3Rc1Request): Promise<runtime.ApiResponse<QualificationV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewQualificationV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewQualificationV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/qualification/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QualificationV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch an Qualification
     */
    async viewQualificationV3Rc1(requestParameters: ViewQualificationV3Rc1Request): Promise<QualificationV30Rc1> {
        const response = await this.viewQualificationV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all qualifications
     */
    async viewQualificationsV3Rc1Raw(requestParameters: ViewQualificationsV3Rc1Request): Promise<runtime.ApiResponse<QualificationsV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewQualificationsV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/qualifications`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QualificationsV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch all qualifications
     */
    async viewQualificationsV3Rc1(requestParameters: ViewQualificationsV3Rc1Request): Promise<QualificationsV30Rc1> {
        const response = await this.viewQualificationsV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch record details
     */
    async viewRecordV3Rc1Raw(requestParameters: ViewRecordV3Rc1Request): Promise<runtime.ApiResponse<RecordV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewRecordV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RecordV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch record details
     */
    async viewRecordV3Rc1(requestParameters: ViewRecordV3Rc1Request): Promise<RecordV30Rc1> {
        const response = await this.viewRecordV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch a Research Resource summary
     */
    async viewResearchResourceSummaryV3Rc1Raw(requestParameters: ViewResearchResourceSummaryV3Rc1Request): Promise<runtime.ApiResponse<ResearchResourceSummaryV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewResearchResourceSummaryV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewResearchResourceSummaryV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/research-resource/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResearchResourceSummaryV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch a Research Resource summary
     */
    async viewResearchResourceSummaryV3Rc1(requestParameters: ViewResearchResourceSummaryV3Rc1Request): Promise<ResearchResourceSummaryV30Rc1> {
        const response = await this.viewResearchResourceSummaryV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch a Research Resource
     */
    async viewResearchResourceV3Rc1Raw(requestParameters: ViewResearchResourceV3Rc1Request): Promise<runtime.ApiResponse<ResearchResourceV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewResearchResourceV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewResearchResourceV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/research-resource/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResearchResourceV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch a Research Resource
     */
    async viewResearchResourceV3Rc1(requestParameters: ViewResearchResourceV3Rc1Request): Promise<ResearchResourceV30Rc1> {
        const response = await this.viewResearchResourceV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all Research Resources
     */
    async viewResearchResourcesV3Rc1Raw(requestParameters: ViewResearchResourcesV3Rc1Request): Promise<runtime.ApiResponse<ResearchResourcesV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewResearchResourcesV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/research-resources`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResearchResourcesV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch all Research Resources
     */
    async viewResearchResourcesV3Rc1(requestParameters: ViewResearchResourcesV3Rc1Request): Promise<ResearchResourcesV30Rc1> {
        const response = await this.viewResearchResourcesV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch one researcher url for an ORCID ID
     */
    async viewResearcherUrlV3Rc1Raw(requestParameters: ViewResearcherUrlV3Rc1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewResearcherUrlV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewResearcherUrlV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/researcher-urls/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch one researcher url for an ORCID ID
     */
    async viewResearcherUrlV3Rc1(requestParameters: ViewResearcherUrlV3Rc1Request): Promise<void> {
        await this.viewResearcherUrlV3Rc1Raw(requestParameters);
    }

    /**
     * Fetch all researcher urls for an ORCID ID
     */
    async viewResearcherUrlsV3Rc1Raw(requestParameters: ViewResearcherUrlsV3Rc1Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewResearcherUrlsV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/researcher-urls`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch all researcher urls for an ORCID ID
     */
    async viewResearcherUrlsV3Rc1(requestParameters: ViewResearcherUrlsV3Rc1Request): Promise<void> {
        await this.viewResearcherUrlsV3Rc1Raw(requestParameters);
    }

    /**
     * Fetch an Service summary
     */
    async viewServiceSummaryV3Rc1Raw(requestParameters: ViewServiceSummaryV3Rc1Request): Promise<runtime.ApiResponse<ServiceSummaryV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewServiceSummaryV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewServiceSummaryV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/service/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceSummaryV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch an Service summary
     */
    async viewServiceSummaryV3Rc1(requestParameters: ViewServiceSummaryV3Rc1Request): Promise<ServiceSummaryV30Rc1> {
        const response = await this.viewServiceSummaryV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Service
     */
    async viewServiceV3Rc1Raw(requestParameters: ViewServiceV3Rc1Request): Promise<runtime.ApiResponse<ServiceV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewServiceV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewServiceV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/service/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch an Service
     */
    async viewServiceV3Rc1(requestParameters: ViewServiceV3Rc1Request): Promise<ServiceV30Rc1> {
        const response = await this.viewServiceV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all services
     */
    async viewServicesV3Rc1Raw(requestParameters: ViewServicesV3Rc1Request): Promise<runtime.ApiResponse<ServicesV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewServicesV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/services`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ServicesV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch all services
     */
    async viewServicesV3Rc1(requestParameters: ViewServicesV3Rc1Request): Promise<ServicesV30Rc1> {
        const response = await this.viewServicesV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch specified works
     */
    async viewSpecifiedWorksV3Rc1Raw(requestParameters: ViewSpecifiedWorksV3Rc1Request): Promise<runtime.ApiResponse<WorkBulkV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewSpecifiedWorksV3Rc1.');
        }

        if (requestParameters.putCodes === null || requestParameters.putCodes === undefined) {
            throw new runtime.RequiredError('putCodes','Required parameter requestParameters.putCodes was null or undefined when calling viewSpecifiedWorksV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/works/{putCodes}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCodes"}}`, encodeURIComponent(String(requestParameters.putCodes))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkBulkV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch specified works
     */
    async viewSpecifiedWorksV3Rc1(requestParameters: ViewSpecifiedWorksV3Rc1Request): Promise<WorkBulkV30Rc1> {
        const response = await this.viewSpecifiedWorksV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     */
    async viewStatusJsonRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/pubStatus`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async viewStatusJson(): Promise<void> {
        await this.viewStatusJsonRaw();
    }

    /**
     * Check the server status
     */
    async viewStatusTextV3Rc1Raw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check the server status
     */
    async viewStatusTextV3Rc1(): Promise<string> {
        const response = await this.viewStatusTextV3Rc1Raw();
        return await response.value();
    }

    /**
     * Fetch a Work Summary
     */
    async viewWorkSummaryV3Rc1Raw(requestParameters: ViewWorkSummaryV3Rc1Request): Promise<runtime.ApiResponse<WorkSummaryV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewWorkSummaryV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewWorkSummaryV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/work/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkSummaryV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch a Work Summary
     */
    async viewWorkSummaryV3Rc1(requestParameters: ViewWorkSummaryV3Rc1Request): Promise<WorkSummaryV30Rc1> {
        const response = await this.viewWorkSummaryV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * More notes about this method
     * Fetch a Work
     */
    async viewWorkV3Rc1Raw(requestParameters: ViewWorkV3Rc1Request): Promise<runtime.ApiResponse<WorkV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewWorkV3Rc1.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewWorkV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/work/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkV30Rc1FromJSON(jsonValue));
    }

    /**
     * More notes about this method
     * Fetch a Work
     */
    async viewWorkV3Rc1(requestParameters: ViewWorkV3Rc1Request): Promise<WorkV30Rc1> {
        const response = await this.viewWorkV3Rc1Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all works
     */
    async viewWorksV3Rc1Raw(requestParameters: ViewWorksV3Rc1Request): Promise<runtime.ApiResponse<WorksSummaryV30Rc1>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewWorksV3Rc1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc1/{orcid}/works`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorksSummaryV30Rc1FromJSON(jsonValue));
    }

    /**
     * Fetch all works
     */
    async viewWorksV3Rc1(requestParameters: ViewWorksV3Rc1Request): Promise<WorksSummaryV30Rc1> {
        const response = await this.viewWorksV3Rc1Raw(requestParameters);
        return await response.value();
    }

}
