/* tslint:disable */
/* eslint-disable */
/**
 * ORCID Public
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ActivitiesSummaryV20,
    ActivitiesSummaryV20FromJSON,
    ActivitiesSummaryV20ToJSON,
    AddressV20,
    AddressV20FromJSON,
    AddressV20ToJSON,
    AddressesV20,
    AddressesV20FromJSON,
    AddressesV20ToJSON,
    BiographyV20,
    BiographyV20FromJSON,
    BiographyV20ToJSON,
    ClientSummary,
    ClientSummaryFromJSON,
    ClientSummaryToJSON,
    EducationSummaryV20,
    EducationSummaryV20FromJSON,
    EducationSummaryV20ToJSON,
    EducationV20,
    EducationV20FromJSON,
    EducationV20ToJSON,
    EducationsSummaryV20,
    EducationsSummaryV20FromJSON,
    EducationsSummaryV20ToJSON,
    EmailsV20,
    EmailsV20FromJSON,
    EmailsV20ToJSON,
    EmploymentSummaryV20,
    EmploymentSummaryV20FromJSON,
    EmploymentSummaryV20ToJSON,
    EmploymentV20,
    EmploymentV20FromJSON,
    EmploymentV20ToJSON,
    EmploymentsSummaryV20,
    EmploymentsSummaryV20FromJSON,
    EmploymentsSummaryV20ToJSON,
    FundingSummaryV20,
    FundingSummaryV20FromJSON,
    FundingSummaryV20ToJSON,
    FundingV20,
    FundingV20FromJSON,
    FundingV20ToJSON,
    FundingsV20,
    FundingsV20FromJSON,
    FundingsV20ToJSON,
    KeywordV20,
    KeywordV20FromJSON,
    KeywordV20ToJSON,
    KeywordsV20,
    KeywordsV20FromJSON,
    KeywordsV20ToJSON,
    OtherNameV20,
    OtherNameV20FromJSON,
    OtherNameV20ToJSON,
    OtherNamesV20,
    OtherNamesV20FromJSON,
    OtherNamesV20ToJSON,
    PeerReviewSummaryV20,
    PeerReviewSummaryV20FromJSON,
    PeerReviewSummaryV20ToJSON,
    PeerReviewV20,
    PeerReviewV20FromJSON,
    PeerReviewV20ToJSON,
    PeerReviewsV20,
    PeerReviewsV20FromJSON,
    PeerReviewsV20ToJSON,
    PersonExternalIdentifierV20,
    PersonExternalIdentifierV20FromJSON,
    PersonExternalIdentifierV20ToJSON,
    PersonExternalIdentifiersV20,
    PersonExternalIdentifiersV20FromJSON,
    PersonExternalIdentifiersV20ToJSON,
    PersonV20,
    PersonV20FromJSON,
    PersonV20ToJSON,
    PersonalDetailsV20,
    PersonalDetailsV20FromJSON,
    PersonalDetailsV20ToJSON,
    RecordV20,
    RecordV20FromJSON,
    RecordV20ToJSON,
    ResearcherUrlsV20,
    ResearcherUrlsV20FromJSON,
    ResearcherUrlsV20ToJSON,
    SearchV20,
    SearchV20FromJSON,
    SearchV20ToJSON,
    WorkBulkV20,
    WorkBulkV20FromJSON,
    WorkBulkV20ToJSON,
    WorkSummaryV20,
    WorkSummaryV20FromJSON,
    WorkSummaryV20ToJSON,
    WorkV20,
    WorkV20FromJSON,
    WorkV20ToJSON,
    WorksSummaryV20,
    WorksSummaryV20FromJSON,
    WorksSummaryV20ToJSON,
} from '../models';

export interface SearchByQueryRequest {
    q?: string;
}

export interface ViewActivitiesRequest {
    orcid: string;
}

export interface ViewAddressRequest {
    orcid: string;
    putCode: string;
}

export interface ViewAddressesRequest {
    orcid: string;
}

export interface ViewBiographyRequest {
    orcid: string;
}

export interface ViewClientRequest {
    clientId: string;
}

export interface ViewEducationRequest {
    orcid: string;
    putCode: number;
}

export interface ViewEducationSummaryRequest {
    orcid: string;
    putCode: number;
}

export interface ViewEducationsRequest {
    orcid: string;
}

export interface ViewEmailsRequest {
    orcid: string;
}

export interface ViewEmploymentRequest {
    orcid: string;
    putCode: number;
}

export interface ViewEmploymentSummaryRequest {
    orcid: string;
    putCode: number;
}

export interface ViewEmploymentsRequest {
    orcid: string;
}

export interface ViewExternalIdentifierRequest {
    orcid: string;
    putCode: string;
}

export interface ViewExternalIdentifiersRequest {
    orcid: string;
}

export interface ViewFundingRequest {
    orcid: string;
    putCode: number;
}

export interface ViewFundingSummaryRequest {
    orcid: string;
    putCode: number;
}

export interface ViewFundingsRequest {
    orcid: string;
}

export interface ViewKeywordRequest {
    orcid: string;
    putCode: string;
}

export interface ViewKeywordsRequest {
    orcid: string;
}

export interface ViewOtherNameRequest {
    orcid: string;
    putCode: string;
}

export interface ViewOtherNamesRequest {
    orcid: string;
}

export interface ViewPeerReviewRequest {
    orcid: string;
    putCode: number;
}

export interface ViewPeerReviewSummaryRequest {
    orcid: string;
    putCode: number;
}

export interface ViewPeerReviewsRequest {
    orcid: string;
}

export interface ViewPersonRequest {
    orcid: string;
}

export interface ViewPersonalDetailsRequest {
    orcid: string;
}

export interface ViewRecordRequest {
    orcid: string;
}

export interface ViewResearcherUrlRequest {
    orcid: string;
    putCode: string;
}

export interface ViewResearcherUrlsRequest {
    orcid: string;
}

export interface ViewSpecifiedWorksRequest {
    orcid: string;
    putCodes: string;
}

export interface ViewWorkRequest {
    orcid: string;
    putCode: number;
}

export interface ViewWorkSummaryRequest {
    orcid: string;
    putCode: number;
}

export interface ViewWorksRequest {
    orcid: string;
}

/**
 * 
 */
export class PublicAPIV20Api extends runtime.BaseAPI {

    /**
     * Search records
     */
    async searchByQueryRaw(requestParameters: SearchByQueryRequest): Promise<runtime.ApiResponse<SearchV20>> {
        const queryParameters: any = {};

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchV20FromJSON(jsonValue));
    }

    /**
     * Search records
     */
    async searchByQuery(requestParameters: SearchByQueryRequest): Promise<SearchV20> {
        const response = await this.searchByQueryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all Activities
     */
    async viewActivitiesRaw(requestParameters: ViewActivitiesRequest): Promise<runtime.ApiResponse<ActivitiesSummaryV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewActivities.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/activities`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivitiesSummaryV20FromJSON(jsonValue));
    }

    /**
     * Fetch all Activities
     */
    async viewActivities(requestParameters: ViewActivitiesRequest): Promise<ActivitiesSummaryV20> {
        const response = await this.viewActivitiesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an address
     */
    async viewAddressRaw(requestParameters: ViewAddressRequest): Promise<runtime.ApiResponse<AddressV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewAddress.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewAddress.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/address/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressV20FromJSON(jsonValue));
    }

    /**
     * Fetch an address
     */
    async viewAddress(requestParameters: ViewAddressRequest): Promise<AddressV20> {
        const response = await this.viewAddressRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all addresses
     */
    async viewAddressesRaw(requestParameters: ViewAddressesRequest): Promise<runtime.ApiResponse<AddressesV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewAddresses.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/address`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressesV20FromJSON(jsonValue));
    }

    /**
     * Fetch all addresses
     */
    async viewAddresses(requestParameters: ViewAddressesRequest): Promise<AddressesV20> {
        const response = await this.viewAddressesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get biography details
     */
    async viewBiographyRaw(requestParameters: ViewBiographyRequest): Promise<runtime.ApiResponse<BiographyV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewBiography.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/biography`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BiographyV20FromJSON(jsonValue));
    }

    /**
     * Get biography details
     */
    async viewBiography(requestParameters: ViewBiographyRequest): Promise<BiographyV20> {
        const response = await this.viewBiographyRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch client details
     */
    async viewClientRaw(requestParameters: ViewClientRequest): Promise<runtime.ApiResponse<ClientSummary>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling viewClient.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/client/{client_id}`.replace(`{${"client_id"}}`, encodeURIComponent(String(requestParameters.clientId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientSummaryFromJSON(jsonValue));
    }

    /**
     * Fetch client details
     */
    async viewClient(requestParameters: ViewClientRequest): Promise<ClientSummary> {
        const response = await this.viewClientRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Education
     */
    async viewEducationRaw(requestParameters: ViewEducationRequest): Promise<runtime.ApiResponse<EducationV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEducation.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewEducation.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/education/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationV20FromJSON(jsonValue));
    }

    /**
     * Fetch an Education
     */
    async viewEducation(requestParameters: ViewEducationRequest): Promise<EducationV20> {
        const response = await this.viewEducationRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Education Summary
     */
    async viewEducationSummaryRaw(requestParameters: ViewEducationSummaryRequest): Promise<runtime.ApiResponse<EducationSummaryV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEducationSummary.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewEducationSummary.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/education/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationSummaryV20FromJSON(jsonValue));
    }

    /**
     * Fetch an Education Summary
     */
    async viewEducationSummary(requestParameters: ViewEducationSummaryRequest): Promise<EducationSummaryV20> {
        const response = await this.viewEducationSummaryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all educations
     */
    async viewEducationsRaw(requestParameters: ViewEducationsRequest): Promise<runtime.ApiResponse<EducationsSummaryV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEducations.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/educations`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationsSummaryV20FromJSON(jsonValue));
    }

    /**
     * Fetch all educations
     */
    async viewEducations(requestParameters: ViewEducationsRequest): Promise<EducationsSummaryV20> {
        const response = await this.viewEducationsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all emails for an ORCID ID
     */
    async viewEmailsRaw(requestParameters: ViewEmailsRequest): Promise<runtime.ApiResponse<EmailsV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEmails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/email`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailsV20FromJSON(jsonValue));
    }

    /**
     * Fetch all emails for an ORCID ID
     */
    async viewEmails(requestParameters: ViewEmailsRequest): Promise<EmailsV20> {
        const response = await this.viewEmailsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrive a specific education representation
     * Fetch an Employment
     */
    async viewEmploymentRaw(requestParameters: ViewEmploymentRequest): Promise<runtime.ApiResponse<EmploymentV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEmployment.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewEmployment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/employment/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmploymentV20FromJSON(jsonValue));
    }

    /**
     * Retrive a specific education representation
     * Fetch an Employment
     */
    async viewEmployment(requestParameters: ViewEmploymentRequest): Promise<EmploymentV20> {
        const response = await this.viewEmploymentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Employment Summary
     */
    async viewEmploymentSummaryRaw(requestParameters: ViewEmploymentSummaryRequest): Promise<runtime.ApiResponse<EmploymentSummaryV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEmploymentSummary.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewEmploymentSummary.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/employment/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmploymentSummaryV20FromJSON(jsonValue));
    }

    /**
     * Fetch an Employment Summary
     */
    async viewEmploymentSummary(requestParameters: ViewEmploymentSummaryRequest): Promise<EmploymentSummaryV20> {
        const response = await this.viewEmploymentSummaryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all employments
     */
    async viewEmploymentsRaw(requestParameters: ViewEmploymentsRequest): Promise<runtime.ApiResponse<EmploymentsSummaryV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEmployments.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/employments`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmploymentsSummaryV20FromJSON(jsonValue));
    }

    /**
     * Fetch all employments
     */
    async viewEmployments(requestParameters: ViewEmploymentsRequest): Promise<EmploymentsSummaryV20> {
        const response = await this.viewEmploymentsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch external identifier
     */
    async viewExternalIdentifierRaw(requestParameters: ViewExternalIdentifierRequest): Promise<runtime.ApiResponse<PersonExternalIdentifierV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewExternalIdentifier.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewExternalIdentifier.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/external-identifiers/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonExternalIdentifierV20FromJSON(jsonValue));
    }

    /**
     * Fetch external identifier
     */
    async viewExternalIdentifier(requestParameters: ViewExternalIdentifierRequest): Promise<PersonExternalIdentifierV20> {
        const response = await this.viewExternalIdentifierRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch external identifiers
     */
    async viewExternalIdentifiersRaw(requestParameters: ViewExternalIdentifiersRequest): Promise<runtime.ApiResponse<PersonExternalIdentifiersV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewExternalIdentifiers.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("orcid_two_legs", ["/read-public"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v2.0/{orcid}/external-identifiers`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonExternalIdentifiersV20FromJSON(jsonValue));
    }

    /**
     * Fetch external identifiers
     */
    async viewExternalIdentifiers(requestParameters: ViewExternalIdentifiersRequest): Promise<PersonExternalIdentifiersV20> {
        const response = await this.viewExternalIdentifiersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch a Funding
     */
    async viewFundingRaw(requestParameters: ViewFundingRequest): Promise<runtime.ApiResponse<FundingV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewFunding.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewFunding.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/funding/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FundingV20FromJSON(jsonValue));
    }

    /**
     * Fetch a Funding
     */
    async viewFunding(requestParameters: ViewFundingRequest): Promise<FundingV20> {
        const response = await this.viewFundingRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch a Funding Summary
     */
    async viewFundingSummaryRaw(requestParameters: ViewFundingSummaryRequest): Promise<runtime.ApiResponse<FundingSummaryV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewFundingSummary.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewFundingSummary.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/funding/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FundingSummaryV20FromJSON(jsonValue));
    }

    /**
     * Fetch a Funding Summary
     */
    async viewFundingSummary(requestParameters: ViewFundingSummaryRequest): Promise<FundingSummaryV20> {
        const response = await this.viewFundingSummaryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all fundings
     */
    async viewFundingsRaw(requestParameters: ViewFundingsRequest): Promise<runtime.ApiResponse<FundingsV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewFundings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/fundings`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FundingsV20FromJSON(jsonValue));
    }

    /**
     * Fetch all fundings
     */
    async viewFundings(requestParameters: ViewFundingsRequest): Promise<FundingsV20> {
        const response = await this.viewFundingsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch keyword
     */
    async viewKeywordRaw(requestParameters: ViewKeywordRequest): Promise<runtime.ApiResponse<KeywordV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewKeyword.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewKeyword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/keywords/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => KeywordV20FromJSON(jsonValue));
    }

    /**
     * Fetch keyword
     */
    async viewKeyword(requestParameters: ViewKeywordRequest): Promise<KeywordV20> {
        const response = await this.viewKeywordRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch keywords
     */
    async viewKeywordsRaw(requestParameters: ViewKeywordsRequest): Promise<runtime.ApiResponse<KeywordsV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewKeywords.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/keywords`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => KeywordsV20FromJSON(jsonValue));
    }

    /**
     * Fetch keywords
     */
    async viewKeywords(requestParameters: ViewKeywordsRequest): Promise<KeywordsV20> {
        const response = await this.viewKeywordsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch Other name
     */
    async viewOtherNameRaw(requestParameters: ViewOtherNameRequest): Promise<runtime.ApiResponse<OtherNameV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewOtherName.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewOtherName.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/other-names/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OtherNameV20FromJSON(jsonValue));
    }

    /**
     * Fetch Other name
     */
    async viewOtherName(requestParameters: ViewOtherNameRequest): Promise<OtherNameV20> {
        const response = await this.viewOtherNameRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch Other names
     */
    async viewOtherNamesRaw(requestParameters: ViewOtherNamesRequest): Promise<runtime.ApiResponse<OtherNamesV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewOtherNames.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/other-names`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OtherNamesV20FromJSON(jsonValue));
    }

    /**
     * Fetch Other names
     */
    async viewOtherNames(requestParameters: ViewOtherNamesRequest): Promise<OtherNamesV20> {
        const response = await this.viewOtherNamesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch a Peer Review
     */
    async viewPeerReviewRaw(requestParameters: ViewPeerReviewRequest): Promise<runtime.ApiResponse<PeerReviewV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPeerReview.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewPeerReview.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/peer-review/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PeerReviewV20FromJSON(jsonValue));
    }

    /**
     * Fetch a Peer Review
     */
    async viewPeerReview(requestParameters: ViewPeerReviewRequest): Promise<PeerReviewV20> {
        const response = await this.viewPeerReviewRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch a Peer Review Summary
     */
    async viewPeerReviewSummaryRaw(requestParameters: ViewPeerReviewSummaryRequest): Promise<runtime.ApiResponse<PeerReviewSummaryV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPeerReviewSummary.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewPeerReviewSummary.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/peer-review/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PeerReviewSummaryV20FromJSON(jsonValue));
    }

    /**
     * Fetch a Peer Review Summary
     */
    async viewPeerReviewSummary(requestParameters: ViewPeerReviewSummaryRequest): Promise<PeerReviewSummaryV20> {
        const response = await this.viewPeerReviewSummaryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all peer reviews
     */
    async viewPeerReviewsRaw(requestParameters: ViewPeerReviewsRequest): Promise<runtime.ApiResponse<PeerReviewsV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPeerReviews.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/peer-reviews`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PeerReviewsV20FromJSON(jsonValue));
    }

    /**
     * Fetch all peer reviews
     */
    async viewPeerReviews(requestParameters: ViewPeerReviewsRequest): Promise<PeerReviewsV20> {
        const response = await this.viewPeerReviewsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch person details
     */
    async viewPersonRaw(requestParameters: ViewPersonRequest): Promise<runtime.ApiResponse<PersonV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPerson.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/person`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonV20FromJSON(jsonValue));
    }

    /**
     * Fetch person details
     */
    async viewPerson(requestParameters: ViewPersonRequest): Promise<PersonV20> {
        const response = await this.viewPersonRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch personal details for an ORCID ID
     */
    async viewPersonalDetailsRaw(requestParameters: ViewPersonalDetailsRequest): Promise<runtime.ApiResponse<PersonalDetailsV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPersonalDetails.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/personal-details`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonalDetailsV20FromJSON(jsonValue));
    }

    /**
     * Fetch personal details for an ORCID ID
     */
    async viewPersonalDetails(requestParameters: ViewPersonalDetailsRequest): Promise<PersonalDetailsV20> {
        const response = await this.viewPersonalDetailsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch record details
     */
    async viewRecordRaw(requestParameters: ViewRecordRequest): Promise<runtime.ApiResponse<RecordV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewRecord.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RecordV20FromJSON(jsonValue));
    }

    /**
     * Fetch record details
     */
    async viewRecord(requestParameters: ViewRecordRequest): Promise<RecordV20> {
        const response = await this.viewRecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch one researcher url for an ORCID ID
     */
    async viewResearcherUrlRaw(requestParameters: ViewResearcherUrlRequest): Promise<runtime.ApiResponse<ResearcherUrlsV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewResearcherUrl.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewResearcherUrl.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/researcher-urls/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResearcherUrlsV20FromJSON(jsonValue));
    }

    /**
     * Fetch one researcher url for an ORCID ID
     */
    async viewResearcherUrl(requestParameters: ViewResearcherUrlRequest): Promise<ResearcherUrlsV20> {
        const response = await this.viewResearcherUrlRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all researcher urls for an ORCID ID
     */
    async viewResearcherUrlsRaw(requestParameters: ViewResearcherUrlsRequest): Promise<runtime.ApiResponse<ResearcherUrlsV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewResearcherUrls.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/researcher-urls`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResearcherUrlsV20FromJSON(jsonValue));
    }

    /**
     * Fetch all researcher urls for an ORCID ID
     */
    async viewResearcherUrls(requestParameters: ViewResearcherUrlsRequest): Promise<ResearcherUrlsV20> {
        const response = await this.viewResearcherUrlsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch specified works
     */
    async viewSpecifiedWorksRaw(requestParameters: ViewSpecifiedWorksRequest): Promise<runtime.ApiResponse<WorkBulkV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewSpecifiedWorks.');
        }

        if (requestParameters.putCodes === null || requestParameters.putCodes === undefined) {
            throw new runtime.RequiredError('putCodes','Required parameter requestParameters.putCodes was null or undefined when calling viewSpecifiedWorks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/works/{putCodes}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCodes"}}`, encodeURIComponent(String(requestParameters.putCodes))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkBulkV20FromJSON(jsonValue));
    }

    /**
     * Fetch specified works
     */
    async viewSpecifiedWorks(requestParameters: ViewSpecifiedWorksRequest): Promise<WorkBulkV20> {
        const response = await this.viewSpecifiedWorksRaw(requestParameters);
        return await response.value();
    }

    /**
     * Check the server status
     */
    async viewStatusTextRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check the server status
     */
    async viewStatusText(): Promise<string> {
        const response = await this.viewStatusTextRaw();
        return await response.value();
    }

    /**
     * More notes about this method
     * Fetch a Work
     */
    async viewWorkRaw(requestParameters: ViewWorkRequest): Promise<runtime.ApiResponse<WorkV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewWork.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewWork.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/work/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkV20FromJSON(jsonValue));
    }

    /**
     * More notes about this method
     * Fetch a Work
     */
    async viewWork(requestParameters: ViewWorkRequest): Promise<WorkV20> {
        const response = await this.viewWorkRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch a Work Summary
     */
    async viewWorkSummaryRaw(requestParameters: ViewWorkSummaryRequest): Promise<runtime.ApiResponse<WorkSummaryV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewWorkSummary.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewWorkSummary.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/work/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkSummaryV20FromJSON(jsonValue));
    }

    /**
     * Fetch a Work Summary
     */
    async viewWorkSummary(requestParameters: ViewWorkSummaryRequest): Promise<WorkSummaryV20> {
        const response = await this.viewWorkSummaryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all works
     */
    async viewWorksRaw(requestParameters: ViewWorksRequest): Promise<runtime.ApiResponse<WorksSummaryV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewWorks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.0/{orcid}/works`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorksSummaryV20FromJSON(jsonValue));
    }

    /**
     * Fetch all works
     */
    async viewWorks(requestParameters: ViewWorksRequest): Promise<WorksSummaryV20> {
        const response = await this.viewWorksRaw(requestParameters);
        return await response.value();
    }

}
