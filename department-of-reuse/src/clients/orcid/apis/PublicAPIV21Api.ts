/* tslint:disable */
/* eslint-disable */
/**
 * ORCID Public
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ActivitiesSummaryV20,
    ActivitiesSummaryV20FromJSON,
    ActivitiesSummaryV20ToJSON,
    AddressV20,
    AddressV20FromJSON,
    AddressV20ToJSON,
    AddressesV20,
    AddressesV20FromJSON,
    AddressesV20ToJSON,
    BiographyV20,
    BiographyV20FromJSON,
    BiographyV20ToJSON,
    ClientSummary,
    ClientSummaryFromJSON,
    ClientSummaryToJSON,
    EducationSummaryV20,
    EducationSummaryV20FromJSON,
    EducationSummaryV20ToJSON,
    EducationV20,
    EducationV20FromJSON,
    EducationV20ToJSON,
    EducationsSummaryV20,
    EducationsSummaryV20FromJSON,
    EducationsSummaryV20ToJSON,
    EmailsV20,
    EmailsV20FromJSON,
    EmailsV20ToJSON,
    EmploymentSummaryV20,
    EmploymentSummaryV20FromJSON,
    EmploymentSummaryV20ToJSON,
    EmploymentV20,
    EmploymentV20FromJSON,
    EmploymentV20ToJSON,
    EmploymentsSummaryV20,
    EmploymentsSummaryV20FromJSON,
    EmploymentsSummaryV20ToJSON,
    FundingSummaryV20,
    FundingSummaryV20FromJSON,
    FundingSummaryV20ToJSON,
    FundingV20,
    FundingV20FromJSON,
    FundingV20ToJSON,
    FundingsV20,
    FundingsV20FromJSON,
    FundingsV20ToJSON,
    KeywordV20,
    KeywordV20FromJSON,
    KeywordV20ToJSON,
    KeywordsV20,
    KeywordsV20FromJSON,
    KeywordsV20ToJSON,
    OtherNameV20,
    OtherNameV20FromJSON,
    OtherNameV20ToJSON,
    OtherNamesV20,
    OtherNamesV20FromJSON,
    OtherNamesV20ToJSON,
    PeerReviewSummaryV20,
    PeerReviewSummaryV20FromJSON,
    PeerReviewSummaryV20ToJSON,
    PeerReviewV20,
    PeerReviewV20FromJSON,
    PeerReviewV20ToJSON,
    PeerReviewsV20,
    PeerReviewsV20FromJSON,
    PeerReviewsV20ToJSON,
    PersonExternalIdentifierV20,
    PersonExternalIdentifierV20FromJSON,
    PersonExternalIdentifierV20ToJSON,
    PersonExternalIdentifiersV20,
    PersonExternalIdentifiersV20FromJSON,
    PersonExternalIdentifiersV20ToJSON,
    PersonV20,
    PersonV20FromJSON,
    PersonV20ToJSON,
    PersonalDetailsV20,
    PersonalDetailsV20FromJSON,
    PersonalDetailsV20ToJSON,
    RecordV20,
    RecordV20FromJSON,
    RecordV20ToJSON,
    ResearcherUrlsV20,
    ResearcherUrlsV20FromJSON,
    ResearcherUrlsV20ToJSON,
    SearchV20,
    SearchV20FromJSON,
    SearchV20ToJSON,
    WorkBulkV20,
    WorkBulkV20FromJSON,
    WorkBulkV20ToJSON,
    WorkSummaryV20,
    WorkSummaryV20FromJSON,
    WorkSummaryV20ToJSON,
    WorkV20,
    WorkV20FromJSON,
    WorkV20ToJSON,
    WorksSummaryV20,
    WorksSummaryV20FromJSON,
    WorksSummaryV20ToJSON,
} from '../models';

export interface SearchByQueryV21Request {
    q?: string;
}

export interface ViewActivitiesV21Request {
    orcid: string;
}

export interface ViewAddressV21Request {
    orcid: string;
    putCode: string;
}

export interface ViewAddressesV21Request {
    orcid: string;
}

export interface ViewBiographyV21Request {
    orcid: string;
}

export interface ViewClientV21Request {
    clientId: string;
}

export interface ViewEducationSummaryV21Request {
    orcid: string;
    putCode: number;
}

export interface ViewEducationV21Request {
    orcid: string;
    putCode: number;
}

export interface ViewEducationsV21Request {
    orcid: string;
}

export interface ViewEmailsV21Request {
    orcid: string;
}

export interface ViewEmploymentSummaryV21Request {
    orcid: string;
    putCode: number;
}

export interface ViewEmploymentV21Request {
    orcid: string;
    putCode: number;
}

export interface ViewEmploymentsV21Request {
    orcid: string;
}

export interface ViewExternalIdentifierV21Request {
    orcid: string;
    putCode: string;
}

export interface ViewExternalIdentifiersV21Request {
    orcid: string;
}

export interface ViewFundingSummaryV21Request {
    orcid: string;
    putCode: number;
}

export interface ViewFundingV21Request {
    orcid: string;
    putCode: number;
}

export interface ViewFundingsV21Request {
    orcid: string;
}

export interface ViewKeywordV21Request {
    orcid: string;
    putCode: string;
}

export interface ViewKeywordsV21Request {
    orcid: string;
}

export interface ViewOtherNameV21Request {
    orcid: string;
    putCode: string;
}

export interface ViewOtherNamesV21Request {
    orcid: string;
}

export interface ViewPeerReviewSummaryV21Request {
    orcid: string;
    putCode: number;
}

export interface ViewPeerReviewV21Request {
    orcid: string;
    putCode: number;
}

export interface ViewPeerReviewsV21Request {
    orcid: string;
}

export interface ViewPersonV21Request {
    orcid: string;
}

export interface ViewPersonalDetailsV21Request {
    orcid: string;
}

export interface ViewRecordV21Request {
    orcid: string;
}

export interface ViewResearcherUrlV21Request {
    orcid: string;
    putCode: string;
}

export interface ViewResearcherUrlsV21Request {
    orcid: string;
}

export interface ViewSpecifiedWorksV21Request {
    orcid: string;
    putCodes: string;
}

export interface ViewWorkSummaryV21Request {
    orcid: string;
    putCode: number;
}

export interface ViewWorkV21Request {
    orcid: string;
    putCode: number;
}

export interface ViewWorksV21Request {
    orcid: string;
}

/**
 * 
 */
export class PublicAPIV21Api extends runtime.BaseAPI {

    /**
     * Search records
     */
    async searchByQueryV21Raw(requestParameters: SearchByQueryV21Request): Promise<runtime.ApiResponse<SearchV20>> {
        const queryParameters: any = {};

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SearchV20FromJSON(jsonValue));
    }

    /**
     * Search records
     */
    async searchByQueryV21(requestParameters: SearchByQueryV21Request): Promise<SearchV20> {
        const response = await this.searchByQueryV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all Activities
     */
    async viewActivitiesV21Raw(requestParameters: ViewActivitiesV21Request): Promise<runtime.ApiResponse<ActivitiesSummaryV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewActivitiesV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/activities`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivitiesSummaryV20FromJSON(jsonValue));
    }

    /**
     * Fetch all Activities
     */
    async viewActivitiesV21(requestParameters: ViewActivitiesV21Request): Promise<ActivitiesSummaryV20> {
        const response = await this.viewActivitiesV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an address
     */
    async viewAddressV21Raw(requestParameters: ViewAddressV21Request): Promise<runtime.ApiResponse<AddressV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewAddressV21.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewAddressV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/address/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressV20FromJSON(jsonValue));
    }

    /**
     * Fetch an address
     */
    async viewAddressV21(requestParameters: ViewAddressV21Request): Promise<AddressV20> {
        const response = await this.viewAddressV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all addresses
     */
    async viewAddressesV21Raw(requestParameters: ViewAddressesV21Request): Promise<runtime.ApiResponse<AddressesV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewAddressesV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/address`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AddressesV20FromJSON(jsonValue));
    }

    /**
     * Fetch all addresses
     */
    async viewAddressesV21(requestParameters: ViewAddressesV21Request): Promise<AddressesV20> {
        const response = await this.viewAddressesV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Get biography details
     */
    async viewBiographyV21Raw(requestParameters: ViewBiographyV21Request): Promise<runtime.ApiResponse<BiographyV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewBiographyV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/biography`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BiographyV20FromJSON(jsonValue));
    }

    /**
     * Get biography details
     */
    async viewBiographyV21(requestParameters: ViewBiographyV21Request): Promise<BiographyV20> {
        const response = await this.viewBiographyV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch client details
     */
    async viewClientV21Raw(requestParameters: ViewClientV21Request): Promise<runtime.ApiResponse<ClientSummary>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling viewClientV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/client/{client_id}`.replace(`{${"client_id"}}`, encodeURIComponent(String(requestParameters.clientId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ClientSummaryFromJSON(jsonValue));
    }

    /**
     * Fetch client details
     */
    async viewClientV21(requestParameters: ViewClientV21Request): Promise<ClientSummary> {
        const response = await this.viewClientV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Education Summary
     */
    async viewEducationSummaryV21Raw(requestParameters: ViewEducationSummaryV21Request): Promise<runtime.ApiResponse<EducationSummaryV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEducationSummaryV21.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewEducationSummaryV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/education/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationSummaryV20FromJSON(jsonValue));
    }

    /**
     * Fetch an Education Summary
     */
    async viewEducationSummaryV21(requestParameters: ViewEducationSummaryV21Request): Promise<EducationSummaryV20> {
        const response = await this.viewEducationSummaryV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Education
     */
    async viewEducationV21Raw(requestParameters: ViewEducationV21Request): Promise<runtime.ApiResponse<EducationV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEducationV21.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewEducationV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/education/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationV20FromJSON(jsonValue));
    }

    /**
     * Fetch an Education
     */
    async viewEducationV21(requestParameters: ViewEducationV21Request): Promise<EducationV20> {
        const response = await this.viewEducationV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all educations
     */
    async viewEducationsV21Raw(requestParameters: ViewEducationsV21Request): Promise<runtime.ApiResponse<EducationsSummaryV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEducationsV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/educations`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationsSummaryV20FromJSON(jsonValue));
    }

    /**
     * Fetch all educations
     */
    async viewEducationsV21(requestParameters: ViewEducationsV21Request): Promise<EducationsSummaryV20> {
        const response = await this.viewEducationsV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all emails for an ORCID ID
     */
    async viewEmailsV21Raw(requestParameters: ViewEmailsV21Request): Promise<runtime.ApiResponse<EmailsV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEmailsV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/email`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailsV20FromJSON(jsonValue));
    }

    /**
     * Fetch all emails for an ORCID ID
     */
    async viewEmailsV21(requestParameters: ViewEmailsV21Request): Promise<EmailsV20> {
        const response = await this.viewEmailsV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Employment Summary
     */
    async viewEmploymentSummaryV21Raw(requestParameters: ViewEmploymentSummaryV21Request): Promise<runtime.ApiResponse<EmploymentSummaryV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEmploymentSummaryV21.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewEmploymentSummaryV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/employment/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmploymentSummaryV20FromJSON(jsonValue));
    }

    /**
     * Fetch an Employment Summary
     */
    async viewEmploymentSummaryV21(requestParameters: ViewEmploymentSummaryV21Request): Promise<EmploymentSummaryV20> {
        const response = await this.viewEmploymentSummaryV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Retrive a specific education representation
     * Fetch an Employment
     */
    async viewEmploymentV21Raw(requestParameters: ViewEmploymentV21Request): Promise<runtime.ApiResponse<EmploymentV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEmploymentV21.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewEmploymentV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/employment/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmploymentV20FromJSON(jsonValue));
    }

    /**
     * Retrive a specific education representation
     * Fetch an Employment
     */
    async viewEmploymentV21(requestParameters: ViewEmploymentV21Request): Promise<EmploymentV20> {
        const response = await this.viewEmploymentV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all employments
     */
    async viewEmploymentsV21Raw(requestParameters: ViewEmploymentsV21Request): Promise<runtime.ApiResponse<EmploymentsSummaryV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEmploymentsV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/employments`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmploymentsSummaryV20FromJSON(jsonValue));
    }

    /**
     * Fetch all employments
     */
    async viewEmploymentsV21(requestParameters: ViewEmploymentsV21Request): Promise<EmploymentsSummaryV20> {
        const response = await this.viewEmploymentsV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch external identifier
     */
    async viewExternalIdentifierV21Raw(requestParameters: ViewExternalIdentifierV21Request): Promise<runtime.ApiResponse<PersonExternalIdentifierV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewExternalIdentifierV21.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewExternalIdentifierV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/external-identifiers/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonExternalIdentifierV20FromJSON(jsonValue));
    }

    /**
     * Fetch external identifier
     */
    async viewExternalIdentifierV21(requestParameters: ViewExternalIdentifierV21Request): Promise<PersonExternalIdentifierV20> {
        const response = await this.viewExternalIdentifierV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch external identifiers
     */
    async viewExternalIdentifiersV21Raw(requestParameters: ViewExternalIdentifiersV21Request): Promise<runtime.ApiResponse<PersonExternalIdentifiersV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewExternalIdentifiersV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("orcid_two_legs", ["/read-public"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v2.1/{orcid}/external-identifiers`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonExternalIdentifiersV20FromJSON(jsonValue));
    }

    /**
     * Fetch external identifiers
     */
    async viewExternalIdentifiersV21(requestParameters: ViewExternalIdentifiersV21Request): Promise<PersonExternalIdentifiersV20> {
        const response = await this.viewExternalIdentifiersV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch a Funding Summary
     */
    async viewFundingSummaryV21Raw(requestParameters: ViewFundingSummaryV21Request): Promise<runtime.ApiResponse<FundingSummaryV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewFundingSummaryV21.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewFundingSummaryV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/funding/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FundingSummaryV20FromJSON(jsonValue));
    }

    /**
     * Fetch a Funding Summary
     */
    async viewFundingSummaryV21(requestParameters: ViewFundingSummaryV21Request): Promise<FundingSummaryV20> {
        const response = await this.viewFundingSummaryV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch a Funding
     */
    async viewFundingV21Raw(requestParameters: ViewFundingV21Request): Promise<runtime.ApiResponse<FundingV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewFundingV21.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewFundingV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/funding/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FundingV20FromJSON(jsonValue));
    }

    /**
     * Fetch a Funding
     */
    async viewFundingV21(requestParameters: ViewFundingV21Request): Promise<FundingV20> {
        const response = await this.viewFundingV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all fundings
     */
    async viewFundingsV21Raw(requestParameters: ViewFundingsV21Request): Promise<runtime.ApiResponse<FundingsV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewFundingsV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/fundings`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FundingsV20FromJSON(jsonValue));
    }

    /**
     * Fetch all fundings
     */
    async viewFundingsV21(requestParameters: ViewFundingsV21Request): Promise<FundingsV20> {
        const response = await this.viewFundingsV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch keyword
     */
    async viewKeywordV21Raw(requestParameters: ViewKeywordV21Request): Promise<runtime.ApiResponse<KeywordV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewKeywordV21.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewKeywordV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/keywords/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => KeywordV20FromJSON(jsonValue));
    }

    /**
     * Fetch keyword
     */
    async viewKeywordV21(requestParameters: ViewKeywordV21Request): Promise<KeywordV20> {
        const response = await this.viewKeywordV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch keywords
     */
    async viewKeywordsV21Raw(requestParameters: ViewKeywordsV21Request): Promise<runtime.ApiResponse<KeywordsV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewKeywordsV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/keywords`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => KeywordsV20FromJSON(jsonValue));
    }

    /**
     * Fetch keywords
     */
    async viewKeywordsV21(requestParameters: ViewKeywordsV21Request): Promise<KeywordsV20> {
        const response = await this.viewKeywordsV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch Other name
     */
    async viewOtherNameV21Raw(requestParameters: ViewOtherNameV21Request): Promise<runtime.ApiResponse<OtherNameV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewOtherNameV21.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewOtherNameV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/other-names/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OtherNameV20FromJSON(jsonValue));
    }

    /**
     * Fetch Other name
     */
    async viewOtherNameV21(requestParameters: ViewOtherNameV21Request): Promise<OtherNameV20> {
        const response = await this.viewOtherNameV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch Other names
     */
    async viewOtherNamesV21Raw(requestParameters: ViewOtherNamesV21Request): Promise<runtime.ApiResponse<OtherNamesV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewOtherNamesV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/other-names`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OtherNamesV20FromJSON(jsonValue));
    }

    /**
     * Fetch Other names
     */
    async viewOtherNamesV21(requestParameters: ViewOtherNamesV21Request): Promise<OtherNamesV20> {
        const response = await this.viewOtherNamesV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch a Peer Review Summary
     */
    async viewPeerReviewSummaryV21Raw(requestParameters: ViewPeerReviewSummaryV21Request): Promise<runtime.ApiResponse<PeerReviewSummaryV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPeerReviewSummaryV21.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewPeerReviewSummaryV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/peer-review/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PeerReviewSummaryV20FromJSON(jsonValue));
    }

    /**
     * Fetch a Peer Review Summary
     */
    async viewPeerReviewSummaryV21(requestParameters: ViewPeerReviewSummaryV21Request): Promise<PeerReviewSummaryV20> {
        const response = await this.viewPeerReviewSummaryV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch a Peer Review
     */
    async viewPeerReviewV21Raw(requestParameters: ViewPeerReviewV21Request): Promise<runtime.ApiResponse<PeerReviewV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPeerReviewV21.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewPeerReviewV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/peer-review/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PeerReviewV20FromJSON(jsonValue));
    }

    /**
     * Fetch a Peer Review
     */
    async viewPeerReviewV21(requestParameters: ViewPeerReviewV21Request): Promise<PeerReviewV20> {
        const response = await this.viewPeerReviewV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all peer reviews
     */
    async viewPeerReviewsV21Raw(requestParameters: ViewPeerReviewsV21Request): Promise<runtime.ApiResponse<PeerReviewsV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPeerReviewsV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/peer-reviews`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PeerReviewsV20FromJSON(jsonValue));
    }

    /**
     * Fetch all peer reviews
     */
    async viewPeerReviewsV21(requestParameters: ViewPeerReviewsV21Request): Promise<PeerReviewsV20> {
        const response = await this.viewPeerReviewsV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch person details
     */
    async viewPersonV21Raw(requestParameters: ViewPersonV21Request): Promise<runtime.ApiResponse<PersonV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPersonV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/person`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonV20FromJSON(jsonValue));
    }

    /**
     * Fetch person details
     */
    async viewPersonV21(requestParameters: ViewPersonV21Request): Promise<PersonV20> {
        const response = await this.viewPersonV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch personal details for an ORCID ID
     */
    async viewPersonalDetailsV21Raw(requestParameters: ViewPersonalDetailsV21Request): Promise<runtime.ApiResponse<PersonalDetailsV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPersonalDetailsV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/personal-details`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonalDetailsV20FromJSON(jsonValue));
    }

    /**
     * Fetch personal details for an ORCID ID
     */
    async viewPersonalDetailsV21(requestParameters: ViewPersonalDetailsV21Request): Promise<PersonalDetailsV20> {
        const response = await this.viewPersonalDetailsV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch record details
     */
    async viewRecordV21Raw(requestParameters: ViewRecordV21Request): Promise<runtime.ApiResponse<RecordV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewRecordV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RecordV20FromJSON(jsonValue));
    }

    /**
     * Fetch record details
     */
    async viewRecordV21(requestParameters: ViewRecordV21Request): Promise<RecordV20> {
        const response = await this.viewRecordV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch one researcher url for an ORCID ID
     */
    async viewResearcherUrlV21Raw(requestParameters: ViewResearcherUrlV21Request): Promise<runtime.ApiResponse<ResearcherUrlsV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewResearcherUrlV21.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewResearcherUrlV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/researcher-urls/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResearcherUrlsV20FromJSON(jsonValue));
    }

    /**
     * Fetch one researcher url for an ORCID ID
     */
    async viewResearcherUrlV21(requestParameters: ViewResearcherUrlV21Request): Promise<ResearcherUrlsV20> {
        const response = await this.viewResearcherUrlV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all researcher urls for an ORCID ID
     */
    async viewResearcherUrlsV21Raw(requestParameters: ViewResearcherUrlsV21Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewResearcherUrlsV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/researcher-urls`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch all researcher urls for an ORCID ID
     */
    async viewResearcherUrlsV21(requestParameters: ViewResearcherUrlsV21Request): Promise<void> {
        await this.viewResearcherUrlsV21Raw(requestParameters);
    }

    /**
     * Fetch specified works
     */
    async viewSpecifiedWorksV21Raw(requestParameters: ViewSpecifiedWorksV21Request): Promise<runtime.ApiResponse<WorkBulkV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewSpecifiedWorksV21.');
        }

        if (requestParameters.putCodes === null || requestParameters.putCodes === undefined) {
            throw new runtime.RequiredError('putCodes','Required parameter requestParameters.putCodes was null or undefined when calling viewSpecifiedWorksV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/works/{putCodes}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCodes"}}`, encodeURIComponent(String(requestParameters.putCodes))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkBulkV20FromJSON(jsonValue));
    }

    /**
     * Fetch specified works
     */
    async viewSpecifiedWorksV21(requestParameters: ViewSpecifiedWorksV21Request): Promise<WorkBulkV20> {
        const response = await this.viewSpecifiedWorksV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Check the server status
     */
    async viewStatusTextV21Raw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check the server status
     */
    async viewStatusTextV21(): Promise<string> {
        const response = await this.viewStatusTextV21Raw();
        return await response.value();
    }

    /**
     * Fetch a Work Summary
     */
    async viewWorkSummaryV21Raw(requestParameters: ViewWorkSummaryV21Request): Promise<runtime.ApiResponse<WorkSummaryV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewWorkSummaryV21.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewWorkSummaryV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/work/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkSummaryV20FromJSON(jsonValue));
    }

    /**
     * Fetch a Work Summary
     */
    async viewWorkSummaryV21(requestParameters: ViewWorkSummaryV21Request): Promise<WorkSummaryV20> {
        const response = await this.viewWorkSummaryV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * More notes about this method
     * Fetch a Work
     */
    async viewWorkV21Raw(requestParameters: ViewWorkV21Request): Promise<runtime.ApiResponse<WorkV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewWorkV21.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewWorkV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/work/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkV20FromJSON(jsonValue));
    }

    /**
     * More notes about this method
     * Fetch a Work
     */
    async viewWorkV21(requestParameters: ViewWorkV21Request): Promise<WorkV20> {
        const response = await this.viewWorkV21Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all works
     */
    async viewWorksV21Raw(requestParameters: ViewWorksV21Request): Promise<runtime.ApiResponse<WorksSummaryV20>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewWorksV21.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v2.1/{orcid}/works`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorksSummaryV20FromJSON(jsonValue));
    }

    /**
     * Fetch all works
     */
    async viewWorksV21(requestParameters: ViewWorksV21Request): Promise<WorksSummaryV20> {
        const response = await this.viewWorksV21Raw(requestParameters);
        return await response.value();
    }

}
