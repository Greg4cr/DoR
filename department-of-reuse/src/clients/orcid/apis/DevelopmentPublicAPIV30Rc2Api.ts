/* tslint:disable */
/* eslint-disable */
/**
 * ORCID Public
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ActivitiesSummaryV30Rc2,
    ActivitiesSummaryV30Rc2FromJSON,
    ActivitiesSummaryV30Rc2ToJSON,
    DistinctionSummaryV30Rc2,
    DistinctionSummaryV30Rc2FromJSON,
    DistinctionSummaryV30Rc2ToJSON,
    DistinctionV30Rc2,
    DistinctionV30Rc2FromJSON,
    DistinctionV30Rc2ToJSON,
    DistinctionsSummaryV30Rc2,
    DistinctionsSummaryV30Rc2FromJSON,
    DistinctionsSummaryV30Rc2ToJSON,
    EducationSummaryV30Rc2,
    EducationSummaryV30Rc2FromJSON,
    EducationSummaryV30Rc2ToJSON,
    EducationV30Rc2,
    EducationV30Rc2FromJSON,
    EducationV30Rc2ToJSON,
    EducationsSummaryV30Rc2,
    EducationsSummaryV30Rc2FromJSON,
    EducationsSummaryV30Rc2ToJSON,
    EmploymentSummaryV30Rc2,
    EmploymentSummaryV30Rc2FromJSON,
    EmploymentSummaryV30Rc2ToJSON,
    EmploymentV30Rc2,
    EmploymentV30Rc2FromJSON,
    EmploymentV30Rc2ToJSON,
    FundingSummaryV30Rc2,
    FundingSummaryV30Rc2FromJSON,
    FundingSummaryV30Rc2ToJSON,
    FundingV30Rc2,
    FundingV30Rc2FromJSON,
    FundingV30Rc2ToJSON,
    FundingsV30Rc2,
    FundingsV30Rc2FromJSON,
    FundingsV30Rc2ToJSON,
    InvitedPositionSummaryV30Rc2,
    InvitedPositionSummaryV30Rc2FromJSON,
    InvitedPositionSummaryV30Rc2ToJSON,
    InvitedPositionV30Rc2,
    InvitedPositionV30Rc2FromJSON,
    InvitedPositionV30Rc2ToJSON,
    InvitedPositionsV30Rc2,
    InvitedPositionsV30Rc2FromJSON,
    InvitedPositionsV30Rc2ToJSON,
    MembershipSummaryV30Rc2,
    MembershipSummaryV30Rc2FromJSON,
    MembershipSummaryV30Rc2ToJSON,
    MembershipV30Rc2,
    MembershipV30Rc2FromJSON,
    MembershipV30Rc2ToJSON,
    MembershipsV30Rc2,
    MembershipsV30Rc2FromJSON,
    MembershipsV30Rc2ToJSON,
    PeerReviewSummaryV30Rc2,
    PeerReviewSummaryV30Rc2FromJSON,
    PeerReviewSummaryV30Rc2ToJSON,
    PeerReviewV30Rc2,
    PeerReviewV30Rc2FromJSON,
    PeerReviewV30Rc2ToJSON,
    PeerReviewsV30Rc2,
    PeerReviewsV30Rc2FromJSON,
    PeerReviewsV30Rc2ToJSON,
    QualificationSummaryV30Rc2,
    QualificationSummaryV30Rc2FromJSON,
    QualificationSummaryV30Rc2ToJSON,
    QualificationV30Rc2,
    QualificationV30Rc2FromJSON,
    QualificationV30Rc2ToJSON,
    QualificationsV30Rc2,
    QualificationsV30Rc2FromJSON,
    QualificationsV30Rc2ToJSON,
    RecordV30Rc2,
    RecordV30Rc2FromJSON,
    RecordV30Rc2ToJSON,
    ResearchResourceSummaryV30Rc2,
    ResearchResourceSummaryV30Rc2FromJSON,
    ResearchResourceSummaryV30Rc2ToJSON,
    ResearchResourceV30Rc2,
    ResearchResourceV30Rc2FromJSON,
    ResearchResourceV30Rc2ToJSON,
    ResearchResourcesV30Rc2,
    ResearchResourcesV30Rc2FromJSON,
    ResearchResourcesV30Rc2ToJSON,
    ServiceSummaryV30Rc2,
    ServiceSummaryV30Rc2FromJSON,
    ServiceSummaryV30Rc2ToJSON,
    ServiceV30Rc2,
    ServiceV30Rc2FromJSON,
    ServiceV30Rc2ToJSON,
    ServicesV30Rc2,
    ServicesV30Rc2FromJSON,
    ServicesV30Rc2ToJSON,
    WorkBulkV30Rc2,
    WorkBulkV30Rc2FromJSON,
    WorkBulkV30Rc2ToJSON,
    WorkSummaryV30Rc2,
    WorkSummaryV30Rc2FromJSON,
    WorkSummaryV30Rc2ToJSON,
    WorkV30Rc2,
    WorkV30Rc2FromJSON,
    WorkV30Rc2ToJSON,
    WorksSummaryV30Rc2,
    WorksSummaryV30Rc2FromJSON,
    WorksSummaryV30Rc2ToJSON,
} from '../models';

export interface SearchByQueryv3Rc2Request {
    q?: string;
}

export interface ViewActivitiesv3Rc2Request {
    orcid: string;
}

export interface ViewAddressesv3Rc2Request {
    orcid: string;
}

export interface ViewAddressv3Rc2Request {
    orcid: string;
    putCode: string;
}

export interface ViewBiographyv3Rc2Request {
    orcid: string;
}

export interface ViewClientv3Rc2Request {
    clientId: string;
}

export interface ViewDistinctionSummaryv3Rc2Request {
    orcid: string;
    putCode: string;
}

export interface ViewDistinctionsv3Rc2Request {
    orcid: string;
}

export interface ViewDistinctionv3Rc2Request {
    orcid: string;
    putCode: string;
}

export interface ViewEducationSummaryv3Rc2Request {
    orcid: string;
    putCode: number;
}

export interface ViewEducationsv3Rc2Request {
    orcid: string;
}

export interface ViewEducationv3Rc2Request {
    orcid: string;
    putCode: number;
}

export interface ViewEmailsv3Rc2Request {
    orcid: string;
}

export interface ViewEmploymentSummaryv3Rc2Request {
    orcid: string;
    putCode: number;
}

export interface ViewEmploymentsv3Rc2Request {
    orcid: string;
}

export interface ViewEmploymentv3Rc2Request {
    orcid: string;
    putCode: number;
}

export interface ViewExternalIdentifiersv3Rc2Request {
    orcid: string;
}

export interface ViewExternalIdentifierv3Rc2Request {
    orcid: string;
    putCode: string;
}

export interface ViewFundingSummaryv3Rc2Request {
    orcid: string;
    putCode: number;
}

export interface ViewFundingsv3Rc2Request {
    orcid: string;
}

export interface ViewFundingv3Rc2Request {
    orcid: string;
    putCode: number;
}

export interface ViewInvitedPositionSummaryv3Rc2Request {
    orcid: string;
    putCode: string;
}

export interface ViewInvitedPositionsv3Rc2Request {
    orcid: string;
}

export interface ViewInvitedPositionv3Rc2Request {
    orcid: string;
    putCode: string;
}

export interface ViewKeywordsv3Rc2Request {
    orcid: string;
}

export interface ViewKeywordv3Rc2Request {
    orcid: string;
    putCode: string;
}

export interface ViewMembershipSummaryv3Rc2Request {
    orcid: string;
    putCode: string;
}

export interface ViewMembershipsv3Rc2Request {
    orcid: string;
}

export interface ViewMembershipv3Rc2Request {
    orcid: string;
    putCode: string;
}

export interface ViewOtherNamesv3Rc2Request {
    orcid: string;
}

export interface ViewOtherNamev3Rc2Request {
    orcid: string;
    putCode: string;
}

export interface ViewPeerReviewSummaryv3Rc2Request {
    orcid: string;
    putCode: number;
}

export interface ViewPeerReviewsv3Rc2Request {
    orcid: string;
}

export interface ViewPeerReviewv3Rc2Request {
    orcid: string;
    putCode: number;
}

export interface ViewPersonalDetailsv3Rc2Request {
    orcid: string;
}

export interface ViewPersonv3Rc2Request {
    orcid: string;
}

export interface ViewQualificationSummaryv3Rc2Request {
    orcid: string;
    putCode: string;
}

export interface ViewQualificationsv3Rc2Request {
    orcid: string;
}

export interface ViewQualificationv3Rc2Request {
    orcid: string;
    putCode: string;
}

export interface ViewRecordv3Rc2Request {
    orcid: string;
}

export interface ViewResearchResourceSummaryv3Rc2Request {
    orcid: string;
    putCode: string;
}

export interface ViewResearchResourcesv3Rc2Request {
    orcid: string;
}

export interface ViewResearchResourcev3Rc2Request {
    orcid: string;
    putCode: string;
}

export interface ViewResearcherUrlsv3Rc2Request {
    orcid: string;
}

export interface ViewResearcherUrlv3Rc2Request {
    orcid: string;
    putCode: string;
}

export interface ViewServiceSummaryv3Rc2Request {
    orcid: string;
    putCode: string;
}

export interface ViewServicesv3Rc2Request {
    orcid: string;
}

export interface ViewServicev3Rc2Request {
    orcid: string;
    putCode: string;
}

export interface ViewSpecifiedWorksv3Rc2Request {
    orcid: string;
    putCodes: string;
}

export interface ViewWorkSummaryv3Rc2Request {
    orcid: string;
    putCode: number;
}

export interface ViewWorksv3Rc2Request {
    orcid: string;
}

export interface ViewWorkv3Rc2Request {
    orcid: string;
    putCode: number;
}

/**
 * 
 */
export class DevelopmentPublicAPIV30Rc2Api extends runtime.BaseAPI {

    /**
     * Search records
     */
    async searchByQueryv3Rc2Raw(requestParameters: SearchByQueryv3Rc2Request): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Search records
     */
    async searchByQueryv3Rc2(requestParameters: SearchByQueryv3Rc2Request): Promise<void> {
        await this.searchByQueryv3Rc2Raw(requestParameters);
    }

    /**
     * Fetch all Activities
     */
    async viewActivitiesv3Rc2Raw(requestParameters: ViewActivitiesv3Rc2Request): Promise<runtime.ApiResponse<ActivitiesSummaryV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewActivitiesv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/activities`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivitiesSummaryV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch all Activities
     */
    async viewActivitiesv3Rc2(requestParameters: ViewActivitiesv3Rc2Request): Promise<ActivitiesSummaryV30Rc2> {
        const response = await this.viewActivitiesv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all addresses
     */
    async viewAddressesv3Rc2Raw(requestParameters: ViewAddressesv3Rc2Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewAddressesv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/address`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch all addresses
     */
    async viewAddressesv3Rc2(requestParameters: ViewAddressesv3Rc2Request): Promise<void> {
        await this.viewAddressesv3Rc2Raw(requestParameters);
    }

    /**
     * Fetch an address
     */
    async viewAddressv3Rc2Raw(requestParameters: ViewAddressv3Rc2Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewAddressv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewAddressv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/address/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch an address
     */
    async viewAddressv3Rc2(requestParameters: ViewAddressv3Rc2Request): Promise<void> {
        await this.viewAddressv3Rc2Raw(requestParameters);
    }

    /**
     * Get biography details
     */
    async viewBiographyv3Rc2Raw(requestParameters: ViewBiographyv3Rc2Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewBiographyv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/biography`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get biography details
     */
    async viewBiographyv3Rc2(requestParameters: ViewBiographyv3Rc2Request): Promise<void> {
        await this.viewBiographyv3Rc2Raw(requestParameters);
    }

    /**
     * Fetch client details
     */
    async viewClientv3Rc2Raw(requestParameters: ViewClientv3Rc2Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling viewClientv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/client/{client_id}`.replace(`{${"client_id"}}`, encodeURIComponent(String(requestParameters.clientId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch client details
     */
    async viewClientv3Rc2(requestParameters: ViewClientv3Rc2Request): Promise<void> {
        await this.viewClientv3Rc2Raw(requestParameters);
    }

    /**
     * Fetch an Distinction summary
     */
    async viewDistinctionSummaryv3Rc2Raw(requestParameters: ViewDistinctionSummaryv3Rc2Request): Promise<runtime.ApiResponse<DistinctionSummaryV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewDistinctionSummaryv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewDistinctionSummaryv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/distinction/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctionSummaryV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch an Distinction summary
     */
    async viewDistinctionSummaryv3Rc2(requestParameters: ViewDistinctionSummaryv3Rc2Request): Promise<DistinctionSummaryV30Rc2> {
        const response = await this.viewDistinctionSummaryv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all distinctions
     */
    async viewDistinctionsv3Rc2Raw(requestParameters: ViewDistinctionsv3Rc2Request): Promise<runtime.ApiResponse<DistinctionsSummaryV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewDistinctionsv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/distinctions`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctionsSummaryV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch all distinctions
     */
    async viewDistinctionsv3Rc2(requestParameters: ViewDistinctionsv3Rc2Request): Promise<DistinctionsSummaryV30Rc2> {
        const response = await this.viewDistinctionsv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Distinction
     */
    async viewDistinctionv3Rc2Raw(requestParameters: ViewDistinctionv3Rc2Request): Promise<runtime.ApiResponse<DistinctionV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewDistinctionv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewDistinctionv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/distinction/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctionV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch an Distinction
     */
    async viewDistinctionv3Rc2(requestParameters: ViewDistinctionv3Rc2Request): Promise<DistinctionV30Rc2> {
        const response = await this.viewDistinctionv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Education Summary
     */
    async viewEducationSummaryv3Rc2Raw(requestParameters: ViewEducationSummaryv3Rc2Request): Promise<runtime.ApiResponse<EducationSummaryV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEducationSummaryv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewEducationSummaryv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/education/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationSummaryV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch an Education Summary
     */
    async viewEducationSummaryv3Rc2(requestParameters: ViewEducationSummaryv3Rc2Request): Promise<EducationSummaryV30Rc2> {
        const response = await this.viewEducationSummaryv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all educations
     */
    async viewEducationsv3Rc2Raw(requestParameters: ViewEducationsv3Rc2Request): Promise<runtime.ApiResponse<EducationsSummaryV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEducationsv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/educations`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationsSummaryV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch all educations
     */
    async viewEducationsv3Rc2(requestParameters: ViewEducationsv3Rc2Request): Promise<EducationsSummaryV30Rc2> {
        const response = await this.viewEducationsv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Education
     */
    async viewEducationv3Rc2Raw(requestParameters: ViewEducationv3Rc2Request): Promise<runtime.ApiResponse<EducationV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEducationv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewEducationv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/education/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch an Education
     */
    async viewEducationv3Rc2(requestParameters: ViewEducationv3Rc2Request): Promise<EducationV30Rc2> {
        const response = await this.viewEducationv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all emails for an ORCID ID
     */
    async viewEmailsv3Rc2Raw(requestParameters: ViewEmailsv3Rc2Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEmailsv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/email`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch all emails for an ORCID ID
     */
    async viewEmailsv3Rc2(requestParameters: ViewEmailsv3Rc2Request): Promise<void> {
        await this.viewEmailsv3Rc2Raw(requestParameters);
    }

    /**
     * Fetch an Employment Summary
     */
    async viewEmploymentSummaryv3Rc2Raw(requestParameters: ViewEmploymentSummaryv3Rc2Request): Promise<runtime.ApiResponse<EmploymentSummaryV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEmploymentSummaryv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewEmploymentSummaryv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/employment/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmploymentSummaryV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch an Employment Summary
     */
    async viewEmploymentSummaryv3Rc2(requestParameters: ViewEmploymentSummaryv3Rc2Request): Promise<EmploymentSummaryV30Rc2> {
        const response = await this.viewEmploymentSummaryv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all employments
     */
    async viewEmploymentsv3Rc2Raw(requestParameters: ViewEmploymentsv3Rc2Request): Promise<runtime.ApiResponse<FundingsV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEmploymentsv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/employments`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FundingsV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch all employments
     */
    async viewEmploymentsv3Rc2(requestParameters: ViewEmploymentsv3Rc2Request): Promise<FundingsV30Rc2> {
        const response = await this.viewEmploymentsv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Retrive a specific education representation
     * Fetch an Employment
     */
    async viewEmploymentv3Rc2Raw(requestParameters: ViewEmploymentv3Rc2Request): Promise<runtime.ApiResponse<EmploymentV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEmploymentv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewEmploymentv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/employment/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmploymentV30Rc2FromJSON(jsonValue));
    }

    /**
     * Retrive a specific education representation
     * Fetch an Employment
     */
    async viewEmploymentv3Rc2(requestParameters: ViewEmploymentv3Rc2Request): Promise<EmploymentV30Rc2> {
        const response = await this.viewEmploymentv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch external identifiers
     */
    async viewExternalIdentifiersv3Rc2Raw(requestParameters: ViewExternalIdentifiersv3Rc2Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewExternalIdentifiersv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("orcid_two_legs", ["/read-public"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/external-identifiers`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch external identifiers
     */
    async viewExternalIdentifiersv3Rc2(requestParameters: ViewExternalIdentifiersv3Rc2Request): Promise<void> {
        await this.viewExternalIdentifiersv3Rc2Raw(requestParameters);
    }

    /**
     * Fetch external identifier
     */
    async viewExternalIdentifierv3Rc2Raw(requestParameters: ViewExternalIdentifierv3Rc2Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewExternalIdentifierv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewExternalIdentifierv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/external-identifiers/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch external identifier
     */
    async viewExternalIdentifierv3Rc2(requestParameters: ViewExternalIdentifierv3Rc2Request): Promise<void> {
        await this.viewExternalIdentifierv3Rc2Raw(requestParameters);
    }

    /**
     * Fetch a Funding Summary
     */
    async viewFundingSummaryv3Rc2Raw(requestParameters: ViewFundingSummaryv3Rc2Request): Promise<runtime.ApiResponse<FundingSummaryV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewFundingSummaryv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewFundingSummaryv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/funding/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FundingSummaryV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch a Funding Summary
     */
    async viewFundingSummaryv3Rc2(requestParameters: ViewFundingSummaryv3Rc2Request): Promise<FundingSummaryV30Rc2> {
        const response = await this.viewFundingSummaryv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all fundings
     */
    async viewFundingsv3Rc2Raw(requestParameters: ViewFundingsv3Rc2Request): Promise<runtime.ApiResponse<FundingsV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewFundingsv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/fundings`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FundingsV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch all fundings
     */
    async viewFundingsv3Rc2(requestParameters: ViewFundingsv3Rc2Request): Promise<FundingsV30Rc2> {
        const response = await this.viewFundingsv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch a Funding
     */
    async viewFundingv3Rc2Raw(requestParameters: ViewFundingv3Rc2Request): Promise<runtime.ApiResponse<FundingV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewFundingv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewFundingv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/funding/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FundingV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch a Funding
     */
    async viewFundingv3Rc2(requestParameters: ViewFundingv3Rc2Request): Promise<FundingV30Rc2> {
        const response = await this.viewFundingv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an InvitedPosition summary
     */
    async viewInvitedPositionSummaryv3Rc2Raw(requestParameters: ViewInvitedPositionSummaryv3Rc2Request): Promise<runtime.ApiResponse<InvitedPositionSummaryV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewInvitedPositionSummaryv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewInvitedPositionSummaryv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/invited-position/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitedPositionSummaryV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch an InvitedPosition summary
     */
    async viewInvitedPositionSummaryv3Rc2(requestParameters: ViewInvitedPositionSummaryv3Rc2Request): Promise<InvitedPositionSummaryV30Rc2> {
        const response = await this.viewInvitedPositionSummaryv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all invitedPositions
     */
    async viewInvitedPositionsv3Rc2Raw(requestParameters: ViewInvitedPositionsv3Rc2Request): Promise<runtime.ApiResponse<InvitedPositionsV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewInvitedPositionsv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/invited-positions`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitedPositionsV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch all invitedPositions
     */
    async viewInvitedPositionsv3Rc2(requestParameters: ViewInvitedPositionsv3Rc2Request): Promise<InvitedPositionsV30Rc2> {
        const response = await this.viewInvitedPositionsv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an InvitedPosition
     */
    async viewInvitedPositionv3Rc2Raw(requestParameters: ViewInvitedPositionv3Rc2Request): Promise<runtime.ApiResponse<InvitedPositionV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewInvitedPositionv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewInvitedPositionv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/invited-position/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitedPositionV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch an InvitedPosition
     */
    async viewInvitedPositionv3Rc2(requestParameters: ViewInvitedPositionv3Rc2Request): Promise<InvitedPositionV30Rc2> {
        const response = await this.viewInvitedPositionv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch keywords
     */
    async viewKeywordsv3Rc2Raw(requestParameters: ViewKeywordsv3Rc2Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewKeywordsv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/keywords`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch keywords
     */
    async viewKeywordsv3Rc2(requestParameters: ViewKeywordsv3Rc2Request): Promise<void> {
        await this.viewKeywordsv3Rc2Raw(requestParameters);
    }

    /**
     * Fetch keyword
     */
    async viewKeywordv3Rc2Raw(requestParameters: ViewKeywordv3Rc2Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewKeywordv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewKeywordv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/keywords/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch keyword
     */
    async viewKeywordv3Rc2(requestParameters: ViewKeywordv3Rc2Request): Promise<void> {
        await this.viewKeywordv3Rc2Raw(requestParameters);
    }

    /**
     * Fetch an Membership summary
     */
    async viewMembershipSummaryv3Rc2Raw(requestParameters: ViewMembershipSummaryv3Rc2Request): Promise<runtime.ApiResponse<MembershipSummaryV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewMembershipSummaryv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewMembershipSummaryv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/membership/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipSummaryV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch an Membership summary
     */
    async viewMembershipSummaryv3Rc2(requestParameters: ViewMembershipSummaryv3Rc2Request): Promise<MembershipSummaryV30Rc2> {
        const response = await this.viewMembershipSummaryv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all memberships
     */
    async viewMembershipsv3Rc2Raw(requestParameters: ViewMembershipsv3Rc2Request): Promise<runtime.ApiResponse<MembershipsV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewMembershipsv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/memberships`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipsV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch all memberships
     */
    async viewMembershipsv3Rc2(requestParameters: ViewMembershipsv3Rc2Request): Promise<MembershipsV30Rc2> {
        const response = await this.viewMembershipsv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Membership
     */
    async viewMembershipv3Rc2Raw(requestParameters: ViewMembershipv3Rc2Request): Promise<runtime.ApiResponse<MembershipV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewMembershipv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewMembershipv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/membership/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch an Membership
     */
    async viewMembershipv3Rc2(requestParameters: ViewMembershipv3Rc2Request): Promise<MembershipV30Rc2> {
        const response = await this.viewMembershipv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch Other names
     */
    async viewOtherNamesv3Rc2Raw(requestParameters: ViewOtherNamesv3Rc2Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewOtherNamesv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/other-names`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch Other names
     */
    async viewOtherNamesv3Rc2(requestParameters: ViewOtherNamesv3Rc2Request): Promise<void> {
        await this.viewOtherNamesv3Rc2Raw(requestParameters);
    }

    /**
     * Fetch Other name
     */
    async viewOtherNamev3Rc2Raw(requestParameters: ViewOtherNamev3Rc2Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewOtherNamev3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewOtherNamev3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/other-names/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch Other name
     */
    async viewOtherNamev3Rc2(requestParameters: ViewOtherNamev3Rc2Request): Promise<void> {
        await this.viewOtherNamev3Rc2Raw(requestParameters);
    }

    /**
     * Fetch a Peer Review Summary
     */
    async viewPeerReviewSummaryv3Rc2Raw(requestParameters: ViewPeerReviewSummaryv3Rc2Request): Promise<runtime.ApiResponse<PeerReviewSummaryV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPeerReviewSummaryv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewPeerReviewSummaryv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/peer-review/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PeerReviewSummaryV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch a Peer Review Summary
     */
    async viewPeerReviewSummaryv3Rc2(requestParameters: ViewPeerReviewSummaryv3Rc2Request): Promise<PeerReviewSummaryV30Rc2> {
        const response = await this.viewPeerReviewSummaryv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all peer reviews
     */
    async viewPeerReviewsv3Rc2Raw(requestParameters: ViewPeerReviewsv3Rc2Request): Promise<runtime.ApiResponse<PeerReviewsV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPeerReviewsv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/peer-reviews`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PeerReviewsV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch all peer reviews
     */
    async viewPeerReviewsv3Rc2(requestParameters: ViewPeerReviewsv3Rc2Request): Promise<PeerReviewsV30Rc2> {
        const response = await this.viewPeerReviewsv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch a Peer Review
     */
    async viewPeerReviewv3Rc2Raw(requestParameters: ViewPeerReviewv3Rc2Request): Promise<runtime.ApiResponse<PeerReviewV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPeerReviewv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewPeerReviewv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/peer-review/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PeerReviewV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch a Peer Review
     */
    async viewPeerReviewv3Rc2(requestParameters: ViewPeerReviewv3Rc2Request): Promise<PeerReviewV30Rc2> {
        const response = await this.viewPeerReviewv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch personal details for an ORCID ID
     */
    async viewPersonalDetailsv3Rc2Raw(requestParameters: ViewPersonalDetailsv3Rc2Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPersonalDetailsv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/personal-details`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch personal details for an ORCID ID
     */
    async viewPersonalDetailsv3Rc2(requestParameters: ViewPersonalDetailsv3Rc2Request): Promise<void> {
        await this.viewPersonalDetailsv3Rc2Raw(requestParameters);
    }

    /**
     * Fetch person details
     */
    async viewPersonv3Rc2Raw(requestParameters: ViewPersonv3Rc2Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPersonv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/person`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch person details
     */
    async viewPersonv3Rc2(requestParameters: ViewPersonv3Rc2Request): Promise<void> {
        await this.viewPersonv3Rc2Raw(requestParameters);
    }

    /**
     * Fetch an Qualification summary
     */
    async viewQualificationSummaryv3Rc2Raw(requestParameters: ViewQualificationSummaryv3Rc2Request): Promise<runtime.ApiResponse<QualificationSummaryV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewQualificationSummaryv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewQualificationSummaryv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/qualification/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QualificationSummaryV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch an Qualification summary
     */
    async viewQualificationSummaryv3Rc2(requestParameters: ViewQualificationSummaryv3Rc2Request): Promise<QualificationSummaryV30Rc2> {
        const response = await this.viewQualificationSummaryv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all qualifications
     */
    async viewQualificationsv3Rc2Raw(requestParameters: ViewQualificationsv3Rc2Request): Promise<runtime.ApiResponse<QualificationsV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewQualificationsv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/qualifications`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QualificationsV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch all qualifications
     */
    async viewQualificationsv3Rc2(requestParameters: ViewQualificationsv3Rc2Request): Promise<QualificationsV30Rc2> {
        const response = await this.viewQualificationsv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Qualification
     */
    async viewQualificationv3Rc2Raw(requestParameters: ViewQualificationv3Rc2Request): Promise<runtime.ApiResponse<QualificationV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewQualificationv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewQualificationv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/qualification/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QualificationV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch an Qualification
     */
    async viewQualificationv3Rc2(requestParameters: ViewQualificationv3Rc2Request): Promise<QualificationV30Rc2> {
        const response = await this.viewQualificationv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch record details
     */
    async viewRecordv3Rc2Raw(requestParameters: ViewRecordv3Rc2Request): Promise<runtime.ApiResponse<RecordV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewRecordv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RecordV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch record details
     */
    async viewRecordv3Rc2(requestParameters: ViewRecordv3Rc2Request): Promise<RecordV30Rc2> {
        const response = await this.viewRecordv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch a Research Resource summary
     */
    async viewResearchResourceSummaryv3Rc2Raw(requestParameters: ViewResearchResourceSummaryv3Rc2Request): Promise<runtime.ApiResponse<ResearchResourceSummaryV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewResearchResourceSummaryv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewResearchResourceSummaryv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/research-resource/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResearchResourceSummaryV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch a Research Resource summary
     */
    async viewResearchResourceSummaryv3Rc2(requestParameters: ViewResearchResourceSummaryv3Rc2Request): Promise<ResearchResourceSummaryV30Rc2> {
        const response = await this.viewResearchResourceSummaryv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all Research Resources
     */
    async viewResearchResourcesv3Rc2Raw(requestParameters: ViewResearchResourcesv3Rc2Request): Promise<runtime.ApiResponse<ResearchResourcesV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewResearchResourcesv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/research-resources`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResearchResourcesV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch all Research Resources
     */
    async viewResearchResourcesv3Rc2(requestParameters: ViewResearchResourcesv3Rc2Request): Promise<ResearchResourcesV30Rc2> {
        const response = await this.viewResearchResourcesv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch a Research Resource
     */
    async viewResearchResourcev3Rc2Raw(requestParameters: ViewResearchResourcev3Rc2Request): Promise<runtime.ApiResponse<ResearchResourceV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewResearchResourcev3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewResearchResourcev3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/research-resource/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResearchResourceV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch a Research Resource
     */
    async viewResearchResourcev3Rc2(requestParameters: ViewResearchResourcev3Rc2Request): Promise<ResearchResourceV30Rc2> {
        const response = await this.viewResearchResourcev3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all researcher urls for an ORCID ID
     */
    async viewResearcherUrlsv3Rc2Raw(requestParameters: ViewResearcherUrlsv3Rc2Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewResearcherUrlsv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/researcher-urls`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch all researcher urls for an ORCID ID
     */
    async viewResearcherUrlsv3Rc2(requestParameters: ViewResearcherUrlsv3Rc2Request): Promise<void> {
        await this.viewResearcherUrlsv3Rc2Raw(requestParameters);
    }

    /**
     * Fetch one researcher url for an ORCID ID
     */
    async viewResearcherUrlv3Rc2Raw(requestParameters: ViewResearcherUrlv3Rc2Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewResearcherUrlv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewResearcherUrlv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/researcher-urls/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch one researcher url for an ORCID ID
     */
    async viewResearcherUrlv3Rc2(requestParameters: ViewResearcherUrlv3Rc2Request): Promise<void> {
        await this.viewResearcherUrlv3Rc2Raw(requestParameters);
    }

    /**
     * Fetch an Service summary
     */
    async viewServiceSummaryv3Rc2Raw(requestParameters: ViewServiceSummaryv3Rc2Request): Promise<runtime.ApiResponse<ServiceSummaryV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewServiceSummaryv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewServiceSummaryv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/service/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceSummaryV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch an Service summary
     */
    async viewServiceSummaryv3Rc2(requestParameters: ViewServiceSummaryv3Rc2Request): Promise<ServiceSummaryV30Rc2> {
        const response = await this.viewServiceSummaryv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all services
     */
    async viewServicesv3Rc2Raw(requestParameters: ViewServicesv3Rc2Request): Promise<runtime.ApiResponse<ServicesV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewServicesv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/services`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ServicesV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch all services
     */
    async viewServicesv3Rc2(requestParameters: ViewServicesv3Rc2Request): Promise<ServicesV30Rc2> {
        const response = await this.viewServicesv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Service
     */
    async viewServicev3Rc2Raw(requestParameters: ViewServicev3Rc2Request): Promise<runtime.ApiResponse<ServiceV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewServicev3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewServicev3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/service/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch an Service
     */
    async viewServicev3Rc2(requestParameters: ViewServicev3Rc2Request): Promise<ServiceV30Rc2> {
        const response = await this.viewServicev3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch specified works
     */
    async viewSpecifiedWorksv3Rc2Raw(requestParameters: ViewSpecifiedWorksv3Rc2Request): Promise<runtime.ApiResponse<WorkBulkV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewSpecifiedWorksv3Rc2.');
        }

        if (requestParameters.putCodes === null || requestParameters.putCodes === undefined) {
            throw new runtime.RequiredError('putCodes','Required parameter requestParameters.putCodes was null or undefined when calling viewSpecifiedWorksv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/works/{putCodes}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCodes"}}`, encodeURIComponent(String(requestParameters.putCodes))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkBulkV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch specified works
     */
    async viewSpecifiedWorksv3Rc2(requestParameters: ViewSpecifiedWorksv3Rc2Request): Promise<WorkBulkV30Rc2> {
        const response = await this.viewSpecifiedWorksv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     */
    async viewStatusJsonRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/pubStatus`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async viewStatusJson(): Promise<void> {
        await this.viewStatusJsonRaw();
    }

    /**
     * Check the server status
     */
    async viewStatusTextv3Rc2Raw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check the server status
     */
    async viewStatusTextv3Rc2(): Promise<string> {
        const response = await this.viewStatusTextv3Rc2Raw();
        return await response.value();
    }

    /**
     * Fetch a Work Summary
     */
    async viewWorkSummaryv3Rc2Raw(requestParameters: ViewWorkSummaryv3Rc2Request): Promise<runtime.ApiResponse<WorkSummaryV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewWorkSummaryv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewWorkSummaryv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/work/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkSummaryV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch a Work Summary
     */
    async viewWorkSummaryv3Rc2(requestParameters: ViewWorkSummaryv3Rc2Request): Promise<WorkSummaryV30Rc2> {
        const response = await this.viewWorkSummaryv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all works
     */
    async viewWorksv3Rc2Raw(requestParameters: ViewWorksv3Rc2Request): Promise<runtime.ApiResponse<WorksSummaryV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewWorksv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/works`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorksSummaryV30Rc2FromJSON(jsonValue));
    }

    /**
     * Fetch all works
     */
    async viewWorksv3Rc2(requestParameters: ViewWorksv3Rc2Request): Promise<WorksSummaryV30Rc2> {
        const response = await this.viewWorksv3Rc2Raw(requestParameters);
        return await response.value();
    }

    /**
     * More notes about this method
     * Fetch a Work
     */
    async viewWorkv3Rc2Raw(requestParameters: ViewWorkv3Rc2Request): Promise<runtime.ApiResponse<WorkV30Rc2>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewWorkv3Rc2.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewWorkv3Rc2.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0_rc2/{orcid}/work/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkV30Rc2FromJSON(jsonValue));
    }

    /**
     * More notes about this method
     * Fetch a Work
     */
    async viewWorkv3Rc2(requestParameters: ViewWorkv3Rc2Request): Promise<WorkV30Rc2> {
        const response = await this.viewWorkv3Rc2Raw(requestParameters);
        return await response.value();
    }

}
