/* tslint:disable */
/* eslint-disable */
/**
 * ORCID Public
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: Latest
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ActivitiesSummaryV30,
    ActivitiesSummaryV30FromJSON,
    ActivitiesSummaryV30ToJSON,
    DistinctionSummaryV30,
    DistinctionSummaryV30FromJSON,
    DistinctionSummaryV30ToJSON,
    DistinctionV30,
    DistinctionV30FromJSON,
    DistinctionV30ToJSON,
    DistinctionsSummaryV30,
    DistinctionsSummaryV30FromJSON,
    DistinctionsSummaryV30ToJSON,
    EducationSummaryV30,
    EducationSummaryV30FromJSON,
    EducationSummaryV30ToJSON,
    EducationV30,
    EducationV30FromJSON,
    EducationV30ToJSON,
    EducationsSummaryV30,
    EducationsSummaryV30FromJSON,
    EducationsSummaryV30ToJSON,
    EmploymentSummaryV30,
    EmploymentSummaryV30FromJSON,
    EmploymentSummaryV30ToJSON,
    EmploymentV30,
    EmploymentV30FromJSON,
    EmploymentV30ToJSON,
    FundingSummaryV30,
    FundingSummaryV30FromJSON,
    FundingSummaryV30ToJSON,
    FundingV30,
    FundingV30FromJSON,
    FundingV30ToJSON,
    FundingsV30,
    FundingsV30FromJSON,
    FundingsV30ToJSON,
    InvitedPositionSummaryV30,
    InvitedPositionSummaryV30FromJSON,
    InvitedPositionSummaryV30ToJSON,
    InvitedPositionV30,
    InvitedPositionV30FromJSON,
    InvitedPositionV30ToJSON,
    InvitedPositionsV30,
    InvitedPositionsV30FromJSON,
    InvitedPositionsV30ToJSON,
    MembershipSummaryV30,
    MembershipSummaryV30FromJSON,
    MembershipSummaryV30ToJSON,
    MembershipV30,
    MembershipV30FromJSON,
    MembershipV30ToJSON,
    MembershipsV30,
    MembershipsV30FromJSON,
    MembershipsV30ToJSON,
    PeerReviewSummaryV30,
    PeerReviewSummaryV30FromJSON,
    PeerReviewSummaryV30ToJSON,
    PeerReviewV30,
    PeerReviewV30FromJSON,
    PeerReviewV30ToJSON,
    PeerReviewsV30,
    PeerReviewsV30FromJSON,
    PeerReviewsV30ToJSON,
    QualificationSummaryV30,
    QualificationSummaryV30FromJSON,
    QualificationSummaryV30ToJSON,
    QualificationV30,
    QualificationV30FromJSON,
    QualificationV30ToJSON,
    QualificationsV30,
    QualificationsV30FromJSON,
    QualificationsV30ToJSON,
    RecordV30,
    RecordV30FromJSON,
    RecordV30ToJSON,
    ResearchResourceSummaryV30,
    ResearchResourceSummaryV30FromJSON,
    ResearchResourceSummaryV30ToJSON,
    ResearchResourceV30,
    ResearchResourceV30FromJSON,
    ResearchResourceV30ToJSON,
    ResearchResourcesV30,
    ResearchResourcesV30FromJSON,
    ResearchResourcesV30ToJSON,
    ServiceSummaryV30,
    ServiceSummaryV30FromJSON,
    ServiceSummaryV30ToJSON,
    ServiceV30,
    ServiceV30FromJSON,
    ServiceV30ToJSON,
    ServicesV30,
    ServicesV30FromJSON,
    ServicesV30ToJSON,
    WorkBulkV30,
    WorkBulkV30FromJSON,
    WorkBulkV30ToJSON,
    WorkSummaryV30,
    WorkSummaryV30FromJSON,
    WorkSummaryV30ToJSON,
    WorkV30,
    WorkV30FromJSON,
    WorkV30ToJSON,
    WorksSummaryV30,
    WorksSummaryV30FromJSON,
    WorksSummaryV30ToJSON,
} from '../models';

export interface SearchByQueryv3Request {
    q?: string;
}

export interface SearchByQueryv30Request {
    q?: string;
}

export interface SearchByQueryv31Request {
    q?: string;
}

export interface ViewActivitiesv3Request {
    orcid: string;
}

export interface ViewAddressesv3Request {
    orcid: string;
}

export interface ViewAddressv3Request {
    orcid: string;
    putCode: string;
}

export interface ViewBiographyv3Request {
    orcid: string;
}

export interface ViewClientv3Request {
    clientId: string;
}

export interface ViewDistinctionSummaryv3Request {
    orcid: string;
    putCode: string;
}

export interface ViewDistinctionsv3Request {
    orcid: string;
}

export interface ViewDistinctionv3Request {
    orcid: string;
    putCode: string;
}

export interface ViewEducationSummaryv3Request {
    orcid: string;
    putCode: number;
}

export interface ViewEducationsv3Request {
    orcid: string;
}

export interface ViewEducationv3Request {
    orcid: string;
    putCode: number;
}

export interface ViewEmailsv3Request {
    orcid: string;
}

export interface ViewEmploymentSummaryv3Request {
    orcid: string;
    putCode: number;
}

export interface ViewEmploymentsv3Request {
    orcid: string;
}

export interface ViewEmploymentv3Request {
    orcid: string;
    putCode: number;
}

export interface ViewExternalIdentifiersv3Request {
    orcid: string;
}

export interface ViewExternalIdentifierv3Request {
    orcid: string;
    putCode: string;
}

export interface ViewFundingSummaryv3Request {
    orcid: string;
    putCode: number;
}

export interface ViewFundingsv3Request {
    orcid: string;
}

export interface ViewFundingv3Request {
    orcid: string;
    putCode: number;
}

export interface ViewInvitedPositionSummaryv3Request {
    orcid: string;
    putCode: string;
}

export interface ViewInvitedPositionsv3Request {
    orcid: string;
}

export interface ViewInvitedPositionv3Request {
    orcid: string;
    putCode: string;
}

export interface ViewKeywordsv3Request {
    orcid: string;
}

export interface ViewKeywordv3Request {
    orcid: string;
    putCode: string;
}

export interface ViewMembershipSummaryv3Request {
    orcid: string;
    putCode: string;
}

export interface ViewMembershipsv3Request {
    orcid: string;
}

export interface ViewMembershipv3Request {
    orcid: string;
    putCode: string;
}

export interface ViewOtherNamesv3Request {
    orcid: string;
}

export interface ViewOtherNamev3Request {
    orcid: string;
    putCode: string;
}

export interface ViewPeerReviewSummaryv3Request {
    orcid: string;
    putCode: number;
}

export interface ViewPeerReviewsv3Request {
    orcid: string;
}

export interface ViewPeerReviewv3Request {
    orcid: string;
    putCode: number;
}

export interface ViewPersonalDetailsv3Request {
    orcid: string;
}

export interface ViewPersonv3Request {
    orcid: string;
}

export interface ViewQualificationSummaryv3Request {
    orcid: string;
    putCode: string;
}

export interface ViewQualificationsv3Request {
    orcid: string;
}

export interface ViewQualificationv3Request {
    orcid: string;
    putCode: string;
}

export interface ViewRecordv3Request {
    orcid: string;
}

export interface ViewResearchResourceSummaryv3Request {
    orcid: string;
    putCode: string;
}

export interface ViewResearchResourcesv3Request {
    orcid: string;
}

export interface ViewResearchResourcev3Request {
    orcid: string;
    putCode: string;
}

export interface ViewResearcherUrlsv3Request {
    orcid: string;
}

export interface ViewResearcherUrlv3Request {
    orcid: string;
    putCode: string;
}

export interface ViewServiceSummaryv3Request {
    orcid: string;
    putCode: string;
}

export interface ViewServicesv3Request {
    orcid: string;
}

export interface ViewServicev3Request {
    orcid: string;
    putCode: string;
}

export interface ViewSpecifiedWorksv3Request {
    orcid: string;
    putCodes: string;
}

export interface ViewWorkSummaryv3Request {
    orcid: string;
    putCode: number;
}

export interface ViewWorksv3Request {
    orcid: string;
}

export interface ViewWorkv3Request {
    orcid: string;
    putCode: number;
}

/**
 * 
 */
export class DevelopmentPublicAPIV30Api extends runtime.BaseAPI {

    /**
     * Search records
     */
    async searchByQueryv3Raw(requestParameters: SearchByQueryv3Request): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Search records
     */
    async searchByQueryv3(requestParameters: SearchByQueryv3Request): Promise<void> {
        await this.searchByQueryv3Raw(requestParameters);
    }

    /**
     * Search records
     */
    async searchByQueryv3_1Raw(requestParameters: SearchByQueryv30Request): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/csv-search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Search records
     */
    async searchByQueryv3_1(requestParameters: SearchByQueryv30Request): Promise<void> {
        await this.searchByQueryv3_1Raw(requestParameters);
    }

    /**
     * Search records
     */
    async searchByQueryv3_2Raw(requestParameters: SearchByQueryv31Request): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.q !== undefined) {
            queryParameters['q'] = requestParameters.q;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/expanded-search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Search records
     */
    async searchByQueryv3_2(requestParameters: SearchByQueryv31Request): Promise<void> {
        await this.searchByQueryv3_2Raw(requestParameters);
    }

    /**
     * Fetch all Activities
     */
    async viewActivitiesv3Raw(requestParameters: ViewActivitiesv3Request): Promise<runtime.ApiResponse<ActivitiesSummaryV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewActivitiesv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/activities`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivitiesSummaryV30FromJSON(jsonValue));
    }

    /**
     * Fetch all Activities
     */
    async viewActivitiesv3(requestParameters: ViewActivitiesv3Request): Promise<ActivitiesSummaryV30> {
        const response = await this.viewActivitiesv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all addresses
     */
    async viewAddressesv3Raw(requestParameters: ViewAddressesv3Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewAddressesv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/address`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch all addresses
     */
    async viewAddressesv3(requestParameters: ViewAddressesv3Request): Promise<void> {
        await this.viewAddressesv3Raw(requestParameters);
    }

    /**
     * Fetch an address
     */
    async viewAddressv3Raw(requestParameters: ViewAddressv3Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewAddressv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewAddressv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/address/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch an address
     */
    async viewAddressv3(requestParameters: ViewAddressv3Request): Promise<void> {
        await this.viewAddressv3Raw(requestParameters);
    }

    /**
     * Get biography details
     */
    async viewBiographyv3Raw(requestParameters: ViewBiographyv3Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewBiographyv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/biography`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get biography details
     */
    async viewBiographyv3(requestParameters: ViewBiographyv3Request): Promise<void> {
        await this.viewBiographyv3Raw(requestParameters);
    }

    /**
     * Fetch client details
     */
    async viewClientv3Raw(requestParameters: ViewClientv3Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling viewClientv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/client/{client_id}`.replace(`{${"client_id"}}`, encodeURIComponent(String(requestParameters.clientId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch client details
     */
    async viewClientv3(requestParameters: ViewClientv3Request): Promise<void> {
        await this.viewClientv3Raw(requestParameters);
    }

    /**
     * Fetch an Distinction summary
     */
    async viewDistinctionSummaryv3Raw(requestParameters: ViewDistinctionSummaryv3Request): Promise<runtime.ApiResponse<DistinctionSummaryV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewDistinctionSummaryv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewDistinctionSummaryv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/distinction/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctionSummaryV30FromJSON(jsonValue));
    }

    /**
     * Fetch an Distinction summary
     */
    async viewDistinctionSummaryv3(requestParameters: ViewDistinctionSummaryv3Request): Promise<DistinctionSummaryV30> {
        const response = await this.viewDistinctionSummaryv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all distinctions
     */
    async viewDistinctionsv3Raw(requestParameters: ViewDistinctionsv3Request): Promise<runtime.ApiResponse<DistinctionsSummaryV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewDistinctionsv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/distinctions`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctionsSummaryV30FromJSON(jsonValue));
    }

    /**
     * Fetch all distinctions
     */
    async viewDistinctionsv3(requestParameters: ViewDistinctionsv3Request): Promise<DistinctionsSummaryV30> {
        const response = await this.viewDistinctionsv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Distinction
     */
    async viewDistinctionv3Raw(requestParameters: ViewDistinctionv3Request): Promise<runtime.ApiResponse<DistinctionV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewDistinctionv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewDistinctionv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/distinction/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DistinctionV30FromJSON(jsonValue));
    }

    /**
     * Fetch an Distinction
     */
    async viewDistinctionv3(requestParameters: ViewDistinctionv3Request): Promise<DistinctionV30> {
        const response = await this.viewDistinctionv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Education Summary
     */
    async viewEducationSummaryv3Raw(requestParameters: ViewEducationSummaryv3Request): Promise<runtime.ApiResponse<EducationSummaryV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEducationSummaryv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewEducationSummaryv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/education/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationSummaryV30FromJSON(jsonValue));
    }

    /**
     * Fetch an Education Summary
     */
    async viewEducationSummaryv3(requestParameters: ViewEducationSummaryv3Request): Promise<EducationSummaryV30> {
        const response = await this.viewEducationSummaryv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all educations
     */
    async viewEducationsv3Raw(requestParameters: ViewEducationsv3Request): Promise<runtime.ApiResponse<EducationsSummaryV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEducationsv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/educations`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationsSummaryV30FromJSON(jsonValue));
    }

    /**
     * Fetch all educations
     */
    async viewEducationsv3(requestParameters: ViewEducationsv3Request): Promise<EducationsSummaryV30> {
        const response = await this.viewEducationsv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Education
     */
    async viewEducationv3Raw(requestParameters: ViewEducationv3Request): Promise<runtime.ApiResponse<EducationV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEducationv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewEducationv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/education/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EducationV30FromJSON(jsonValue));
    }

    /**
     * Fetch an Education
     */
    async viewEducationv3(requestParameters: ViewEducationv3Request): Promise<EducationV30> {
        const response = await this.viewEducationv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all emails for an ORCID ID
     */
    async viewEmailsv3Raw(requestParameters: ViewEmailsv3Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEmailsv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/email`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch all emails for an ORCID ID
     */
    async viewEmailsv3(requestParameters: ViewEmailsv3Request): Promise<void> {
        await this.viewEmailsv3Raw(requestParameters);
    }

    /**
     * Fetch an Employment Summary
     */
    async viewEmploymentSummaryv3Raw(requestParameters: ViewEmploymentSummaryv3Request): Promise<runtime.ApiResponse<EmploymentSummaryV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEmploymentSummaryv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewEmploymentSummaryv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/employment/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmploymentSummaryV30FromJSON(jsonValue));
    }

    /**
     * Fetch an Employment Summary
     */
    async viewEmploymentSummaryv3(requestParameters: ViewEmploymentSummaryv3Request): Promise<EmploymentSummaryV30> {
        const response = await this.viewEmploymentSummaryv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all employments
     */
    async viewEmploymentsv3Raw(requestParameters: ViewEmploymentsv3Request): Promise<runtime.ApiResponse<FundingsV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEmploymentsv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/employments`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FundingsV30FromJSON(jsonValue));
    }

    /**
     * Fetch all employments
     */
    async viewEmploymentsv3(requestParameters: ViewEmploymentsv3Request): Promise<FundingsV30> {
        const response = await this.viewEmploymentsv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Retrive a specific education representation
     * Fetch an Employment
     */
    async viewEmploymentv3Raw(requestParameters: ViewEmploymentv3Request): Promise<runtime.ApiResponse<EmploymentV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewEmploymentv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewEmploymentv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/employment/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmploymentV30FromJSON(jsonValue));
    }

    /**
     * Retrive a specific education representation
     * Fetch an Employment
     */
    async viewEmploymentv3(requestParameters: ViewEmploymentv3Request): Promise<EmploymentV30> {
        const response = await this.viewEmploymentv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch external identifiers
     */
    async viewExternalIdentifiersv3Raw(requestParameters: ViewExternalIdentifiersv3Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewExternalIdentifiersv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("orcid_two_legs", ["/read-public"]);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/v3.0/{orcid}/external-identifiers`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch external identifiers
     */
    async viewExternalIdentifiersv3(requestParameters: ViewExternalIdentifiersv3Request): Promise<void> {
        await this.viewExternalIdentifiersv3Raw(requestParameters);
    }

    /**
     * Fetch external identifier
     */
    async viewExternalIdentifierv3Raw(requestParameters: ViewExternalIdentifierv3Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewExternalIdentifierv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewExternalIdentifierv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/external-identifiers/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch external identifier
     */
    async viewExternalIdentifierv3(requestParameters: ViewExternalIdentifierv3Request): Promise<void> {
        await this.viewExternalIdentifierv3Raw(requestParameters);
    }

    /**
     * Fetch a Funding Summary
     */
    async viewFundingSummaryv3Raw(requestParameters: ViewFundingSummaryv3Request): Promise<runtime.ApiResponse<FundingSummaryV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewFundingSummaryv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewFundingSummaryv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/funding/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FundingSummaryV30FromJSON(jsonValue));
    }

    /**
     * Fetch a Funding Summary
     */
    async viewFundingSummaryv3(requestParameters: ViewFundingSummaryv3Request): Promise<FundingSummaryV30> {
        const response = await this.viewFundingSummaryv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all fundings
     */
    async viewFundingsv3Raw(requestParameters: ViewFundingsv3Request): Promise<runtime.ApiResponse<FundingsV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewFundingsv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/fundings`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FundingsV30FromJSON(jsonValue));
    }

    /**
     * Fetch all fundings
     */
    async viewFundingsv3(requestParameters: ViewFundingsv3Request): Promise<FundingsV30> {
        const response = await this.viewFundingsv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch a Funding
     */
    async viewFundingv3Raw(requestParameters: ViewFundingv3Request): Promise<runtime.ApiResponse<FundingV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewFundingv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewFundingv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/funding/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => FundingV30FromJSON(jsonValue));
    }

    /**
     * Fetch a Funding
     */
    async viewFundingv3(requestParameters: ViewFundingv3Request): Promise<FundingV30> {
        const response = await this.viewFundingv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an InvitedPosition summary
     */
    async viewInvitedPositionSummaryv3Raw(requestParameters: ViewInvitedPositionSummaryv3Request): Promise<runtime.ApiResponse<InvitedPositionSummaryV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewInvitedPositionSummaryv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewInvitedPositionSummaryv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/invited-position/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitedPositionSummaryV30FromJSON(jsonValue));
    }

    /**
     * Fetch an InvitedPosition summary
     */
    async viewInvitedPositionSummaryv3(requestParameters: ViewInvitedPositionSummaryv3Request): Promise<InvitedPositionSummaryV30> {
        const response = await this.viewInvitedPositionSummaryv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all invitedPositions
     */
    async viewInvitedPositionsv3Raw(requestParameters: ViewInvitedPositionsv3Request): Promise<runtime.ApiResponse<InvitedPositionsV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewInvitedPositionsv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/invited-positions`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitedPositionsV30FromJSON(jsonValue));
    }

    /**
     * Fetch all invitedPositions
     */
    async viewInvitedPositionsv3(requestParameters: ViewInvitedPositionsv3Request): Promise<InvitedPositionsV30> {
        const response = await this.viewInvitedPositionsv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an InvitedPosition
     */
    async viewInvitedPositionv3Raw(requestParameters: ViewInvitedPositionv3Request): Promise<runtime.ApiResponse<InvitedPositionV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewInvitedPositionv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewInvitedPositionv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/invited-position/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitedPositionV30FromJSON(jsonValue));
    }

    /**
     * Fetch an InvitedPosition
     */
    async viewInvitedPositionv3(requestParameters: ViewInvitedPositionv3Request): Promise<InvitedPositionV30> {
        const response = await this.viewInvitedPositionv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch keywords
     */
    async viewKeywordsv3Raw(requestParameters: ViewKeywordsv3Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewKeywordsv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/keywords`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch keywords
     */
    async viewKeywordsv3(requestParameters: ViewKeywordsv3Request): Promise<void> {
        await this.viewKeywordsv3Raw(requestParameters);
    }

    /**
     * Fetch keyword
     */
    async viewKeywordv3Raw(requestParameters: ViewKeywordv3Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewKeywordv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewKeywordv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/keywords/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch keyword
     */
    async viewKeywordv3(requestParameters: ViewKeywordv3Request): Promise<void> {
        await this.viewKeywordv3Raw(requestParameters);
    }

    /**
     * Fetch an Membership summary
     */
    async viewMembershipSummaryv3Raw(requestParameters: ViewMembershipSummaryv3Request): Promise<runtime.ApiResponse<MembershipSummaryV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewMembershipSummaryv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewMembershipSummaryv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/membership/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipSummaryV30FromJSON(jsonValue));
    }

    /**
     * Fetch an Membership summary
     */
    async viewMembershipSummaryv3(requestParameters: ViewMembershipSummaryv3Request): Promise<MembershipSummaryV30> {
        const response = await this.viewMembershipSummaryv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all memberships
     */
    async viewMembershipsv3Raw(requestParameters: ViewMembershipsv3Request): Promise<runtime.ApiResponse<MembershipsV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewMembershipsv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/memberships`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipsV30FromJSON(jsonValue));
    }

    /**
     * Fetch all memberships
     */
    async viewMembershipsv3(requestParameters: ViewMembershipsv3Request): Promise<MembershipsV30> {
        const response = await this.viewMembershipsv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Membership
     */
    async viewMembershipv3Raw(requestParameters: ViewMembershipv3Request): Promise<runtime.ApiResponse<MembershipV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewMembershipv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewMembershipv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/membership/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MembershipV30FromJSON(jsonValue));
    }

    /**
     * Fetch an Membership
     */
    async viewMembershipv3(requestParameters: ViewMembershipv3Request): Promise<MembershipV30> {
        const response = await this.viewMembershipv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch Other names
     */
    async viewOtherNamesv3Raw(requestParameters: ViewOtherNamesv3Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewOtherNamesv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/other-names`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch Other names
     */
    async viewOtherNamesv3(requestParameters: ViewOtherNamesv3Request): Promise<void> {
        await this.viewOtherNamesv3Raw(requestParameters);
    }

    /**
     * Fetch Other name
     */
    async viewOtherNamev3Raw(requestParameters: ViewOtherNamev3Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewOtherNamev3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewOtherNamev3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/other-names/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch Other name
     */
    async viewOtherNamev3(requestParameters: ViewOtherNamev3Request): Promise<void> {
        await this.viewOtherNamev3Raw(requestParameters);
    }

    /**
     * Fetch a Peer Review Summary
     */
    async viewPeerReviewSummaryv3Raw(requestParameters: ViewPeerReviewSummaryv3Request): Promise<runtime.ApiResponse<PeerReviewSummaryV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPeerReviewSummaryv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewPeerReviewSummaryv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/peer-review/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PeerReviewSummaryV30FromJSON(jsonValue));
    }

    /**
     * Fetch a Peer Review Summary
     */
    async viewPeerReviewSummaryv3(requestParameters: ViewPeerReviewSummaryv3Request): Promise<PeerReviewSummaryV30> {
        const response = await this.viewPeerReviewSummaryv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all peer reviews
     */
    async viewPeerReviewsv3Raw(requestParameters: ViewPeerReviewsv3Request): Promise<runtime.ApiResponse<PeerReviewsV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPeerReviewsv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/peer-reviews`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PeerReviewsV30FromJSON(jsonValue));
    }

    /**
     * Fetch all peer reviews
     */
    async viewPeerReviewsv3(requestParameters: ViewPeerReviewsv3Request): Promise<PeerReviewsV30> {
        const response = await this.viewPeerReviewsv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch a Peer Review
     */
    async viewPeerReviewv3Raw(requestParameters: ViewPeerReviewv3Request): Promise<runtime.ApiResponse<PeerReviewV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPeerReviewv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewPeerReviewv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/peer-review/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PeerReviewV30FromJSON(jsonValue));
    }

    /**
     * Fetch a Peer Review
     */
    async viewPeerReviewv3(requestParameters: ViewPeerReviewv3Request): Promise<PeerReviewV30> {
        const response = await this.viewPeerReviewv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch personal details for an ORCID ID
     */
    async viewPersonalDetailsv3Raw(requestParameters: ViewPersonalDetailsv3Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPersonalDetailsv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/personal-details`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch personal details for an ORCID ID
     */
    async viewPersonalDetailsv3(requestParameters: ViewPersonalDetailsv3Request): Promise<void> {
        await this.viewPersonalDetailsv3Raw(requestParameters);
    }

    /**
     * Fetch person details
     */
    async viewPersonv3Raw(requestParameters: ViewPersonv3Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewPersonv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/person`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch person details
     */
    async viewPersonv3(requestParameters: ViewPersonv3Request): Promise<void> {
        await this.viewPersonv3Raw(requestParameters);
    }

    /**
     * Fetch an Qualification summary
     */
    async viewQualificationSummaryv3Raw(requestParameters: ViewQualificationSummaryv3Request): Promise<runtime.ApiResponse<QualificationSummaryV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewQualificationSummaryv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewQualificationSummaryv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/qualification/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QualificationSummaryV30FromJSON(jsonValue));
    }

    /**
     * Fetch an Qualification summary
     */
    async viewQualificationSummaryv3(requestParameters: ViewQualificationSummaryv3Request): Promise<QualificationSummaryV30> {
        const response = await this.viewQualificationSummaryv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all qualifications
     */
    async viewQualificationsv3Raw(requestParameters: ViewQualificationsv3Request): Promise<runtime.ApiResponse<QualificationsV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewQualificationsv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/qualifications`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QualificationsV30FromJSON(jsonValue));
    }

    /**
     * Fetch all qualifications
     */
    async viewQualificationsv3(requestParameters: ViewQualificationsv3Request): Promise<QualificationsV30> {
        const response = await this.viewQualificationsv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Qualification
     */
    async viewQualificationv3Raw(requestParameters: ViewQualificationv3Request): Promise<runtime.ApiResponse<QualificationV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewQualificationv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewQualificationv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/qualification/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => QualificationV30FromJSON(jsonValue));
    }

    /**
     * Fetch an Qualification
     */
    async viewQualificationv3(requestParameters: ViewQualificationv3Request): Promise<QualificationV30> {
        const response = await this.viewQualificationv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch record details
     */
    async viewRecordv3Raw(requestParameters: ViewRecordv3Request): Promise<runtime.ApiResponse<RecordV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewRecordv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => RecordV30FromJSON(jsonValue));
    }

    /**
     * Fetch record details
     */
    async viewRecordv3(requestParameters: ViewRecordv3Request): Promise<RecordV30> {
        const response = await this.viewRecordv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch a Research Resource summary
     */
    async viewResearchResourceSummaryv3Raw(requestParameters: ViewResearchResourceSummaryv3Request): Promise<runtime.ApiResponse<ResearchResourceSummaryV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewResearchResourceSummaryv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewResearchResourceSummaryv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/research-resource/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResearchResourceSummaryV30FromJSON(jsonValue));
    }

    /**
     * Fetch a Research Resource summary
     */
    async viewResearchResourceSummaryv3(requestParameters: ViewResearchResourceSummaryv3Request): Promise<ResearchResourceSummaryV30> {
        const response = await this.viewResearchResourceSummaryv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all Research Resources
     */
    async viewResearchResourcesv3Raw(requestParameters: ViewResearchResourcesv3Request): Promise<runtime.ApiResponse<ResearchResourcesV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewResearchResourcesv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/research-resources`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResearchResourcesV30FromJSON(jsonValue));
    }

    /**
     * Fetch all Research Resources
     */
    async viewResearchResourcesv3(requestParameters: ViewResearchResourcesv3Request): Promise<ResearchResourcesV30> {
        const response = await this.viewResearchResourcesv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch a Research Resource
     */
    async viewResearchResourcev3Raw(requestParameters: ViewResearchResourcev3Request): Promise<runtime.ApiResponse<ResearchResourceV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewResearchResourcev3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewResearchResourcev3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/research-resource/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ResearchResourceV30FromJSON(jsonValue));
    }

    /**
     * Fetch a Research Resource
     */
    async viewResearchResourcev3(requestParameters: ViewResearchResourcev3Request): Promise<ResearchResourceV30> {
        const response = await this.viewResearchResourcev3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all researcher urls for an ORCID ID
     */
    async viewResearcherUrlsv3Raw(requestParameters: ViewResearcherUrlsv3Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewResearcherUrlsv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/researcher-urls`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch all researcher urls for an ORCID ID
     */
    async viewResearcherUrlsv3(requestParameters: ViewResearcherUrlsv3Request): Promise<void> {
        await this.viewResearcherUrlsv3Raw(requestParameters);
    }

    /**
     * Fetch one researcher url for an ORCID ID
     */
    async viewResearcherUrlv3Raw(requestParameters: ViewResearcherUrlv3Request): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewResearcherUrlv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewResearcherUrlv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/researcher-urls/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Fetch one researcher url for an ORCID ID
     */
    async viewResearcherUrlv3(requestParameters: ViewResearcherUrlv3Request): Promise<void> {
        await this.viewResearcherUrlv3Raw(requestParameters);
    }

    /**
     * Fetch an Service summary
     */
    async viewServiceSummaryv3Raw(requestParameters: ViewServiceSummaryv3Request): Promise<runtime.ApiResponse<ServiceSummaryV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewServiceSummaryv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewServiceSummaryv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/service/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceSummaryV30FromJSON(jsonValue));
    }

    /**
     * Fetch an Service summary
     */
    async viewServiceSummaryv3(requestParameters: ViewServiceSummaryv3Request): Promise<ServiceSummaryV30> {
        const response = await this.viewServiceSummaryv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all services
     */
    async viewServicesv3Raw(requestParameters: ViewServicesv3Request): Promise<runtime.ApiResponse<ServicesV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewServicesv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/services`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ServicesV30FromJSON(jsonValue));
    }

    /**
     * Fetch all services
     */
    async viewServicesv3(requestParameters: ViewServicesv3Request): Promise<ServicesV30> {
        const response = await this.viewServicesv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch an Service
     */
    async viewServicev3Raw(requestParameters: ViewServicev3Request): Promise<runtime.ApiResponse<ServiceV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewServicev3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewServicev3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/service/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ServiceV30FromJSON(jsonValue));
    }

    /**
     * Fetch an Service
     */
    async viewServicev3(requestParameters: ViewServicev3Request): Promise<ServiceV30> {
        const response = await this.viewServicev3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch specified works
     */
    async viewSpecifiedWorksv3Raw(requestParameters: ViewSpecifiedWorksv3Request): Promise<runtime.ApiResponse<WorkBulkV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewSpecifiedWorksv3.');
        }

        if (requestParameters.putCodes === null || requestParameters.putCodes === undefined) {
            throw new runtime.RequiredError('putCodes','Required parameter requestParameters.putCodes was null or undefined when calling viewSpecifiedWorksv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/works/{putCodes}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCodes"}}`, encodeURIComponent(String(requestParameters.putCodes))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkBulkV30FromJSON(jsonValue));
    }

    /**
     * Fetch specified works
     */
    async viewSpecifiedWorksv3(requestParameters: ViewSpecifiedWorksv3Request): Promise<WorkBulkV30> {
        const response = await this.viewSpecifiedWorksv3Raw(requestParameters);
        return await response.value();
    }

    /**
     */
    async viewStatusJsonRaw(): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/pubStatus`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async viewStatusJson(): Promise<void> {
        await this.viewStatusJsonRaw();
    }

    /**
     * Check the server status
     */
    async viewStatusTextv3Raw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Check the server status
     */
    async viewStatusTextv3(): Promise<string> {
        const response = await this.viewStatusTextv3Raw();
        return await response.value();
    }

    /**
     * Fetch a Work Summary
     */
    async viewWorkSummaryv3Raw(requestParameters: ViewWorkSummaryv3Request): Promise<runtime.ApiResponse<WorkSummaryV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewWorkSummaryv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewWorkSummaryv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/work/summary/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkSummaryV30FromJSON(jsonValue));
    }

    /**
     * Fetch a Work Summary
     */
    async viewWorkSummaryv3(requestParameters: ViewWorkSummaryv3Request): Promise<WorkSummaryV30> {
        const response = await this.viewWorkSummaryv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all works
     */
    async viewWorksv3Raw(requestParameters: ViewWorksv3Request): Promise<runtime.ApiResponse<WorksSummaryV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewWorksv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/works`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorksSummaryV30FromJSON(jsonValue));
    }

    /**
     * Fetch all works
     */
    async viewWorksv3(requestParameters: ViewWorksv3Request): Promise<WorksSummaryV30> {
        const response = await this.viewWorksv3Raw(requestParameters);
        return await response.value();
    }

    /**
     * More notes about this method
     * Fetch a Work
     */
    async viewWorkv3Raw(requestParameters: ViewWorkv3Request): Promise<runtime.ApiResponse<WorkV30>> {
        if (requestParameters.orcid === null || requestParameters.orcid === undefined) {
            throw new runtime.RequiredError('orcid','Required parameter requestParameters.orcid was null or undefined when calling viewWorkv3.');
        }

        if (requestParameters.putCode === null || requestParameters.putCode === undefined) {
            throw new runtime.RequiredError('putCode','Required parameter requestParameters.putCode was null or undefined when calling viewWorkv3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v3.0/{orcid}/work/{putCode}`.replace(`{${"orcid"}}`, encodeURIComponent(String(requestParameters.orcid))).replace(`{${"putCode"}}`, encodeURIComponent(String(requestParameters.putCode))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkV30FromJSON(jsonValue));
    }

    /**
     * More notes about this method
     * Fetch a Work
     */
    async viewWorkv3(requestParameters: ViewWorkv3Request): Promise<WorkV30> {
        const response = await this.viewWorkv3Raw(requestParameters);
        return await response.value();
    }

}
