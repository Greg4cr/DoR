/* tslint:disable */
/* eslint-disable */
/**
 * ORCID Public
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: Latest
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface ActivitiesSummaryV20
 */
export interface ActivitiesSummaryV20 {
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof ActivitiesSummaryV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {EducationsSummaryV20}
     * @memberof ActivitiesSummaryV20
     */
    educations?: EducationsSummaryV20;
    /**
     *
     * @type {EmploymentsSummaryV20}
     * @memberof ActivitiesSummaryV20
     */
    employments?: EmploymentsSummaryV20;
    /**
     *
     * @type {FundingsV20}
     * @memberof ActivitiesSummaryV20
     */
    fundings?: FundingsV20;
    /**
     *
     * @type {PeerReviewsV20}
     * @memberof ActivitiesSummaryV20
     */
    peerReviews?: PeerReviewsV20;
    /**
     *
     * @type {WorksSummaryV20}
     * @memberof ActivitiesSummaryV20
     */
    works?: WorksSummaryV20;
    /**
     *
     * @type {string}
     * @memberof ActivitiesSummaryV20
     */
    path?: string;
}
/**
 *
 * @export
 * @interface ActivitiesSummaryV30
 */
export interface ActivitiesSummaryV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof ActivitiesSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {DistinctionsSummaryV30}
     * @memberof ActivitiesSummaryV30
     */
    distinctions?: DistinctionsSummaryV30;
    /**
     *
     * @type {EducationsSummaryV30}
     * @memberof ActivitiesSummaryV30
     */
    educations?: EducationsSummaryV30;
    /**
     *
     * @type {EmploymentsSummaryV30}
     * @memberof ActivitiesSummaryV30
     */
    employments?: EmploymentsSummaryV30;
    /**
     *
     * @type {FundingsV30}
     * @memberof ActivitiesSummaryV30
     */
    fundings?: FundingsV30;
    /**
     *
     * @type {InvitedPositionsV30}
     * @memberof ActivitiesSummaryV30
     */
    invitedPositions?: InvitedPositionsV30;
    /**
     *
     * @type {MembershipsV30}
     * @memberof ActivitiesSummaryV30
     */
    memberships?: MembershipsV30;
    /**
     *
     * @type {PeerReviewsV30}
     * @memberof ActivitiesSummaryV30
     */
    peerReviews?: PeerReviewsV30;
    /**
     *
     * @type {QualificationsV30}
     * @memberof ActivitiesSummaryV30
     */
    qualifications?: QualificationsV30;
    /**
     *
     * @type {ResearchResourcesV30}
     * @memberof ActivitiesSummaryV30
     */
    researchResources?: ResearchResourcesV30;
    /**
     *
     * @type {ServicesV30}
     * @memberof ActivitiesSummaryV30
     */
    services?: ServicesV30;
    /**
     *
     * @type {WorksSummaryV30}
     * @memberof ActivitiesSummaryV30
     */
    works?: WorksSummaryV30;
    /**
     *
     * @type {string}
     * @memberof ActivitiesSummaryV30
     */
    path?: string;
}
/**
 *
 * @export
 * @interface ActivitiesSummaryV30Rc1
 */
export interface ActivitiesSummaryV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof ActivitiesSummaryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {DistinctionsV30Rc1}
     * @memberof ActivitiesSummaryV30Rc1
     */
    distinctions?: DistinctionsV30Rc1;
    /**
     *
     * @type {EducationsSummaryV30Rc1}
     * @memberof ActivitiesSummaryV30Rc1
     */
    educations?: EducationsSummaryV30Rc1;
    /**
     *
     * @type {EmploymentsSummaryV30Rc1}
     * @memberof ActivitiesSummaryV30Rc1
     */
    employments?: EmploymentsSummaryV30Rc1;
    /**
     *
     * @type {FundingsV30Rc1}
     * @memberof ActivitiesSummaryV30Rc1
     */
    fundings?: FundingsV30Rc1;
    /**
     *
     * @type {InvitedPositionsV30Rc1}
     * @memberof ActivitiesSummaryV30Rc1
     */
    invitedPositions?: InvitedPositionsV30Rc1;
    /**
     *
     * @type {MembershipsV30Rc1}
     * @memberof ActivitiesSummaryV30Rc1
     */
    memberships?: MembershipsV30Rc1;
    /**
     *
     * @type {PeerReviewsV30Rc1}
     * @memberof ActivitiesSummaryV30Rc1
     */
    peerReviews?: PeerReviewsV30Rc1;
    /**
     *
     * @type {QualificationsV30Rc1}
     * @memberof ActivitiesSummaryV30Rc1
     */
    qualifications?: QualificationsV30Rc1;
    /**
     *
     * @type {ResearchResourcesV30Rc1}
     * @memberof ActivitiesSummaryV30Rc1
     */
    researchResources?: ResearchResourcesV30Rc1;
    /**
     *
     * @type {ServicesV30Rc1}
     * @memberof ActivitiesSummaryV30Rc1
     */
    services?: ServicesV30Rc1;
    /**
     *
     * @type {WorksSummaryV30Rc1}
     * @memberof ActivitiesSummaryV30Rc1
     */
    works?: WorksSummaryV30Rc1;
    /**
     *
     * @type {string}
     * @memberof ActivitiesSummaryV30Rc1
     */
    path?: string;
}
/**
 *
 * @export
 * @interface ActivitiesSummaryV30Rc2
 */
export interface ActivitiesSummaryV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof ActivitiesSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {DistinctionsSummaryV30Rc2}
     * @memberof ActivitiesSummaryV30Rc2
     */
    distinctions?: DistinctionsSummaryV30Rc2;
    /**
     *
     * @type {EducationsSummaryV30Rc2}
     * @memberof ActivitiesSummaryV30Rc2
     */
    educations?: EducationsSummaryV30Rc2;
    /**
     *
     * @type {EmploymentsSummaryV30Rc2}
     * @memberof ActivitiesSummaryV30Rc2
     */
    employments?: EmploymentsSummaryV30Rc2;
    /**
     *
     * @type {FundingsV30Rc2}
     * @memberof ActivitiesSummaryV30Rc2
     */
    fundings?: FundingsV30Rc2;
    /**
     *
     * @type {InvitedPositionsV30Rc2}
     * @memberof ActivitiesSummaryV30Rc2
     */
    invitedPositions?: InvitedPositionsV30Rc2;
    /**
     *
     * @type {MembershipsV30Rc2}
     * @memberof ActivitiesSummaryV30Rc2
     */
    memberships?: MembershipsV30Rc2;
    /**
     *
     * @type {PeerReviewsV30Rc2}
     * @memberof ActivitiesSummaryV30Rc2
     */
    peerReviews?: PeerReviewsV30Rc2;
    /**
     *
     * @type {QualificationsV30Rc2}
     * @memberof ActivitiesSummaryV30Rc2
     */
    qualifications?: QualificationsV30Rc2;
    /**
     *
     * @type {ResearchResourcesV30Rc2}
     * @memberof ActivitiesSummaryV30Rc2
     */
    researchResources?: ResearchResourcesV30Rc2;
    /**
     *
     * @type {ServicesV30Rc2}
     * @memberof ActivitiesSummaryV30Rc2
     */
    services?: ServicesV30Rc2;
    /**
     *
     * @type {WorksSummaryV30Rc2}
     * @memberof ActivitiesSummaryV30Rc2
     */
    works?: WorksSummaryV30Rc2;
    /**
     *
     * @type {string}
     * @memberof ActivitiesSummaryV30Rc2
     */
    path?: string;
}
/**
 *
 * @export
 * @interface AddressV20
 */
export interface AddressV20 {
    /**
     *
     * @type {CreatedDateV20}
     * @memberof AddressV20
     */
    createdDate?: CreatedDateV20;
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof AddressV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {SourceV20}
     * @memberof AddressV20
     */
    source?: SourceV20;
    /**
     *
     * @type {CountryV20}
     * @memberof AddressV20
     */
    country: CountryV20;
    /**
     *
     * @type {string}
     * @memberof AddressV20
     */
    visibility?: AddressV20VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof AddressV20
     */
    path?: string;
    /**
     *
     * @type {number}
     * @memberof AddressV20
     */
    putCode?: number;
    /**
     *
     * @type {number}
     * @memberof AddressV20
     */
    displayIndex?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum AddressV20VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface AddressV30
 */
export interface AddressV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof AddressV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof AddressV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof AddressV30
     */
    source?: SourceV30;
    /**
     *
     * @type {CountryV30}
     * @memberof AddressV30
     */
    country: CountryV30;
    /**
     *
     * @type {string}
     * @memberof AddressV30
     */
    visibility?: AddressV30VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof AddressV30
     */
    path?: string;
    /**
     *
     * @type {number}
     * @memberof AddressV30
     */
    putCode?: number;
    /**
     *
     * @type {number}
     * @memberof AddressV30
     */
    displayIndex?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum AddressV30VisibilityEnum {
    Limited = 'limited',
    RegisteredOnly = 'registered-only',
    Public = 'public'
}

/**
 *
 * @export
 * @interface AddressV30Rc1
 */
export interface AddressV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof AddressV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof AddressV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof AddressV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {CountryV30Rc1}
     * @memberof AddressV30Rc1
     */
    country: CountryV30Rc1;
    /**
     *
     * @type {string}
     * @memberof AddressV30Rc1
     */
    visibility?: AddressV30Rc1VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof AddressV30Rc1
     */
    path?: string;
    /**
     *
     * @type {number}
     * @memberof AddressV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {number}
     * @memberof AddressV30Rc1
     */
    displayIndex?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum AddressV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface AddressV30Rc2
 */
export interface AddressV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof AddressV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof AddressV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof AddressV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {CountryV30Rc2}
     * @memberof AddressV30Rc2
     */
    country: CountryV30Rc2;
    /**
     *
     * @type {string}
     * @memberof AddressV30Rc2
     */
    visibility?: AddressV30Rc2VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof AddressV30Rc2
     */
    path?: string;
    /**
     *
     * @type {number}
     * @memberof AddressV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {number}
     * @memberof AddressV30Rc2
     */
    displayIndex?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum AddressV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface AddressesV20
 */
export interface AddressesV20 {
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof AddressesV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {Array<AddressV20>}
     * @memberof AddressesV20
     */
    address?: Array<AddressV20>;
    /**
     *
     * @type {string}
     * @memberof AddressesV20
     */
    path?: string;
}
/**
 *
 * @export
 * @interface AddressesV30
 */
export interface AddressesV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof AddressesV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {Array<AddressV30>}
     * @memberof AddressesV30
     */
    address?: Array<AddressV30>;
    /**
     *
     * @type {string}
     * @memberof AddressesV30
     */
    path?: string;
}
/**
 *
 * @export
 * @interface AddressesV30Rc1
 */
export interface AddressesV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof AddressesV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {Array<AddressV30Rc1>}
     * @memberof AddressesV30Rc1
     */
    address?: Array<AddressV30Rc1>;
    /**
     *
     * @type {string}
     * @memberof AddressesV30Rc1
     */
    path?: string;
}
/**
 *
 * @export
 * @interface AddressesV30Rc2
 */
export interface AddressesV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof AddressesV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {Array<AddressV30Rc2>}
     * @memberof AddressesV30Rc2
     */
    address?: Array<AddressV30Rc2>;
    /**
     *
     * @type {string}
     * @memberof AddressesV30Rc2
     */
    path?: string;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30
 */
export interface AffiliationGroupV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof AffiliationGroupV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof AffiliationGroupV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {Array<AffiliationSummaryV30>}
     * @memberof AffiliationGroupV30
     */
    summaries?: Array<AffiliationSummaryV30>;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30DistinctionSummaryV30
 */
export interface AffiliationGroupV30DistinctionSummaryV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof AffiliationGroupV30DistinctionSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof AffiliationGroupV30DistinctionSummaryV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {Array<DistinctionSummaryV30>}
     * @memberof AffiliationGroupV30DistinctionSummaryV30
     */
    summaries?: Array<DistinctionSummaryV30>;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30EducationSummaryV30
 */
export interface AffiliationGroupV30EducationSummaryV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof AffiliationGroupV30EducationSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof AffiliationGroupV30EducationSummaryV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {Array<EducationSummaryV30>}
     * @memberof AffiliationGroupV30EducationSummaryV30
     */
    summaries?: Array<EducationSummaryV30>;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30EmploymentSummaryV30
 */
export interface AffiliationGroupV30EmploymentSummaryV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof AffiliationGroupV30EmploymentSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof AffiliationGroupV30EmploymentSummaryV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {Array<EmploymentSummaryV30>}
     * @memberof AffiliationGroupV30EmploymentSummaryV30
     */
    summaries?: Array<EmploymentSummaryV30>;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30InvitedPositionSummaryV30
 */
export interface AffiliationGroupV30InvitedPositionSummaryV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof AffiliationGroupV30InvitedPositionSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof AffiliationGroupV30InvitedPositionSummaryV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {Array<InvitedPositionSummaryV30>}
     * @memberof AffiliationGroupV30InvitedPositionSummaryV30
     */
    summaries?: Array<InvitedPositionSummaryV30>;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30MembershipSummaryV30
 */
export interface AffiliationGroupV30MembershipSummaryV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof AffiliationGroupV30MembershipSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof AffiliationGroupV30MembershipSummaryV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {Array<MembershipSummaryV30>}
     * @memberof AffiliationGroupV30MembershipSummaryV30
     */
    summaries?: Array<MembershipSummaryV30>;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30QualificationSummaryV30
 */
export interface AffiliationGroupV30QualificationSummaryV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof AffiliationGroupV30QualificationSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof AffiliationGroupV30QualificationSummaryV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {Array<QualificationSummaryV30>}
     * @memberof AffiliationGroupV30QualificationSummaryV30
     */
    summaries?: Array<QualificationSummaryV30>;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30Rc1
 */
export interface AffiliationGroupV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof AffiliationGroupV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof AffiliationGroupV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {Array<AffiliationSummaryV30Rc1>}
     * @memberof AffiliationGroupV30Rc1
     */
    summaries?: Array<AffiliationSummaryV30Rc1>;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30Rc1DistinctionSummaryV30Rc1
 */
export interface AffiliationGroupV30Rc1DistinctionSummaryV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof AffiliationGroupV30Rc1DistinctionSummaryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof AffiliationGroupV30Rc1DistinctionSummaryV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {Array<DistinctionSummaryV30Rc1>}
     * @memberof AffiliationGroupV30Rc1DistinctionSummaryV30Rc1
     */
    summaries?: Array<DistinctionSummaryV30Rc1>;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30Rc1EducationSummaryV30Rc1
 */
export interface AffiliationGroupV30Rc1EducationSummaryV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof AffiliationGroupV30Rc1EducationSummaryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof AffiliationGroupV30Rc1EducationSummaryV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {Array<EducationSummaryV30Rc1>}
     * @memberof AffiliationGroupV30Rc1EducationSummaryV30Rc1
     */
    summaries?: Array<EducationSummaryV30Rc1>;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30Rc1EmploymentSummaryV30Rc1
 */
export interface AffiliationGroupV30Rc1EmploymentSummaryV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof AffiliationGroupV30Rc1EmploymentSummaryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof AffiliationGroupV30Rc1EmploymentSummaryV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {Array<EmploymentSummaryV30Rc1>}
     * @memberof AffiliationGroupV30Rc1EmploymentSummaryV30Rc1
     */
    summaries?: Array<EmploymentSummaryV30Rc1>;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30Rc1InvitedPositionSummaryV30Rc1
 */
export interface AffiliationGroupV30Rc1InvitedPositionSummaryV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof AffiliationGroupV30Rc1InvitedPositionSummaryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof AffiliationGroupV30Rc1InvitedPositionSummaryV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {Array<InvitedPositionSummaryV30Rc1>}
     * @memberof AffiliationGroupV30Rc1InvitedPositionSummaryV30Rc1
     */
    summaries?: Array<InvitedPositionSummaryV30Rc1>;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30Rc1MembershipSummaryV30Rc1
 */
export interface AffiliationGroupV30Rc1MembershipSummaryV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof AffiliationGroupV30Rc1MembershipSummaryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof AffiliationGroupV30Rc1MembershipSummaryV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {Array<MembershipSummaryV30Rc1>}
     * @memberof AffiliationGroupV30Rc1MembershipSummaryV30Rc1
     */
    summaries?: Array<MembershipSummaryV30Rc1>;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30Rc1QualificationSummaryV30Rc1
 */
export interface AffiliationGroupV30Rc1QualificationSummaryV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof AffiliationGroupV30Rc1QualificationSummaryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof AffiliationGroupV30Rc1QualificationSummaryV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {Array<QualificationSummaryV30Rc1>}
     * @memberof AffiliationGroupV30Rc1QualificationSummaryV30Rc1
     */
    summaries?: Array<QualificationSummaryV30Rc1>;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30Rc1ServiceSummaryV30Rc1
 */
export interface AffiliationGroupV30Rc1ServiceSummaryV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof AffiliationGroupV30Rc1ServiceSummaryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof AffiliationGroupV30Rc1ServiceSummaryV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {Array<ServiceSummaryV30Rc1>}
     * @memberof AffiliationGroupV30Rc1ServiceSummaryV30Rc1
     */
    summaries?: Array<ServiceSummaryV30Rc1>;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30Rc2
 */
export interface AffiliationGroupV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof AffiliationGroupV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof AffiliationGroupV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {Array<AffiliationSummaryV30Rc2>}
     * @memberof AffiliationGroupV30Rc2
     */
    summaries?: Array<AffiliationSummaryV30Rc2>;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30Rc2DistinctionSummaryV30Rc2
 */
export interface AffiliationGroupV30Rc2DistinctionSummaryV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof AffiliationGroupV30Rc2DistinctionSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof AffiliationGroupV30Rc2DistinctionSummaryV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {Array<DistinctionSummaryV30Rc2>}
     * @memberof AffiliationGroupV30Rc2DistinctionSummaryV30Rc2
     */
    summaries?: Array<DistinctionSummaryV30Rc2>;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30Rc2EducationSummaryV30Rc2
 */
export interface AffiliationGroupV30Rc2EducationSummaryV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof AffiliationGroupV30Rc2EducationSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof AffiliationGroupV30Rc2EducationSummaryV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {Array<EducationSummaryV30Rc2>}
     * @memberof AffiliationGroupV30Rc2EducationSummaryV30Rc2
     */
    summaries?: Array<EducationSummaryV30Rc2>;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30Rc2EmploymentSummaryV30Rc2
 */
export interface AffiliationGroupV30Rc2EmploymentSummaryV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof AffiliationGroupV30Rc2EmploymentSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof AffiliationGroupV30Rc2EmploymentSummaryV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {Array<EmploymentSummaryV30Rc2>}
     * @memberof AffiliationGroupV30Rc2EmploymentSummaryV30Rc2
     */
    summaries?: Array<EmploymentSummaryV30Rc2>;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30Rc2InvitedPositionSummaryV30Rc2
 */
export interface AffiliationGroupV30Rc2InvitedPositionSummaryV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof AffiliationGroupV30Rc2InvitedPositionSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof AffiliationGroupV30Rc2InvitedPositionSummaryV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {Array<InvitedPositionSummaryV30Rc2>}
     * @memberof AffiliationGroupV30Rc2InvitedPositionSummaryV30Rc2
     */
    summaries?: Array<InvitedPositionSummaryV30Rc2>;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30Rc2MembershipSummaryV30Rc2
 */
export interface AffiliationGroupV30Rc2MembershipSummaryV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof AffiliationGroupV30Rc2MembershipSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof AffiliationGroupV30Rc2MembershipSummaryV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {Array<MembershipSummaryV30Rc2>}
     * @memberof AffiliationGroupV30Rc2MembershipSummaryV30Rc2
     */
    summaries?: Array<MembershipSummaryV30Rc2>;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30Rc2QualificationSummaryV30Rc2
 */
export interface AffiliationGroupV30Rc2QualificationSummaryV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof AffiliationGroupV30Rc2QualificationSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof AffiliationGroupV30Rc2QualificationSummaryV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {Array<QualificationSummaryV30Rc2>}
     * @memberof AffiliationGroupV30Rc2QualificationSummaryV30Rc2
     */
    summaries?: Array<QualificationSummaryV30Rc2>;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30Rc2ServiceSummaryV30Rc2
 */
export interface AffiliationGroupV30Rc2ServiceSummaryV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof AffiliationGroupV30Rc2ServiceSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof AffiliationGroupV30Rc2ServiceSummaryV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {Array<ServiceSummaryV30Rc2>}
     * @memberof AffiliationGroupV30Rc2ServiceSummaryV30Rc2
     */
    summaries?: Array<ServiceSummaryV30Rc2>;
}
/**
 *
 * @export
 * @interface AffiliationGroupV30ServiceSummaryV30
 */
export interface AffiliationGroupV30ServiceSummaryV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof AffiliationGroupV30ServiceSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof AffiliationGroupV30ServiceSummaryV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {Array<ServiceSummaryV30>}
     * @memberof AffiliationGroupV30ServiceSummaryV30
     */
    summaries?: Array<ServiceSummaryV30>;
}
/**
 *
 * @export
 * @interface AffiliationSummaryV30
 */
export interface AffiliationSummaryV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof AffiliationSummaryV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof AffiliationSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof AffiliationSummaryV30
     */
    source?: SourceV30;
    /**
     *
     * @type {number}
     * @memberof AffiliationSummaryV30
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof AffiliationSummaryV30
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof AffiliationSummaryV30
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof AffiliationSummaryV30
     */
    startDate?: FuzzyDateV30;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof AffiliationSummaryV30
     */
    endDate?: FuzzyDateV30;
    /**
     *
     * @type {OrganizationV30}
     * @memberof AffiliationSummaryV30
     */
    organization?: OrganizationV30;
    /**
     *
     * @type {UrlV30}
     * @memberof AffiliationSummaryV30
     */
    url?: UrlV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof AffiliationSummaryV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {string}
     * @memberof AffiliationSummaryV30
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof AffiliationSummaryV30
     */
    visibility?: AffiliationSummaryV30VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof AffiliationSummaryV30
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum AffiliationSummaryV30VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface AffiliationSummaryV30Rc1
 */
export interface AffiliationSummaryV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof AffiliationSummaryV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof AffiliationSummaryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof AffiliationSummaryV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {number}
     * @memberof AffiliationSummaryV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof AffiliationSummaryV30Rc1
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof AffiliationSummaryV30Rc1
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof AffiliationSummaryV30Rc1
     */
    startDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof AffiliationSummaryV30Rc1
     */
    endDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {OrganizationV30Rc1}
     * @memberof AffiliationSummaryV30Rc1
     */
    organization?: OrganizationV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof AffiliationSummaryV30Rc1
     */
    url?: UrlV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof AffiliationSummaryV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {string}
     * @memberof AffiliationSummaryV30Rc1
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof AffiliationSummaryV30Rc1
     */
    visibility?: AffiliationSummaryV30Rc1VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof AffiliationSummaryV30Rc1
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum AffiliationSummaryV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface AffiliationSummaryV30Rc2
 */
export interface AffiliationSummaryV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof AffiliationSummaryV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof AffiliationSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof AffiliationSummaryV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {number}
     * @memberof AffiliationSummaryV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof AffiliationSummaryV30Rc2
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof AffiliationSummaryV30Rc2
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof AffiliationSummaryV30Rc2
     */
    startDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof AffiliationSummaryV30Rc2
     */
    endDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {OrganizationV30Rc2}
     * @memberof AffiliationSummaryV30Rc2
     */
    organization?: OrganizationV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof AffiliationSummaryV30Rc2
     */
    url?: UrlV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof AffiliationSummaryV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {string}
     * @memberof AffiliationSummaryV30Rc2
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof AffiliationSummaryV30Rc2
     */
    visibility?: AffiliationSummaryV30Rc2VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof AffiliationSummaryV30Rc2
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum AffiliationSummaryV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface AmountV20
 */
export interface AmountV20 {
    /**
     *
     * @type {string}
     * @memberof AmountV20
     */
    value?: string;
    /**
     *
     * @type {string}
     * @memberof AmountV20
     */
    currencyCode: string;
}
/**
 *
 * @export
 * @interface AmountV30
 */
export interface AmountV30 {
    /**
     *
     * @type {string}
     * @memberof AmountV30
     */
    value?: string;
    /**
     *
     * @type {Currency}
     * @memberof AmountV30
     */
    currencyCode: Currency;
}
/**
 *
 * @export
 * @interface AmountV30Rc1
 */
export interface AmountV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof AmountV30Rc1
     */
    value?: string;
    /**
     *
     * @type {string}
     * @memberof AmountV30Rc1
     */
    currencyCode: string;
}
/**
 *
 * @export
 * @interface AmountV30Rc2
 */
export interface AmountV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof AmountV30Rc2
     */
    value?: string;
    /**
     *
     * @type {Currency}
     * @memberof AmountV30Rc2
     */
    currencyCode: Currency;
}
/**
 *
 * @export
 * @interface BiographyV20
 */
export interface BiographyV20 {
    /**
     *
     * @type {CreatedDateV20}
     * @memberof BiographyV20
     */
    createdDate?: CreatedDateV20;
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof BiographyV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {string}
     * @memberof BiographyV20
     */
    content?: string;
    /**
     *
     * @type {string}
     * @memberof BiographyV20
     */
    visibility?: BiographyV20VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof BiographyV20
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum BiographyV20VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface BiographyV30
 */
export interface BiographyV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof BiographyV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof BiographyV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {string}
     * @memberof BiographyV30
     */
    content?: string;
    /**
     *
     * @type {string}
     * @memberof BiographyV30
     */
    visibility?: BiographyV30VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof BiographyV30
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum BiographyV30VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface BiographyV30Rc1
 */
export interface BiographyV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof BiographyV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof BiographyV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {string}
     * @memberof BiographyV30Rc1
     */
    content?: string;
    /**
     *
     * @type {string}
     * @memberof BiographyV30Rc1
     */
    visibility?: BiographyV30Rc1VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof BiographyV30Rc1
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum BiographyV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface BiographyV30Rc2
 */
export interface BiographyV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof BiographyV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof BiographyV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {string}
     * @memberof BiographyV30Rc2
     */
    content?: string;
    /**
     *
     * @type {string}
     * @memberof BiographyV30Rc2
     */
    visibility?: BiographyV30Rc2VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof BiographyV30Rc2
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum BiographyV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface Citation
 */
export interface Citation {
    /**
     *
     * @type {string}
     * @memberof Citation
     */
    citationType: CitationCitationTypeEnum;
    /**
     *
     * @type {string}
     * @memberof Citation
     */
    citationValue: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CitationCitationTypeEnum {
    FormattedUnspecified = 'formatted-unspecified',
    Bibtex = 'bibtex',
    FormattedApa = 'formatted-apa',
    FormattedHarvard = 'formatted-harvard',
    FormattedIeee = 'formatted-ieee',
    FormattedMla = 'formatted-mla',
    FormattedVancouver = 'formatted-vancouver',
    FormattedChicago = 'formatted-chicago',
    Ris = 'ris'
}

/**
 *
 * @export
 * @interface ClientSummary
 */
export interface ClientSummary {
    /**
     *
     * @type {string}
     * @memberof ClientSummary
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof ClientSummary
     */
    description?: string;
}
/**
 *
 * @export
 * @interface CompletionDateV20
 */
export interface CompletionDateV20 {
    /**
     *
     * @type {string}
     * @memberof CompletionDateV20
     */
    value?: string;
}
/**
 *
 * @export
 * @interface CompletionDateV30
 */
export interface CompletionDateV30 {
    /**
     *
     * @type {string}
     * @memberof CompletionDateV30
     */
    value?: string;
}
/**
 *
 * @export
 * @interface CompletionDateV30Rc1
 */
export interface CompletionDateV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof CompletionDateV30Rc1
     */
    value?: string;
}
/**
 *
 * @export
 * @interface CompletionDateV30Rc2
 */
export interface CompletionDateV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof CompletionDateV30Rc2
     */
    value?: string;
}
/**
 *
 * @export
 * @interface ContributorAttributesV30
 */
export interface ContributorAttributesV30 {
    /**
     *
     * @type {string}
     * @memberof ContributorAttributesV30
     */
    contributorSequence: ContributorAttributesV30ContributorSequenceEnum;
    /**
     *
     * @type {string}
     * @memberof ContributorAttributesV30
     */
    contributorRole: ContributorAttributesV30ContributorRoleEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ContributorAttributesV30ContributorSequenceEnum {
    First = 'first',
    Additional = 'additional'
}
/**
    * @export
    * @enum {string}
    */
export enum ContributorAttributesV30ContributorRoleEnum {
    Author = 'author',
    Assignee = 'assignee',
    Editor = 'editor',
    ChairOrTranslator = 'chair-or-translator',
    CoInvestigator = 'co-investigator',
    CoInventor = 'co-inventor',
    GraduateStudent = 'graduate-student',
    OtherInventor = 'other-inventor',
    PrincipalInvestigator = 'principal-investigator',
    PostdoctoralResearcher = 'postdoctoral-researcher',
    SupportStaff = 'support-staff'
}

/**
 *
 * @export
 * @interface ContributorAttributesV30Rc1
 */
export interface ContributorAttributesV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof ContributorAttributesV30Rc1
     */
    contributorSequence: ContributorAttributesV30Rc1ContributorSequenceEnum;
    /**
     *
     * @type {string}
     * @memberof ContributorAttributesV30Rc1
     */
    contributorRole: ContributorAttributesV30Rc1ContributorRoleEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ContributorAttributesV30Rc1ContributorSequenceEnum {
    First = 'FIRST',
    Additional = 'ADDITIONAL'
}
/**
    * @export
    * @enum {string}
    */
export enum ContributorAttributesV30Rc1ContributorRoleEnum {
    Author = 'AUTHOR',
    Assignee = 'ASSIGNEE',
    Editor = 'EDITOR',
    ChairOrTranslator = 'CHAIR_OR_TRANSLATOR',
    CoInvestigator = 'CO_INVESTIGATOR',
    CoInventor = 'CO_INVENTOR',
    GraduateStudent = 'GRADUATE_STUDENT',
    OtherInventor = 'OTHER_INVENTOR',
    PrincipalInvestigator = 'PRINCIPAL_INVESTIGATOR',
    PostdoctoralResearcher = 'POSTDOCTORAL_RESEARCHER',
    SupportStaff = 'SUPPORT_STAFF'
}

/**
 *
 * @export
 * @interface ContributorAttributesV30Rc2
 */
export interface ContributorAttributesV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof ContributorAttributesV30Rc2
     */
    contributorSequence: ContributorAttributesV30Rc2ContributorSequenceEnum;
    /**
     *
     * @type {string}
     * @memberof ContributorAttributesV30Rc2
     */
    contributorRole: ContributorAttributesV30Rc2ContributorRoleEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ContributorAttributesV30Rc2ContributorSequenceEnum {
    First = 'FIRST',
    Additional = 'ADDITIONAL'
}
/**
    * @export
    * @enum {string}
    */
export enum ContributorAttributesV30Rc2ContributorRoleEnum {
    Author = 'AUTHOR',
    Assignee = 'ASSIGNEE',
    Editor = 'EDITOR',
    ChairOrTranslator = 'CHAIR_OR_TRANSLATOR',
    CoInvestigator = 'CO_INVESTIGATOR',
    CoInventor = 'CO_INVENTOR',
    GraduateStudent = 'GRADUATE_STUDENT',
    OtherInventor = 'OTHER_INVENTOR',
    PrincipalInvestigator = 'PRINCIPAL_INVESTIGATOR',
    PostdoctoralResearcher = 'POSTDOCTORAL_RESEARCHER',
    SupportStaff = 'SUPPORT_STAFF'
}

/**
 *
 * @export
 * @interface ContributorEmailV20
 */
export interface ContributorEmailV20 {
    /**
     *
     * @type {string}
     * @memberof ContributorEmailV20
     */
    value?: string;
}
/**
 *
 * @export
 * @interface ContributorEmailV30
 */
export interface ContributorEmailV30 {
    /**
     *
     * @type {string}
     * @memberof ContributorEmailV30
     */
    value?: string;
}
/**
 *
 * @export
 * @interface ContributorEmailV30Rc1
 */
export interface ContributorEmailV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof ContributorEmailV30Rc1
     */
    value?: string;
}
/**
 *
 * @export
 * @interface ContributorEmailV30Rc2
 */
export interface ContributorEmailV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof ContributorEmailV30Rc2
     */
    value?: string;
}
/**
 *
 * @export
 * @interface ContributorOrcidV20
 */
export interface ContributorOrcidV20 {
    /**
     *
     * @type {string}
     * @memberof ContributorOrcidV20
     */
    uri?: string;
    /**
     *
     * @type {string}
     * @memberof ContributorOrcidV20
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof ContributorOrcidV20
     */
    host?: string;
}
/**
 *
 * @export
 * @interface ContributorOrcidV30
 */
export interface ContributorOrcidV30 {
    /**
     *
     * @type {string}
     * @memberof ContributorOrcidV30
     */
    uri?: string;
    /**
     *
     * @type {string}
     * @memberof ContributorOrcidV30
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof ContributorOrcidV30
     */
    host?: string;
}
/**
 *
 * @export
 * @interface ContributorOrcidV30Rc1
 */
export interface ContributorOrcidV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof ContributorOrcidV30Rc1
     */
    uri?: string;
    /**
     *
     * @type {string}
     * @memberof ContributorOrcidV30Rc1
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof ContributorOrcidV30Rc1
     */
    host?: string;
}
/**
 *
 * @export
 * @interface ContributorOrcidV30Rc2
 */
export interface ContributorOrcidV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof ContributorOrcidV30Rc2
     */
    uri?: string;
    /**
     *
     * @type {string}
     * @memberof ContributorOrcidV30Rc2
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof ContributorOrcidV30Rc2
     */
    host?: string;
}
/**
 *
 * @export
 * @interface ContributorV20
 */
export interface ContributorV20 {
    /**
     *
     * @type {ContributorOrcidV20}
     * @memberof ContributorV20
     */
    contributorOrcid?: ContributorOrcidV20;
    /**
     *
     * @type {CreditNameV20}
     * @memberof ContributorV20
     */
    creditName?: CreditNameV20;
    /**
     *
     * @type {ContributorEmailV20}
     * @memberof ContributorV20
     */
    contributorEmail?: ContributorEmailV20;
    /**
     *
     * @type {ContributorV20}
     * @memberof ContributorV20
     */
    contributorAttributes?: ContributorV20;
}
/**
 *
 * @export
 * @interface ContributorV30
 */
export interface ContributorV30 {
    /**
     *
     * @type {ContributorOrcidV30}
     * @memberof ContributorV30
     */
    contributorOrcid?: ContributorOrcidV30;
    /**
     *
     * @type {CreditNameV30}
     * @memberof ContributorV30
     */
    creditName?: CreditNameV30;
    /**
     *
     * @type {ContributorEmailV30}
     * @memberof ContributorV30
     */
    contributorEmail?: ContributorEmailV30;
    /**
     *
     * @type {ContributorAttributesV30}
     * @memberof ContributorV30
     */
    contributorAttributes?: ContributorAttributesV30;
}
/**
 *
 * @export
 * @interface ContributorV30Rc1
 */
export interface ContributorV30Rc1 {
    /**
     *
     * @type {ContributorOrcidV30Rc1}
     * @memberof ContributorV30Rc1
     */
    contributorOrcid?: ContributorOrcidV30Rc1;
    /**
     *
     * @type {CreditNameV30Rc1}
     * @memberof ContributorV30Rc1
     */
    creditName?: CreditNameV30Rc1;
    /**
     *
     * @type {ContributorEmailV30Rc1}
     * @memberof ContributorV30Rc1
     */
    contributorEmail?: ContributorEmailV30Rc1;
    /**
     *
     * @type {ContributorAttributesV30Rc1}
     * @memberof ContributorV30Rc1
     */
    contributorAttributes?: ContributorAttributesV30Rc1;
}
/**
 *
 * @export
 * @interface ContributorV30Rc2
 */
export interface ContributorV30Rc2 {
    /**
     *
     * @type {ContributorOrcidV30Rc2}
     * @memberof ContributorV30Rc2
     */
    contributorOrcid?: ContributorOrcidV30Rc2;
    /**
     *
     * @type {CreditNameV30Rc2}
     * @memberof ContributorV30Rc2
     */
    creditName?: CreditNameV30Rc2;
    /**
     *
     * @type {ContributorEmailV30Rc2}
     * @memberof ContributorV30Rc2
     */
    contributorEmail?: ContributorEmailV30Rc2;
    /**
     *
     * @type {ContributorAttributesV30Rc2}
     * @memberof ContributorV30Rc2
     */
    contributorAttributes?: ContributorAttributesV30Rc2;
}
/**
 *
 * @export
 * @interface CountryV20
 */
export interface CountryV20 {
    /**
     *
     * @type {string}
     * @memberof CountryV20
     */
    value?: CountryV20ValueEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CountryV20ValueEnum {
    Af = 'AF',
    Ax = 'AX',
    Al = 'AL',
    Dz = 'DZ',
    As = 'AS',
    Ad = 'AD',
    Ao = 'AO',
    Ai = 'AI',
    Aq = 'AQ',
    Ag = 'AG',
    Ar = 'AR',
    Am = 'AM',
    Aw = 'AW',
    Au = 'AU',
    At = 'AT',
    Az = 'AZ',
    Bs = 'BS',
    Bh = 'BH',
    Bd = 'BD',
    Bb = 'BB',
    By = 'BY',
    Be = 'BE',
    Bz = 'BZ',
    Bj = 'BJ',
    Bm = 'BM',
    Bt = 'BT',
    Bo = 'BO',
    Bq = 'BQ',
    Ba = 'BA',
    Bw = 'BW',
    Bv = 'BV',
    Br = 'BR',
    Io = 'IO',
    Bn = 'BN',
    Bg = 'BG',
    Bf = 'BF',
    Bi = 'BI',
    Kh = 'KH',
    Cm = 'CM',
    Ca = 'CA',
    Cv = 'CV',
    Ky = 'KY',
    Cf = 'CF',
    Td = 'TD',
    Cl = 'CL',
    Cn = 'CN',
    Cx = 'CX',
    Cc = 'CC',
    Co = 'CO',
    Km = 'KM',
    Cg = 'CG',
    Cd = 'CD',
    Ck = 'CK',
    Cr = 'CR',
    Ci = 'CI',
    Hr = 'HR',
    Cu = 'CU',
    Cw = 'CW',
    Cy = 'CY',
    Cz = 'CZ',
    Dk = 'DK',
    Dj = 'DJ',
    Dm = 'DM',
    Do = 'DO',
    Ec = 'EC',
    Eg = 'EG',
    Sv = 'SV',
    Gq = 'GQ',
    Er = 'ER',
    Ee = 'EE',
    Et = 'ET',
    Fk = 'FK',
    Fo = 'FO',
    Fj = 'FJ',
    Fi = 'FI',
    Fr = 'FR',
    Gf = 'GF',
    Pf = 'PF',
    Tf = 'TF',
    Ga = 'GA',
    Gm = 'GM',
    Ge = 'GE',
    De = 'DE',
    Gh = 'GH',
    Gi = 'GI',
    Gr = 'GR',
    Gl = 'GL',
    Gd = 'GD',
    Gp = 'GP',
    Gu = 'GU',
    Gt = 'GT',
    Gg = 'GG',
    Gn = 'GN',
    Gw = 'GW',
    Gy = 'GY',
    Ht = 'HT',
    Hm = 'HM',
    Va = 'VA',
    Hn = 'HN',
    Hk = 'HK',
    Hu = 'HU',
    Is = 'IS',
    In = 'IN',
    Id = 'ID',
    Ir = 'IR',
    Iq = 'IQ',
    Ie = 'IE',
    Im = 'IM',
    Il = 'IL',
    It = 'IT',
    Jm = 'JM',
    Jp = 'JP',
    Je = 'JE',
    Jo = 'JO',
    Kz = 'KZ',
    Ke = 'KE',
    Ki = 'KI',
    Kp = 'KP',
    Kr = 'KR',
    Kw = 'KW',
    Kg = 'KG',
    La = 'LA',
    Lv = 'LV',
    Lb = 'LB',
    Ls = 'LS',
    Lr = 'LR',
    Ly = 'LY',
    Li = 'LI',
    Lt = 'LT',
    Lu = 'LU',
    Mo = 'MO',
    Mk = 'MK',
    Mg = 'MG',
    Mw = 'MW',
    My = 'MY',
    Mv = 'MV',
    Ml = 'ML',
    Mt = 'MT',
    Mh = 'MH',
    Mq = 'MQ',
    Mr = 'MR',
    Mu = 'MU',
    Yt = 'YT',
    Mx = 'MX',
    Fm = 'FM',
    Md = 'MD',
    Mc = 'MC',
    Mn = 'MN',
    Me = 'ME',
    Ms = 'MS',
    Ma = 'MA',
    Mz = 'MZ',
    Mm = 'MM',
    Na = 'NA',
    Nr = 'NR',
    Np = 'NP',
    Nl = 'NL',
    Nc = 'NC',
    Nz = 'NZ',
    Ni = 'NI',
    Ne = 'NE',
    Ng = 'NG',
    Nu = 'NU',
    Nf = 'NF',
    Mp = 'MP',
    No = 'NO',
    Om = 'OM',
    Pk = 'PK',
    Pw = 'PW',
    Ps = 'PS',
    Pa = 'PA',
    Pg = 'PG',
    Py = 'PY',
    Pe = 'PE',
    Ph = 'PH',
    Pn = 'PN',
    Pl = 'PL',
    Pt = 'PT',
    Pr = 'PR',
    Qa = 'QA',
    Re = 'RE',
    Ro = 'RO',
    Ru = 'RU',
    Rw = 'RW',
    Bl = 'BL',
    Sh = 'SH',
    Kn = 'KN',
    Lc = 'LC',
    Mf = 'MF',
    Pm = 'PM',
    Vc = 'VC',
    Ws = 'WS',
    Sm = 'SM',
    St = 'ST',
    Sa = 'SA',
    Sn = 'SN',
    Rs = 'RS',
    Sc = 'SC',
    Sl = 'SL',
    Sg = 'SG',
    Sx = 'SX',
    Sk = 'SK',
    Si = 'SI',
    Sb = 'SB',
    So = 'SO',
    Za = 'ZA',
    Gs = 'GS',
    Ss = 'SS',
    Es = 'ES',
    Lk = 'LK',
    Sd = 'SD',
    Sr = 'SR',
    Sj = 'SJ',
    Sz = 'SZ',
    Se = 'SE',
    Ch = 'CH',
    Sy = 'SY',
    Tj = 'TJ',
    Tz = 'TZ',
    Th = 'TH',
    Tl = 'TL',
    Tg = 'TG',
    Tk = 'TK',
    To = 'TO',
    Tt = 'TT',
    Tn = 'TN',
    Tr = 'TR',
    Tm = 'TM',
    Tc = 'TC',
    Tv = 'TV',
    Ug = 'UG',
    Ua = 'UA',
    Ae = 'AE',
    Gb = 'GB',
    Us = 'US',
    Um = 'UM',
    Uy = 'UY',
    Uz = 'UZ',
    Vu = 'VU',
    Ve = 'VE',
    Vn = 'VN',
    Vg = 'VG',
    Vi = 'VI',
    Wf = 'WF',
    Eh = 'EH',
    Ye = 'YE',
    Zm = 'ZM',
    Zw = 'ZW',
    Tw = 'TW',
    Xk = 'XK'
}

/**
 *
 * @export
 * @interface CountryV30
 */
export interface CountryV30 {
    /**
     *
     * @type {string}
     * @memberof CountryV30
     */
    value?: CountryV30ValueEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CountryV30ValueEnum {
    Af = 'AF',
    Ax = 'AX',
    Al = 'AL',
    Dz = 'DZ',
    As = 'AS',
    Ad = 'AD',
    Ao = 'AO',
    Ai = 'AI',
    Aq = 'AQ',
    Ag = 'AG',
    Ar = 'AR',
    Am = 'AM',
    Aw = 'AW',
    Au = 'AU',
    At = 'AT',
    Az = 'AZ',
    Bs = 'BS',
    Bh = 'BH',
    Bd = 'BD',
    Bb = 'BB',
    By = 'BY',
    Be = 'BE',
    Bz = 'BZ',
    Bj = 'BJ',
    Bm = 'BM',
    Bt = 'BT',
    Bo = 'BO',
    Bq = 'BQ',
    Ba = 'BA',
    Bw = 'BW',
    Bv = 'BV',
    Br = 'BR',
    Io = 'IO',
    Bn = 'BN',
    Bg = 'BG',
    Bf = 'BF',
    Bi = 'BI',
    Kh = 'KH',
    Cm = 'CM',
    Ca = 'CA',
    Cv = 'CV',
    Ky = 'KY',
    Cf = 'CF',
    Td = 'TD',
    Cl = 'CL',
    Cn = 'CN',
    Cx = 'CX',
    Cc = 'CC',
    Co = 'CO',
    Km = 'KM',
    Cg = 'CG',
    Cd = 'CD',
    Ck = 'CK',
    Cr = 'CR',
    Ci = 'CI',
    Hr = 'HR',
    Cu = 'CU',
    Cw = 'CW',
    Cy = 'CY',
    Cz = 'CZ',
    Dk = 'DK',
    Dj = 'DJ',
    Dm = 'DM',
    Do = 'DO',
    Ec = 'EC',
    Eg = 'EG',
    Sv = 'SV',
    Gq = 'GQ',
    Er = 'ER',
    Ee = 'EE',
    Et = 'ET',
    Fk = 'FK',
    Fo = 'FO',
    Fj = 'FJ',
    Fi = 'FI',
    Fr = 'FR',
    Gf = 'GF',
    Pf = 'PF',
    Tf = 'TF',
    Ga = 'GA',
    Gm = 'GM',
    Ge = 'GE',
    De = 'DE',
    Gh = 'GH',
    Gi = 'GI',
    Gr = 'GR',
    Gl = 'GL',
    Gd = 'GD',
    Gp = 'GP',
    Gu = 'GU',
    Gt = 'GT',
    Gg = 'GG',
    Gn = 'GN',
    Gw = 'GW',
    Gy = 'GY',
    Ht = 'HT',
    Hm = 'HM',
    Va = 'VA',
    Hn = 'HN',
    Hk = 'HK',
    Hu = 'HU',
    Is = 'IS',
    In = 'IN',
    Id = 'ID',
    Ir = 'IR',
    Iq = 'IQ',
    Ie = 'IE',
    Im = 'IM',
    Il = 'IL',
    It = 'IT',
    Jm = 'JM',
    Jp = 'JP',
    Je = 'JE',
    Jo = 'JO',
    Kz = 'KZ',
    Ke = 'KE',
    Ki = 'KI',
    Kp = 'KP',
    Kr = 'KR',
    Kw = 'KW',
    Kg = 'KG',
    La = 'LA',
    Lv = 'LV',
    Lb = 'LB',
    Ls = 'LS',
    Lr = 'LR',
    Ly = 'LY',
    Li = 'LI',
    Lt = 'LT',
    Lu = 'LU',
    Mo = 'MO',
    Mk = 'MK',
    Mg = 'MG',
    Mw = 'MW',
    My = 'MY',
    Mv = 'MV',
    Ml = 'ML',
    Mt = 'MT',
    Mh = 'MH',
    Mq = 'MQ',
    Mr = 'MR',
    Mu = 'MU',
    Yt = 'YT',
    Mx = 'MX',
    Fm = 'FM',
    Md = 'MD',
    Mc = 'MC',
    Mn = 'MN',
    Me = 'ME',
    Ms = 'MS',
    Ma = 'MA',
    Mz = 'MZ',
    Mm = 'MM',
    Na = 'NA',
    Nr = 'NR',
    Np = 'NP',
    Nl = 'NL',
    Nc = 'NC',
    Nz = 'NZ',
    Ni = 'NI',
    Ne = 'NE',
    Ng = 'NG',
    Nu = 'NU',
    Nf = 'NF',
    Mp = 'MP',
    No = 'NO',
    Om = 'OM',
    Pk = 'PK',
    Pw = 'PW',
    Ps = 'PS',
    Pa = 'PA',
    Pg = 'PG',
    Py = 'PY',
    Pe = 'PE',
    Ph = 'PH',
    Pn = 'PN',
    Pl = 'PL',
    Pt = 'PT',
    Pr = 'PR',
    Qa = 'QA',
    Re = 'RE',
    Ro = 'RO',
    Ru = 'RU',
    Rw = 'RW',
    Bl = 'BL',
    Sh = 'SH',
    Kn = 'KN',
    Lc = 'LC',
    Mf = 'MF',
    Pm = 'PM',
    Vc = 'VC',
    Ws = 'WS',
    Sm = 'SM',
    St = 'ST',
    Sa = 'SA',
    Sn = 'SN',
    Rs = 'RS',
    Sc = 'SC',
    Sl = 'SL',
    Sg = 'SG',
    Sx = 'SX',
    Sk = 'SK',
    Si = 'SI',
    Sb = 'SB',
    So = 'SO',
    Za = 'ZA',
    Gs = 'GS',
    Ss = 'SS',
    Es = 'ES',
    Lk = 'LK',
    Sd = 'SD',
    Sr = 'SR',
    Sj = 'SJ',
    Sz = 'SZ',
    Se = 'SE',
    Ch = 'CH',
    Sy = 'SY',
    Tj = 'TJ',
    Tz = 'TZ',
    Th = 'TH',
    Tl = 'TL',
    Tg = 'TG',
    Tk = 'TK',
    To = 'TO',
    Tt = 'TT',
    Tn = 'TN',
    Tr = 'TR',
    Tm = 'TM',
    Tc = 'TC',
    Tv = 'TV',
    Ug = 'UG',
    Ua = 'UA',
    Ae = 'AE',
    Gb = 'GB',
    Us = 'US',
    Um = 'UM',
    Uy = 'UY',
    Uz = 'UZ',
    Vu = 'VU',
    Ve = 'VE',
    Vn = 'VN',
    Vg = 'VG',
    Vi = 'VI',
    Wf = 'WF',
    Eh = 'EH',
    Ye = 'YE',
    Zm = 'ZM',
    Zw = 'ZW',
    Tw = 'TW',
    Xk = 'XK'
}

/**
 *
 * @export
 * @interface CountryV30Rc1
 */
export interface CountryV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof CountryV30Rc1
     */
    value?: CountryV30Rc1ValueEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CountryV30Rc1ValueEnum {
    Af = 'AF',
    Ax = 'AX',
    Al = 'AL',
    Dz = 'DZ',
    As = 'AS',
    Ad = 'AD',
    Ao = 'AO',
    Ai = 'AI',
    Aq = 'AQ',
    Ag = 'AG',
    Ar = 'AR',
    Am = 'AM',
    Aw = 'AW',
    Au = 'AU',
    At = 'AT',
    Az = 'AZ',
    Bs = 'BS',
    Bh = 'BH',
    Bd = 'BD',
    Bb = 'BB',
    By = 'BY',
    Be = 'BE',
    Bz = 'BZ',
    Bj = 'BJ',
    Bm = 'BM',
    Bt = 'BT',
    Bo = 'BO',
    Bq = 'BQ',
    Ba = 'BA',
    Bw = 'BW',
    Bv = 'BV',
    Br = 'BR',
    Io = 'IO',
    Bn = 'BN',
    Bg = 'BG',
    Bf = 'BF',
    Bi = 'BI',
    Kh = 'KH',
    Cm = 'CM',
    Ca = 'CA',
    Cv = 'CV',
    Ky = 'KY',
    Cf = 'CF',
    Td = 'TD',
    Cl = 'CL',
    Cn = 'CN',
    Cx = 'CX',
    Cc = 'CC',
    Co = 'CO',
    Km = 'KM',
    Cg = 'CG',
    Cd = 'CD',
    Ck = 'CK',
    Cr = 'CR',
    Ci = 'CI',
    Hr = 'HR',
    Cu = 'CU',
    Cw = 'CW',
    Cy = 'CY',
    Cz = 'CZ',
    Dk = 'DK',
    Dj = 'DJ',
    Dm = 'DM',
    Do = 'DO',
    Ec = 'EC',
    Eg = 'EG',
    Sv = 'SV',
    Gq = 'GQ',
    Er = 'ER',
    Ee = 'EE',
    Et = 'ET',
    Fk = 'FK',
    Fo = 'FO',
    Fj = 'FJ',
    Fi = 'FI',
    Fr = 'FR',
    Gf = 'GF',
    Pf = 'PF',
    Tf = 'TF',
    Ga = 'GA',
    Gm = 'GM',
    Ge = 'GE',
    De = 'DE',
    Gh = 'GH',
    Gi = 'GI',
    Gr = 'GR',
    Gl = 'GL',
    Gd = 'GD',
    Gp = 'GP',
    Gu = 'GU',
    Gt = 'GT',
    Gg = 'GG',
    Gn = 'GN',
    Gw = 'GW',
    Gy = 'GY',
    Ht = 'HT',
    Hm = 'HM',
    Va = 'VA',
    Hn = 'HN',
    Hk = 'HK',
    Hu = 'HU',
    Is = 'IS',
    In = 'IN',
    Id = 'ID',
    Ir = 'IR',
    Iq = 'IQ',
    Ie = 'IE',
    Im = 'IM',
    Il = 'IL',
    It = 'IT',
    Jm = 'JM',
    Jp = 'JP',
    Je = 'JE',
    Jo = 'JO',
    Kz = 'KZ',
    Ke = 'KE',
    Ki = 'KI',
    Kp = 'KP',
    Kr = 'KR',
    Kw = 'KW',
    Kg = 'KG',
    La = 'LA',
    Lv = 'LV',
    Lb = 'LB',
    Ls = 'LS',
    Lr = 'LR',
    Ly = 'LY',
    Li = 'LI',
    Lt = 'LT',
    Lu = 'LU',
    Mo = 'MO',
    Mk = 'MK',
    Mg = 'MG',
    Mw = 'MW',
    My = 'MY',
    Mv = 'MV',
    Ml = 'ML',
    Mt = 'MT',
    Mh = 'MH',
    Mq = 'MQ',
    Mr = 'MR',
    Mu = 'MU',
    Yt = 'YT',
    Mx = 'MX',
    Fm = 'FM',
    Md = 'MD',
    Mc = 'MC',
    Mn = 'MN',
    Me = 'ME',
    Ms = 'MS',
    Ma = 'MA',
    Mz = 'MZ',
    Mm = 'MM',
    Na = 'NA',
    Nr = 'NR',
    Np = 'NP',
    Nl = 'NL',
    Nc = 'NC',
    Nz = 'NZ',
    Ni = 'NI',
    Ne = 'NE',
    Ng = 'NG',
    Nu = 'NU',
    Nf = 'NF',
    Mp = 'MP',
    No = 'NO',
    Om = 'OM',
    Pk = 'PK',
    Pw = 'PW',
    Ps = 'PS',
    Pa = 'PA',
    Pg = 'PG',
    Py = 'PY',
    Pe = 'PE',
    Ph = 'PH',
    Pn = 'PN',
    Pl = 'PL',
    Pt = 'PT',
    Pr = 'PR',
    Qa = 'QA',
    Re = 'RE',
    Ro = 'RO',
    Ru = 'RU',
    Rw = 'RW',
    Bl = 'BL',
    Sh = 'SH',
    Kn = 'KN',
    Lc = 'LC',
    Mf = 'MF',
    Pm = 'PM',
    Vc = 'VC',
    Ws = 'WS',
    Sm = 'SM',
    St = 'ST',
    Sa = 'SA',
    Sn = 'SN',
    Rs = 'RS',
    Sc = 'SC',
    Sl = 'SL',
    Sg = 'SG',
    Sx = 'SX',
    Sk = 'SK',
    Si = 'SI',
    Sb = 'SB',
    So = 'SO',
    Za = 'ZA',
    Gs = 'GS',
    Ss = 'SS',
    Es = 'ES',
    Lk = 'LK',
    Sd = 'SD',
    Sr = 'SR',
    Sj = 'SJ',
    Sz = 'SZ',
    Se = 'SE',
    Ch = 'CH',
    Sy = 'SY',
    Tj = 'TJ',
    Tz = 'TZ',
    Th = 'TH',
    Tl = 'TL',
    Tg = 'TG',
    Tk = 'TK',
    To = 'TO',
    Tt = 'TT',
    Tn = 'TN',
    Tr = 'TR',
    Tm = 'TM',
    Tc = 'TC',
    Tv = 'TV',
    Ug = 'UG',
    Ua = 'UA',
    Ae = 'AE',
    Gb = 'GB',
    Us = 'US',
    Um = 'UM',
    Uy = 'UY',
    Uz = 'UZ',
    Vu = 'VU',
    Ve = 'VE',
    Vn = 'VN',
    Vg = 'VG',
    Vi = 'VI',
    Wf = 'WF',
    Eh = 'EH',
    Ye = 'YE',
    Zm = 'ZM',
    Zw = 'ZW',
    Tw = 'TW',
    Xk = 'XK'
}

/**
 *
 * @export
 * @interface CountryV30Rc2
 */
export interface CountryV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof CountryV30Rc2
     */
    value?: CountryV30Rc2ValueEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CountryV30Rc2ValueEnum {
    Af = 'AF',
    Ax = 'AX',
    Al = 'AL',
    Dz = 'DZ',
    As = 'AS',
    Ad = 'AD',
    Ao = 'AO',
    Ai = 'AI',
    Aq = 'AQ',
    Ag = 'AG',
    Ar = 'AR',
    Am = 'AM',
    Aw = 'AW',
    Au = 'AU',
    At = 'AT',
    Az = 'AZ',
    Bs = 'BS',
    Bh = 'BH',
    Bd = 'BD',
    Bb = 'BB',
    By = 'BY',
    Be = 'BE',
    Bz = 'BZ',
    Bj = 'BJ',
    Bm = 'BM',
    Bt = 'BT',
    Bo = 'BO',
    Bq = 'BQ',
    Ba = 'BA',
    Bw = 'BW',
    Bv = 'BV',
    Br = 'BR',
    Io = 'IO',
    Bn = 'BN',
    Bg = 'BG',
    Bf = 'BF',
    Bi = 'BI',
    Kh = 'KH',
    Cm = 'CM',
    Ca = 'CA',
    Cv = 'CV',
    Ky = 'KY',
    Cf = 'CF',
    Td = 'TD',
    Cl = 'CL',
    Cn = 'CN',
    Cx = 'CX',
    Cc = 'CC',
    Co = 'CO',
    Km = 'KM',
    Cg = 'CG',
    Cd = 'CD',
    Ck = 'CK',
    Cr = 'CR',
    Ci = 'CI',
    Hr = 'HR',
    Cu = 'CU',
    Cw = 'CW',
    Cy = 'CY',
    Cz = 'CZ',
    Dk = 'DK',
    Dj = 'DJ',
    Dm = 'DM',
    Do = 'DO',
    Ec = 'EC',
    Eg = 'EG',
    Sv = 'SV',
    Gq = 'GQ',
    Er = 'ER',
    Ee = 'EE',
    Et = 'ET',
    Fk = 'FK',
    Fo = 'FO',
    Fj = 'FJ',
    Fi = 'FI',
    Fr = 'FR',
    Gf = 'GF',
    Pf = 'PF',
    Tf = 'TF',
    Ga = 'GA',
    Gm = 'GM',
    Ge = 'GE',
    De = 'DE',
    Gh = 'GH',
    Gi = 'GI',
    Gr = 'GR',
    Gl = 'GL',
    Gd = 'GD',
    Gp = 'GP',
    Gu = 'GU',
    Gt = 'GT',
    Gg = 'GG',
    Gn = 'GN',
    Gw = 'GW',
    Gy = 'GY',
    Ht = 'HT',
    Hm = 'HM',
    Va = 'VA',
    Hn = 'HN',
    Hk = 'HK',
    Hu = 'HU',
    Is = 'IS',
    In = 'IN',
    Id = 'ID',
    Ir = 'IR',
    Iq = 'IQ',
    Ie = 'IE',
    Im = 'IM',
    Il = 'IL',
    It = 'IT',
    Jm = 'JM',
    Jp = 'JP',
    Je = 'JE',
    Jo = 'JO',
    Kz = 'KZ',
    Ke = 'KE',
    Ki = 'KI',
    Kp = 'KP',
    Kr = 'KR',
    Kw = 'KW',
    Kg = 'KG',
    La = 'LA',
    Lv = 'LV',
    Lb = 'LB',
    Ls = 'LS',
    Lr = 'LR',
    Ly = 'LY',
    Li = 'LI',
    Lt = 'LT',
    Lu = 'LU',
    Mo = 'MO',
    Mk = 'MK',
    Mg = 'MG',
    Mw = 'MW',
    My = 'MY',
    Mv = 'MV',
    Ml = 'ML',
    Mt = 'MT',
    Mh = 'MH',
    Mq = 'MQ',
    Mr = 'MR',
    Mu = 'MU',
    Yt = 'YT',
    Mx = 'MX',
    Fm = 'FM',
    Md = 'MD',
    Mc = 'MC',
    Mn = 'MN',
    Me = 'ME',
    Ms = 'MS',
    Ma = 'MA',
    Mz = 'MZ',
    Mm = 'MM',
    Na = 'NA',
    Nr = 'NR',
    Np = 'NP',
    Nl = 'NL',
    Nc = 'NC',
    Nz = 'NZ',
    Ni = 'NI',
    Ne = 'NE',
    Ng = 'NG',
    Nu = 'NU',
    Nf = 'NF',
    Mp = 'MP',
    No = 'NO',
    Om = 'OM',
    Pk = 'PK',
    Pw = 'PW',
    Ps = 'PS',
    Pa = 'PA',
    Pg = 'PG',
    Py = 'PY',
    Pe = 'PE',
    Ph = 'PH',
    Pn = 'PN',
    Pl = 'PL',
    Pt = 'PT',
    Pr = 'PR',
    Qa = 'QA',
    Re = 'RE',
    Ro = 'RO',
    Ru = 'RU',
    Rw = 'RW',
    Bl = 'BL',
    Sh = 'SH',
    Kn = 'KN',
    Lc = 'LC',
    Mf = 'MF',
    Pm = 'PM',
    Vc = 'VC',
    Ws = 'WS',
    Sm = 'SM',
    St = 'ST',
    Sa = 'SA',
    Sn = 'SN',
    Rs = 'RS',
    Sc = 'SC',
    Sl = 'SL',
    Sg = 'SG',
    Sx = 'SX',
    Sk = 'SK',
    Si = 'SI',
    Sb = 'SB',
    So = 'SO',
    Za = 'ZA',
    Gs = 'GS',
    Ss = 'SS',
    Es = 'ES',
    Lk = 'LK',
    Sd = 'SD',
    Sr = 'SR',
    Sj = 'SJ',
    Sz = 'SZ',
    Se = 'SE',
    Ch = 'CH',
    Sy = 'SY',
    Tj = 'TJ',
    Tz = 'TZ',
    Th = 'TH',
    Tl = 'TL',
    Tg = 'TG',
    Tk = 'TK',
    To = 'TO',
    Tt = 'TT',
    Tn = 'TN',
    Tr = 'TR',
    Tm = 'TM',
    Tc = 'TC',
    Tv = 'TV',
    Ug = 'UG',
    Ua = 'UA',
    Ae = 'AE',
    Gb = 'GB',
    Us = 'US',
    Um = 'UM',
    Uy = 'UY',
    Uz = 'UZ',
    Vu = 'VU',
    Ve = 'VE',
    Vn = 'VN',
    Vg = 'VG',
    Vi = 'VI',
    Wf = 'WF',
    Eh = 'EH',
    Ye = 'YE',
    Zm = 'ZM',
    Zw = 'ZW',
    Tw = 'TW',
    Xk = 'XK'
}

/**
 *
 * @export
 * @interface CreatedDateV20
 */
export interface CreatedDateV20 {
    /**
     *
     * @type {string}
     * @memberof CreatedDateV20
     */
    value?: string;
}
/**
 *
 * @export
 * @interface CreatedDateV30
 */
export interface CreatedDateV30 {
    /**
     *
     * @type {string}
     * @memberof CreatedDateV30
     */
    value?: string;
}
/**
 *
 * @export
 * @interface CreatedDateV30Rc1
 */
export interface CreatedDateV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof CreatedDateV30Rc1
     */
    value?: string;
}
/**
 *
 * @export
 * @interface CreatedDateV30Rc2
 */
export interface CreatedDateV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof CreatedDateV30Rc2
     */
    value?: string;
}
/**
 *
 * @export
 * @interface CreditNameV20
 */
export interface CreditNameV20 {
    /**
     *
     * @type {string}
     * @memberof CreditNameV20
     */
    value?: string;
}
/**
 *
 * @export
 * @interface CreditNameV30
 */
export interface CreditNameV30 {
    /**
     *
     * @type {string}
     * @memberof CreditNameV30
     */
    value?: string;
}
/**
 *
 * @export
 * @interface CreditNameV30Rc1
 */
export interface CreditNameV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof CreditNameV30Rc1
     */
    value?: string;
}
/**
 *
 * @export
 * @interface CreditNameV30Rc2
 */
export interface CreditNameV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof CreditNameV30Rc2
     */
    value?: string;
}
/**
 *
 * @export
 * @interface Currency
 */
export interface Currency {
    /**
     *
     * @type {string}
     * @memberof Currency
     */
    currencyCode?: string;
    /**
     *
     * @type {number}
     * @memberof Currency
     */
    defaultFractionDigits?: number;
    /**
     *
     * @type {number}
     * @memberof Currency
     */
    numericCode?: number;
    /**
     *
     * @type {string}
     * @memberof Currency
     */
    displayName?: string;
    /**
     *
     * @type {string}
     * @memberof Currency
     */
    symbol?: string;
}
/**
 *
 * @export
 * @interface DayV20
 */
export interface DayV20 {
    /**
     *
     * @type {string}
     * @memberof DayV20
     */
    value?: string;
}
/**
 *
 * @export
 * @interface DayV30
 */
export interface DayV30 {
    /**
     *
     * @type {string}
     * @memberof DayV30
     */
    value?: string;
}
/**
 *
 * @export
 * @interface DayV30Rc1
 */
export interface DayV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof DayV30Rc1
     */
    value?: string;
}
/**
 *
 * @export
 * @interface DayV30Rc2
 */
export interface DayV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof DayV30Rc2
     */
    value?: string;
}
/**
 *
 * @export
 * @interface DeactivationDateV20
 */
export interface DeactivationDateV20 {
    /**
     *
     * @type {string}
     * @memberof DeactivationDateV20
     */
    value?: string;
}
/**
 *
 * @export
 * @interface DeactivationDateV30
 */
export interface DeactivationDateV30 {
    /**
     *
     * @type {string}
     * @memberof DeactivationDateV30
     */
    value?: string;
}
/**
 *
 * @export
 * @interface DeactivationDateV30Rc1
 */
export interface DeactivationDateV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof DeactivationDateV30Rc1
     */
    value?: string;
}
/**
 *
 * @export
 * @interface DeactivationDateV30Rc2
 */
export interface DeactivationDateV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof DeactivationDateV30Rc2
     */
    value?: string;
}
/**
 *
 * @export
 * @interface DisambiguatedOrganizationV20
 */
export interface DisambiguatedOrganizationV20 {
    /**
     *
     * @type {string}
     * @memberof DisambiguatedOrganizationV20
     */
    disambiguatedOrganizationIdentifier: string;
    /**
     *
     * @type {string}
     * @memberof DisambiguatedOrganizationV20
     */
    disambiguationSource: string;
}
/**
 *
 * @export
 * @interface DisambiguatedOrganizationV30
 */
export interface DisambiguatedOrganizationV30 {
    /**
     *
     * @type {string}
     * @memberof DisambiguatedOrganizationV30
     */
    disambiguatedOrganizationIdentifier: string;
    /**
     *
     * @type {string}
     * @memberof DisambiguatedOrganizationV30
     */
    disambiguationSource: string;
}
/**
 *
 * @export
 * @interface DisambiguatedOrganizationV30Rc1
 */
export interface DisambiguatedOrganizationV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof DisambiguatedOrganizationV30Rc1
     */
    disambiguatedOrganizationIdentifier: string;
    /**
     *
     * @type {string}
     * @memberof DisambiguatedOrganizationV30Rc1
     */
    disambiguationSource: string;
}
/**
 *
 * @export
 * @interface DisambiguatedOrganizationV30Rc2
 */
export interface DisambiguatedOrganizationV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof DisambiguatedOrganizationV30Rc2
     */
    disambiguatedOrganizationIdentifier: string;
    /**
     *
     * @type {string}
     * @memberof DisambiguatedOrganizationV30Rc2
     */
    disambiguationSource: string;
}
/**
 *
 * @export
 * @interface DistinctionSummaryV30
 */
export interface DistinctionSummaryV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof DistinctionSummaryV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof DistinctionSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof DistinctionSummaryV30
     */
    source?: SourceV30;
    /**
     *
     * @type {number}
     * @memberof DistinctionSummaryV30
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof DistinctionSummaryV30
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof DistinctionSummaryV30
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof DistinctionSummaryV30
     */
    startDate?: FuzzyDateV30;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof DistinctionSummaryV30
     */
    endDate?: FuzzyDateV30;
    /**
     *
     * @type {OrganizationV30}
     * @memberof DistinctionSummaryV30
     */
    organization?: OrganizationV30;
    /**
     *
     * @type {UrlV30}
     * @memberof DistinctionSummaryV30
     */
    url?: UrlV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof DistinctionSummaryV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {string}
     * @memberof DistinctionSummaryV30
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof DistinctionSummaryV30
     */
    visibility?: DistinctionSummaryV30VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof DistinctionSummaryV30
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DistinctionSummaryV30VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface DistinctionSummaryV30Rc1
 */
export interface DistinctionSummaryV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof DistinctionSummaryV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof DistinctionSummaryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof DistinctionSummaryV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {number}
     * @memberof DistinctionSummaryV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof DistinctionSummaryV30Rc1
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof DistinctionSummaryV30Rc1
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof DistinctionSummaryV30Rc1
     */
    startDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof DistinctionSummaryV30Rc1
     */
    endDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {OrganizationV30Rc1}
     * @memberof DistinctionSummaryV30Rc1
     */
    organization?: OrganizationV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof DistinctionSummaryV30Rc1
     */
    url?: UrlV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof DistinctionSummaryV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {string}
     * @memberof DistinctionSummaryV30Rc1
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof DistinctionSummaryV30Rc1
     */
    visibility?: DistinctionSummaryV30Rc1VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof DistinctionSummaryV30Rc1
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DistinctionSummaryV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface DistinctionSummaryV30Rc2
 */
export interface DistinctionSummaryV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof DistinctionSummaryV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof DistinctionSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof DistinctionSummaryV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {number}
     * @memberof DistinctionSummaryV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof DistinctionSummaryV30Rc2
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof DistinctionSummaryV30Rc2
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof DistinctionSummaryV30Rc2
     */
    startDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof DistinctionSummaryV30Rc2
     */
    endDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {OrganizationV30Rc2}
     * @memberof DistinctionSummaryV30Rc2
     */
    organization?: OrganizationV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof DistinctionSummaryV30Rc2
     */
    url?: UrlV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof DistinctionSummaryV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {string}
     * @memberof DistinctionSummaryV30Rc2
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof DistinctionSummaryV30Rc2
     */
    visibility?: DistinctionSummaryV30Rc2VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof DistinctionSummaryV30Rc2
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DistinctionSummaryV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface DistinctionV30
 */
export interface DistinctionV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof DistinctionV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof DistinctionV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof DistinctionV30
     */
    source?: SourceV30;
    /**
     *
     * @type {number}
     * @memberof DistinctionV30
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof DistinctionV30
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof DistinctionV30
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof DistinctionV30
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof DistinctionV30
     */
    startDate: FuzzyDateV30;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof DistinctionV30
     */
    endDate?: FuzzyDateV30;
    /**
     *
     * @type {OrganizationV30}
     * @memberof DistinctionV30
     */
    organization: OrganizationV30;
    /**
     *
     * @type {UrlV30}
     * @memberof DistinctionV30
     */
    url?: UrlV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof DistinctionV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {string}
     * @memberof DistinctionV30
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof DistinctionV30
     */
    visibility?: DistinctionV30VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DistinctionV30VisibilityEnum {
    Limited = 'limited',
    RegisteredOnly = 'registered-only',
    Public = 'public'
}

/**
 *
 * @export
 * @interface DistinctionV30Rc1
 */
export interface DistinctionV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof DistinctionV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof DistinctionV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof DistinctionV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {number}
     * @memberof DistinctionV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof DistinctionV30Rc1
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof DistinctionV30Rc1
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof DistinctionV30Rc1
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof DistinctionV30Rc1
     */
    startDate: FuzzyDateV30Rc1;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof DistinctionV30Rc1
     */
    endDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {OrganizationV30Rc1}
     * @memberof DistinctionV30Rc1
     */
    organization: OrganizationV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof DistinctionV30Rc1
     */
    url?: UrlV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof DistinctionV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {string}
     * @memberof DistinctionV30Rc1
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof DistinctionV30Rc1
     */
    visibility?: DistinctionV30Rc1VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DistinctionV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface DistinctionV30Rc2
 */
export interface DistinctionV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof DistinctionV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof DistinctionV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof DistinctionV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {number}
     * @memberof DistinctionV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof DistinctionV30Rc2
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof DistinctionV30Rc2
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof DistinctionV30Rc2
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof DistinctionV30Rc2
     */
    startDate: FuzzyDateV30Rc2;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof DistinctionV30Rc2
     */
    endDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {OrganizationV30Rc2}
     * @memberof DistinctionV30Rc2
     */
    organization: OrganizationV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof DistinctionV30Rc2
     */
    url?: UrlV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof DistinctionV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {string}
     * @memberof DistinctionV30Rc2
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof DistinctionV30Rc2
     */
    visibility?: DistinctionV30Rc2VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DistinctionV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface DistinctionsSummaryV30
 */
export interface DistinctionsSummaryV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof DistinctionsSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {Array<AffiliationGroupV30DistinctionSummaryV30>}
     * @memberof DistinctionsSummaryV30
     */
    affiliationGroup?: Array<AffiliationGroupV30DistinctionSummaryV30>;
    /**
     *
     * @type {string}
     * @memberof DistinctionsSummaryV30
     */
    path?: string;
}
/**
 *
 * @export
 * @interface DistinctionsSummaryV30Rc2
 */
export interface DistinctionsSummaryV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof DistinctionsSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {Array<AffiliationGroupV30Rc2DistinctionSummaryV30Rc2>}
     * @memberof DistinctionsSummaryV30Rc2
     */
    affiliationGroup?: Array<AffiliationGroupV30Rc2DistinctionSummaryV30Rc2>;
    /**
     *
     * @type {string}
     * @memberof DistinctionsSummaryV30Rc2
     */
    path?: string;
}
/**
 *
 * @export
 * @interface DistinctionsV30Rc1
 */
export interface DistinctionsV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof DistinctionsV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {Array<AffiliationGroupV30Rc1DistinctionSummaryV30Rc1>}
     * @memberof DistinctionsV30Rc1
     */
    affiliationGroup?: Array<AffiliationGroupV30Rc1DistinctionSummaryV30Rc1>;
    /**
     *
     * @type {string}
     * @memberof DistinctionsV30Rc1
     */
    path?: string;
}
/**
 *
 * @export
 * @interface EducationSummaryV20
 */
export interface EducationSummaryV20 {
    /**
     *
     * @type {CreatedDateV20}
     * @memberof EducationSummaryV20
     */
    createdDate?: CreatedDateV20;
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof EducationSummaryV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {SourceV20}
     * @memberof EducationSummaryV20
     */
    source?: SourceV20;
    /**
     *
     * @type {string}
     * @memberof EducationSummaryV20
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof EducationSummaryV20
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV20}
     * @memberof EducationSummaryV20
     */
    startDate?: FuzzyDateV20;
    /**
     *
     * @type {FuzzyDateV20}
     * @memberof EducationSummaryV20
     */
    endDate?: FuzzyDateV20;
    /**
     *
     * @type {OrganizationV20}
     * @memberof EducationSummaryV20
     */
    organization?: OrganizationV20;
    /**
     *
     * @type {string}
     * @memberof EducationSummaryV20
     */
    visibility?: EducationSummaryV20VisibilityEnum;
    /**
     *
     * @type {number}
     * @memberof EducationSummaryV20
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof EducationSummaryV20
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum EducationSummaryV20VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface EducationSummaryV30
 */
export interface EducationSummaryV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof EducationSummaryV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof EducationSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof EducationSummaryV30
     */
    source?: SourceV30;
    /**
     *
     * @type {number}
     * @memberof EducationSummaryV30
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof EducationSummaryV30
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof EducationSummaryV30
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof EducationSummaryV30
     */
    startDate?: FuzzyDateV30;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof EducationSummaryV30
     */
    endDate?: FuzzyDateV30;
    /**
     *
     * @type {OrganizationV30}
     * @memberof EducationSummaryV30
     */
    organization?: OrganizationV30;
    /**
     *
     * @type {UrlV30}
     * @memberof EducationSummaryV30
     */
    url?: UrlV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof EducationSummaryV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {string}
     * @memberof EducationSummaryV30
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof EducationSummaryV30
     */
    visibility?: EducationSummaryV30VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof EducationSummaryV30
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum EducationSummaryV30VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface EducationSummaryV30Rc1
 */
export interface EducationSummaryV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof EducationSummaryV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof EducationSummaryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof EducationSummaryV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {number}
     * @memberof EducationSummaryV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof EducationSummaryV30Rc1
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof EducationSummaryV30Rc1
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof EducationSummaryV30Rc1
     */
    startDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof EducationSummaryV30Rc1
     */
    endDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {OrganizationV30Rc1}
     * @memberof EducationSummaryV30Rc1
     */
    organization?: OrganizationV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof EducationSummaryV30Rc1
     */
    url?: UrlV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof EducationSummaryV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {string}
     * @memberof EducationSummaryV30Rc1
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof EducationSummaryV30Rc1
     */
    visibility?: EducationSummaryV30Rc1VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof EducationSummaryV30Rc1
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum EducationSummaryV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface EducationSummaryV30Rc2
 */
export interface EducationSummaryV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof EducationSummaryV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof EducationSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof EducationSummaryV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {number}
     * @memberof EducationSummaryV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof EducationSummaryV30Rc2
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof EducationSummaryV30Rc2
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof EducationSummaryV30Rc2
     */
    startDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof EducationSummaryV30Rc2
     */
    endDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {OrganizationV30Rc2}
     * @memberof EducationSummaryV30Rc2
     */
    organization?: OrganizationV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof EducationSummaryV30Rc2
     */
    url?: UrlV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof EducationSummaryV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {string}
     * @memberof EducationSummaryV30Rc2
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof EducationSummaryV30Rc2
     */
    visibility?: EducationSummaryV30Rc2VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof EducationSummaryV30Rc2
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum EducationSummaryV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface EducationV20
 */
export interface EducationV20 {
    /**
     *
     * @type {CreatedDateV20}
     * @memberof EducationV20
     */
    createdDate?: CreatedDateV20;
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof EducationV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {SourceV20}
     * @memberof EducationV20
     */
    source?: SourceV20;
    /**
     *
     * @type {number}
     * @memberof EducationV20
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof EducationV20
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof EducationV20
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof EducationV20
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV20}
     * @memberof EducationV20
     */
    startDate?: FuzzyDateV20;
    /**
     *
     * @type {FuzzyDateV20}
     * @memberof EducationV20
     */
    endDate?: FuzzyDateV20;
    /**
     *
     * @type {OrganizationV20}
     * @memberof EducationV20
     */
    organization: OrganizationV20;
    /**
     *
     * @type {string}
     * @memberof EducationV20
     */
    visibility?: EducationV20VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum EducationV20VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface EducationV30
 */
export interface EducationV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof EducationV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof EducationV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof EducationV30
     */
    source?: SourceV30;
    /**
     *
     * @type {number}
     * @memberof EducationV30
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof EducationV30
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof EducationV30
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof EducationV30
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof EducationV30
     */
    startDate: FuzzyDateV30;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof EducationV30
     */
    endDate?: FuzzyDateV30;
    /**
     *
     * @type {OrganizationV30}
     * @memberof EducationV30
     */
    organization: OrganizationV30;
    /**
     *
     * @type {UrlV30}
     * @memberof EducationV30
     */
    url?: UrlV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof EducationV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {string}
     * @memberof EducationV30
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof EducationV30
     */
    visibility?: EducationV30VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum EducationV30VisibilityEnum {
    Limited = 'limited',
    RegisteredOnly = 'registered-only',
    Public = 'public'
}

/**
 *
 * @export
 * @interface EducationV30Rc1
 */
export interface EducationV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof EducationV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof EducationV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof EducationV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {number}
     * @memberof EducationV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof EducationV30Rc1
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof EducationV30Rc1
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof EducationV30Rc1
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof EducationV30Rc1
     */
    startDate: FuzzyDateV30Rc1;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof EducationV30Rc1
     */
    endDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {OrganizationV30Rc1}
     * @memberof EducationV30Rc1
     */
    organization: OrganizationV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof EducationV30Rc1
     */
    url?: UrlV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof EducationV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {string}
     * @memberof EducationV30Rc1
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof EducationV30Rc1
     */
    visibility?: EducationV30Rc1VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum EducationV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface EducationV30Rc2
 */
export interface EducationV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof EducationV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof EducationV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof EducationV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {number}
     * @memberof EducationV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof EducationV30Rc2
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof EducationV30Rc2
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof EducationV30Rc2
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof EducationV30Rc2
     */
    startDate: FuzzyDateV30Rc2;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof EducationV30Rc2
     */
    endDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {OrganizationV30Rc2}
     * @memberof EducationV30Rc2
     */
    organization: OrganizationV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof EducationV30Rc2
     */
    url?: UrlV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof EducationV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {string}
     * @memberof EducationV30Rc2
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof EducationV30Rc2
     */
    visibility?: EducationV30Rc2VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum EducationV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface EducationsSummaryV20
 */
export interface EducationsSummaryV20 {
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof EducationsSummaryV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {Array<EducationSummaryV20>}
     * @memberof EducationsSummaryV20
     */
    educationSummary?: Array<EducationSummaryV20>;
    /**
     *
     * @type {string}
     * @memberof EducationsSummaryV20
     */
    path?: string;
}
/**
 *
 * @export
 * @interface EducationsSummaryV30
 */
export interface EducationsSummaryV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof EducationsSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {Array<AffiliationGroupV30EducationSummaryV30>}
     * @memberof EducationsSummaryV30
     */
    affiliationGroup?: Array<AffiliationGroupV30EducationSummaryV30>;
    /**
     *
     * @type {string}
     * @memberof EducationsSummaryV30
     */
    path?: string;
}
/**
 *
 * @export
 * @interface EducationsSummaryV30Rc1
 */
export interface EducationsSummaryV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof EducationsSummaryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {Array<AffiliationGroupV30Rc1EducationSummaryV30Rc1>}
     * @memberof EducationsSummaryV30Rc1
     */
    affiliationGroup?: Array<AffiliationGroupV30Rc1EducationSummaryV30Rc1>;
    /**
     *
     * @type {string}
     * @memberof EducationsSummaryV30Rc1
     */
    path?: string;
}
/**
 *
 * @export
 * @interface EducationsSummaryV30Rc2
 */
export interface EducationsSummaryV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof EducationsSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {Array<AffiliationGroupV30Rc2EducationSummaryV30Rc2>}
     * @memberof EducationsSummaryV30Rc2
     */
    affiliationGroup?: Array<AffiliationGroupV30Rc2EducationSummaryV30Rc2>;
    /**
     *
     * @type {string}
     * @memberof EducationsSummaryV30Rc2
     */
    path?: string;
}
/**
 *
 * @export
 * @interface EmailV20
 */
export interface EmailV20 {
    /**
     *
     * @type {CreatedDateV20}
     * @memberof EmailV20
     */
    createdDate?: CreatedDateV20;
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof EmailV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {SourceV20}
     * @memberof EmailV20
     */
    source?: SourceV20;
    /**
     *
     * @type {string}
     * @memberof EmailV20
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof EmailV20
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof EmailV20
     */
    visibility?: EmailV20VisibilityEnum;
    /**
     *
     * @type {boolean}
     * @memberof EmailV20
     */
    verified?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof EmailV20
     */
    primary?: boolean;
    /**
     *
     * @type {number}
     * @memberof EmailV20
     */
    putCode?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum EmailV20VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface EmailV30
 */
export interface EmailV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof EmailV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof EmailV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof EmailV30
     */
    source?: SourceV30;
    /**
     *
     * @type {string}
     * @memberof EmailV30
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof EmailV30
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof EmailV30
     */
    visibility?: EmailV30VisibilityEnum;
    /**
     *
     * @type {boolean}
     * @memberof EmailV30
     */
    verified?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof EmailV30
     */
    primary?: boolean;
    /**
     *
     * @type {number}
     * @memberof EmailV30
     */
    putCode?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum EmailV30VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface EmailV30Rc1
 */
export interface EmailV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof EmailV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof EmailV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof EmailV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {string}
     * @memberof EmailV30Rc1
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof EmailV30Rc1
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof EmailV30Rc1
     */
    visibility?: EmailV30Rc1VisibilityEnum;
    /**
     *
     * @type {boolean}
     * @memberof EmailV30Rc1
     */
    verified?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof EmailV30Rc1
     */
    primary?: boolean;
    /**
     *
     * @type {number}
     * @memberof EmailV30Rc1
     */
    putCode?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum EmailV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface EmailV30Rc2
 */
export interface EmailV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof EmailV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof EmailV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof EmailV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {string}
     * @memberof EmailV30Rc2
     */
    email?: string;
    /**
     *
     * @type {string}
     * @memberof EmailV30Rc2
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof EmailV30Rc2
     */
    visibility?: EmailV30Rc2VisibilityEnum;
    /**
     *
     * @type {boolean}
     * @memberof EmailV30Rc2
     */
    verified?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof EmailV30Rc2
     */
    primary?: boolean;
    /**
     *
     * @type {number}
     * @memberof EmailV30Rc2
     */
    putCode?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum EmailV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface EmailsV20
 */
export interface EmailsV20 {
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof EmailsV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {Array<EmailV20>}
     * @memberof EmailsV20
     */
    email?: Array<EmailV20>;
    /**
     *
     * @type {string}
     * @memberof EmailsV20
     */
    path?: string;
}
/**
 *
 * @export
 * @interface EmailsV30
 */
export interface EmailsV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof EmailsV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {Array<EmailV30>}
     * @memberof EmailsV30
     */
    email?: Array<EmailV30>;
    /**
     *
     * @type {string}
     * @memberof EmailsV30
     */
    path?: string;
}
/**
 *
 * @export
 * @interface EmailsV30Rc1
 */
export interface EmailsV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof EmailsV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {Array<EmailV30Rc1>}
     * @memberof EmailsV30Rc1
     */
    email?: Array<EmailV30Rc1>;
    /**
     *
     * @type {string}
     * @memberof EmailsV30Rc1
     */
    path?: string;
}
/**
 *
 * @export
 * @interface EmailsV30Rc2
 */
export interface EmailsV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof EmailsV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {Array<EmailV30Rc2>}
     * @memberof EmailsV30Rc2
     */
    email?: Array<EmailV30Rc2>;
    /**
     *
     * @type {string}
     * @memberof EmailsV30Rc2
     */
    path?: string;
}
/**
 *
 * @export
 * @interface EmploymentSummaryV20
 */
export interface EmploymentSummaryV20 {
    /**
     *
     * @type {CreatedDateV20}
     * @memberof EmploymentSummaryV20
     */
    createdDate?: CreatedDateV20;
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof EmploymentSummaryV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {SourceV20}
     * @memberof EmploymentSummaryV20
     */
    source?: SourceV20;
    /**
     *
     * @type {string}
     * @memberof EmploymentSummaryV20
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof EmploymentSummaryV20
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV20}
     * @memberof EmploymentSummaryV20
     */
    startDate?: FuzzyDateV20;
    /**
     *
     * @type {FuzzyDateV20}
     * @memberof EmploymentSummaryV20
     */
    endDate?: FuzzyDateV20;
    /**
     *
     * @type {OrganizationV20}
     * @memberof EmploymentSummaryV20
     */
    organization?: OrganizationV20;
    /**
     *
     * @type {string}
     * @memberof EmploymentSummaryV20
     */
    visibility?: EmploymentSummaryV20VisibilityEnum;
    /**
     *
     * @type {number}
     * @memberof EmploymentSummaryV20
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof EmploymentSummaryV20
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum EmploymentSummaryV20VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface EmploymentSummaryV30
 */
export interface EmploymentSummaryV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof EmploymentSummaryV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof EmploymentSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof EmploymentSummaryV30
     */
    source?: SourceV30;
    /**
     *
     * @type {number}
     * @memberof EmploymentSummaryV30
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof EmploymentSummaryV30
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof EmploymentSummaryV30
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof EmploymentSummaryV30
     */
    startDate?: FuzzyDateV30;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof EmploymentSummaryV30
     */
    endDate?: FuzzyDateV30;
    /**
     *
     * @type {OrganizationV30}
     * @memberof EmploymentSummaryV30
     */
    organization?: OrganizationV30;
    /**
     *
     * @type {UrlV30}
     * @memberof EmploymentSummaryV30
     */
    url?: UrlV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof EmploymentSummaryV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {string}
     * @memberof EmploymentSummaryV30
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof EmploymentSummaryV30
     */
    visibility?: EmploymentSummaryV30VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof EmploymentSummaryV30
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum EmploymentSummaryV30VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface EmploymentSummaryV30Rc1
 */
export interface EmploymentSummaryV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof EmploymentSummaryV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof EmploymentSummaryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof EmploymentSummaryV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {number}
     * @memberof EmploymentSummaryV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof EmploymentSummaryV30Rc1
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof EmploymentSummaryV30Rc1
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof EmploymentSummaryV30Rc1
     */
    startDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof EmploymentSummaryV30Rc1
     */
    endDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {OrganizationV30Rc1}
     * @memberof EmploymentSummaryV30Rc1
     */
    organization?: OrganizationV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof EmploymentSummaryV30Rc1
     */
    url?: UrlV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof EmploymentSummaryV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {string}
     * @memberof EmploymentSummaryV30Rc1
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof EmploymentSummaryV30Rc1
     */
    visibility?: EmploymentSummaryV30Rc1VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof EmploymentSummaryV30Rc1
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum EmploymentSummaryV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface EmploymentSummaryV30Rc2
 */
export interface EmploymentSummaryV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof EmploymentSummaryV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof EmploymentSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof EmploymentSummaryV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {number}
     * @memberof EmploymentSummaryV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof EmploymentSummaryV30Rc2
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof EmploymentSummaryV30Rc2
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof EmploymentSummaryV30Rc2
     */
    startDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof EmploymentSummaryV30Rc2
     */
    endDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {OrganizationV30Rc2}
     * @memberof EmploymentSummaryV30Rc2
     */
    organization?: OrganizationV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof EmploymentSummaryV30Rc2
     */
    url?: UrlV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof EmploymentSummaryV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {string}
     * @memberof EmploymentSummaryV30Rc2
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof EmploymentSummaryV30Rc2
     */
    visibility?: EmploymentSummaryV30Rc2VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof EmploymentSummaryV30Rc2
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum EmploymentSummaryV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface EmploymentV20
 */
export interface EmploymentV20 {
    /**
     *
     * @type {CreatedDateV20}
     * @memberof EmploymentV20
     */
    createdDate?: CreatedDateV20;
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof EmploymentV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {SourceV20}
     * @memberof EmploymentV20
     */
    source?: SourceV20;
    /**
     *
     * @type {number}
     * @memberof EmploymentV20
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof EmploymentV20
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof EmploymentV20
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof EmploymentV20
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV20}
     * @memberof EmploymentV20
     */
    startDate?: FuzzyDateV20;
    /**
     *
     * @type {FuzzyDateV20}
     * @memberof EmploymentV20
     */
    endDate?: FuzzyDateV20;
    /**
     *
     * @type {OrganizationV20}
     * @memberof EmploymentV20
     */
    organization: OrganizationV20;
    /**
     *
     * @type {string}
     * @memberof EmploymentV20
     */
    visibility?: EmploymentV20VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum EmploymentV20VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface EmploymentV30
 */
export interface EmploymentV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof EmploymentV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof EmploymentV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof EmploymentV30
     */
    source?: SourceV30;
    /**
     *
     * @type {number}
     * @memberof EmploymentV30
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof EmploymentV30
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof EmploymentV30
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof EmploymentV30
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof EmploymentV30
     */
    startDate: FuzzyDateV30;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof EmploymentV30
     */
    endDate?: FuzzyDateV30;
    /**
     *
     * @type {OrganizationV30}
     * @memberof EmploymentV30
     */
    organization: OrganizationV30;
    /**
     *
     * @type {UrlV30}
     * @memberof EmploymentV30
     */
    url?: UrlV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof EmploymentV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {string}
     * @memberof EmploymentV30
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof EmploymentV30
     */
    visibility?: EmploymentV30VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum EmploymentV30VisibilityEnum {
    Limited = 'limited',
    RegisteredOnly = 'registered-only',
    Public = 'public'
}

/**
 *
 * @export
 * @interface EmploymentV30Rc1
 */
export interface EmploymentV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof EmploymentV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof EmploymentV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof EmploymentV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {number}
     * @memberof EmploymentV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof EmploymentV30Rc1
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof EmploymentV30Rc1
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof EmploymentV30Rc1
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof EmploymentV30Rc1
     */
    startDate: FuzzyDateV30Rc1;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof EmploymentV30Rc1
     */
    endDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {OrganizationV30Rc1}
     * @memberof EmploymentV30Rc1
     */
    organization: OrganizationV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof EmploymentV30Rc1
     */
    url?: UrlV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof EmploymentV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {string}
     * @memberof EmploymentV30Rc1
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof EmploymentV30Rc1
     */
    visibility?: EmploymentV30Rc1VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum EmploymentV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface EmploymentV30Rc2
 */
export interface EmploymentV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof EmploymentV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof EmploymentV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof EmploymentV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {number}
     * @memberof EmploymentV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof EmploymentV30Rc2
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof EmploymentV30Rc2
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof EmploymentV30Rc2
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof EmploymentV30Rc2
     */
    startDate: FuzzyDateV30Rc2;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof EmploymentV30Rc2
     */
    endDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {OrganizationV30Rc2}
     * @memberof EmploymentV30Rc2
     */
    organization: OrganizationV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof EmploymentV30Rc2
     */
    url?: UrlV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof EmploymentV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {string}
     * @memberof EmploymentV30Rc2
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof EmploymentV30Rc2
     */
    visibility?: EmploymentV30Rc2VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum EmploymentV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface EmploymentsSummaryV20
 */
export interface EmploymentsSummaryV20 {
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof EmploymentsSummaryV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {Array<EmploymentSummaryV20>}
     * @memberof EmploymentsSummaryV20
     */
    employmentSummary?: Array<EmploymentSummaryV20>;
    /**
     *
     * @type {string}
     * @memberof EmploymentsSummaryV20
     */
    path?: string;
}
/**
 *
 * @export
 * @interface EmploymentsSummaryV30
 */
export interface EmploymentsSummaryV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof EmploymentsSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {Array<AffiliationGroupV30EmploymentSummaryV30>}
     * @memberof EmploymentsSummaryV30
     */
    affiliationGroup?: Array<AffiliationGroupV30EmploymentSummaryV30>;
    /**
     *
     * @type {string}
     * @memberof EmploymentsSummaryV30
     */
    path?: string;
}
/**
 *
 * @export
 * @interface EmploymentsSummaryV30Rc1
 */
export interface EmploymentsSummaryV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof EmploymentsSummaryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {Array<AffiliationGroupV30Rc1EmploymentSummaryV30Rc1>}
     * @memberof EmploymentsSummaryV30Rc1
     */
    affiliationGroup?: Array<AffiliationGroupV30Rc1EmploymentSummaryV30Rc1>;
    /**
     *
     * @type {string}
     * @memberof EmploymentsSummaryV30Rc1
     */
    path?: string;
}
/**
 *
 * @export
 * @interface EmploymentsSummaryV30Rc2
 */
export interface EmploymentsSummaryV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof EmploymentsSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {Array<AffiliationGroupV30Rc2EmploymentSummaryV30Rc2>}
     * @memberof EmploymentsSummaryV30Rc2
     */
    affiliationGroup?: Array<AffiliationGroupV30Rc2EmploymentSummaryV30Rc2>;
    /**
     *
     * @type {string}
     * @memberof EmploymentsSummaryV30Rc2
     */
    path?: string;
}
/**
 *
 * @export
 * @interface ExternalIDV20
 */
export interface ExternalIDV20 {
    /**
     *
     * @type {string}
     * @memberof ExternalIDV20
     */
    externalIdType: string;
    /**
     *
     * @type {string}
     * @memberof ExternalIDV20
     */
    externalIdValue: string;
    /**
     *
     * @type {UrlV20}
     * @memberof ExternalIDV20
     */
    externalIdUrl?: UrlV20;
    /**
     *
     * @type {string}
     * @memberof ExternalIDV20
     */
    externalIdRelationship?: ExternalIDV20ExternalIdRelationshipEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ExternalIDV20ExternalIdRelationshipEnum {
    PartOf = 'PART_OF',
    Self = 'SELF'
}

/**
 *
 * @export
 * @interface ExternalIDV30
 */
export interface ExternalIDV30 {
    /**
     *
     * @type {string}
     * @memberof ExternalIDV30
     */
    externalIdType: string;
    /**
     *
     * @type {string}
     * @memberof ExternalIDV30
     */
    externalIdValue: string;
    /**
     *
     * @type {TransientNonEmptyString}
     * @memberof ExternalIDV30
     */
    externalIdNormalized?: TransientNonEmptyString;
    /**
     *
     * @type {TransientError}
     * @memberof ExternalIDV30
     */
    externalIdNormalizedError?: TransientError;
    /**
     *
     * @type {UrlV30}
     * @memberof ExternalIDV30
     */
    externalIdUrl?: UrlV30;
    /**
     *
     * @type {string}
     * @memberof ExternalIDV30
     */
    externalIdRelationship?: ExternalIDV30ExternalIdRelationshipEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ExternalIDV30ExternalIdRelationshipEnum {
    PartOf = 'part-of',
    Self = 'self',
    VersionOf = 'version-of'
}

/**
 *
 * @export
 * @interface ExternalIDV30Rc1
 */
export interface ExternalIDV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof ExternalIDV30Rc1
     */
    externalIdType: string;
    /**
     *
     * @type {string}
     * @memberof ExternalIDV30Rc1
     */
    externalIdValue: string;
    /**
     *
     * @type {TransientNonEmptyString}
     * @memberof ExternalIDV30Rc1
     */
    externalIdNormalized?: TransientNonEmptyString;
    /**
     *
     * @type {TransientError}
     * @memberof ExternalIDV30Rc1
     */
    externalIdNormalizedError?: TransientError;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof ExternalIDV30Rc1
     */
    externalIdUrl?: UrlV30Rc1;
    /**
     *
     * @type {string}
     * @memberof ExternalIDV30Rc1
     */
    externalIdRelationship?: ExternalIDV30Rc1ExternalIdRelationshipEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ExternalIDV30Rc1ExternalIdRelationshipEnum {
    PartOf = 'PART_OF',
    Self = 'SELF'
}

/**
 *
 * @export
 * @interface ExternalIDV30Rc2
 */
export interface ExternalIDV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof ExternalIDV30Rc2
     */
    externalIdType: string;
    /**
     *
     * @type {string}
     * @memberof ExternalIDV30Rc2
     */
    externalIdValue: string;
    /**
     *
     * @type {TransientNonEmptyString}
     * @memberof ExternalIDV30Rc2
     */
    externalIdNormalized?: TransientNonEmptyString;
    /**
     *
     * @type {TransientError}
     * @memberof ExternalIDV30Rc2
     */
    externalIdNormalizedError?: TransientError;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof ExternalIDV30Rc2
     */
    externalIdUrl?: UrlV30Rc2;
    /**
     *
     * @type {string}
     * @memberof ExternalIDV30Rc2
     */
    externalIdRelationship?: ExternalIDV30Rc2ExternalIdRelationshipEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ExternalIDV30Rc2ExternalIdRelationshipEnum {
    PartOf = 'PART_OF',
    Self = 'SELF',
    VersionOf = 'VERSION_OF'
}

/**
 *
 * @export
 * @interface ExternalIDsV20
 */
export interface ExternalIDsV20 {
    /**
     *
     * @type {Array<ExternalIDV20>}
     * @memberof ExternalIDsV20
     */
    externalId?: Array<ExternalIDV20>;
}
/**
 *
 * @export
 * @interface ExternalIDsV30
 */
export interface ExternalIDsV30 {
    /**
     *
     * @type {Array<ExternalIDV30>}
     * @memberof ExternalIDsV30
     */
    externalId?: Array<ExternalIDV30>;
}
/**
 *
 * @export
 * @interface ExternalIDsV30Rc1
 */
export interface ExternalIDsV30Rc1 {
    /**
     *
     * @type {Array<ExternalIDV30Rc1>}
     * @memberof ExternalIDsV30Rc1
     */
    externalId?: Array<ExternalIDV30Rc1>;
}
/**
 *
 * @export
 * @interface ExternalIDsV30Rc2
 */
export interface ExternalIDsV30Rc2 {
    /**
     *
     * @type {Array<ExternalIDV30Rc2>}
     * @memberof ExternalIDsV30Rc2
     */
    externalId?: Array<ExternalIDV30Rc2>;
}
/**
 *
 * @export
 * @interface FamilyNameV20
 */
export interface FamilyNameV20 {
    /**
     *
     * @type {string}
     * @memberof FamilyNameV20
     */
    value?: string;
}
/**
 *
 * @export
 * @interface FamilyNameV30
 */
export interface FamilyNameV30 {
    /**
     *
     * @type {string}
     * @memberof FamilyNameV30
     */
    value?: string;
}
/**
 *
 * @export
 * @interface FamilyNameV30Rc1
 */
export interface FamilyNameV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof FamilyNameV30Rc1
     */
    value?: string;
}
/**
 *
 * @export
 * @interface FamilyNameV30Rc2
 */
export interface FamilyNameV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof FamilyNameV30Rc2
     */
    value?: string;
}
/**
 *
 * @export
 * @interface FundingContributorAttributesV20
 */
export interface FundingContributorAttributesV20 {
    /**
     *
     * @type {string}
     * @memberof FundingContributorAttributesV20
     */
    contributorRole: FundingContributorAttributesV20ContributorRoleEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum FundingContributorAttributesV20ContributorRoleEnum {
    Lead = 'LEAD',
    CoLead = 'CO_LEAD',
    SupportedBy = 'SUPPORTED_BY',
    OtherContribution = 'OTHER_CONTRIBUTION'
}

/**
 *
 * @export
 * @interface FundingContributorAttributesV30
 */
export interface FundingContributorAttributesV30 {
    /**
     *
     * @type {string}
     * @memberof FundingContributorAttributesV30
     */
    contributorRole: FundingContributorAttributesV30ContributorRoleEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum FundingContributorAttributesV30ContributorRoleEnum {
    Author = 'author',
    Assignee = 'assignee',
    Editor = 'editor',
    ChairOrTranslator = 'chair-or-translator',
    CoInvestigator = 'co-investigator',
    CoInventor = 'co-inventor',
    GraduateStudent = 'graduate-student',
    OtherInventor = 'other-inventor',
    PrincipalInvestigator = 'principal-investigator',
    PostdoctoralResearcher = 'postdoctoral-researcher',
    SupportStaff = 'support-staff'
}

/**
 *
 * @export
 * @interface FundingContributorAttributesV30Rc1
 */
export interface FundingContributorAttributesV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof FundingContributorAttributesV30Rc1
     */
    contributorRole: FundingContributorAttributesV30Rc1ContributorRoleEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum FundingContributorAttributesV30Rc1ContributorRoleEnum {
    Lead = 'LEAD',
    CoLead = 'CO_LEAD',
    SupportedBy = 'SUPPORTED_BY',
    OtherContribution = 'OTHER_CONTRIBUTION'
}

/**
 *
 * @export
 * @interface FundingContributorAttributesV30Rc2
 */
export interface FundingContributorAttributesV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof FundingContributorAttributesV30Rc2
     */
    contributorRole: FundingContributorAttributesV30Rc2ContributorRoleEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum FundingContributorAttributesV30Rc2ContributorRoleEnum {
    Lead = 'LEAD',
    CoLead = 'CO_LEAD',
    SupportedBy = 'SUPPORTED_BY',
    OtherContribution = 'OTHER_CONTRIBUTION'
}

/**
 *
 * @export
 * @interface FundingContributorV20
 */
export interface FundingContributorV20 {
    /**
     *
     * @type {ContributorOrcidV20}
     * @memberof FundingContributorV20
     */
    contributorOrcid?: ContributorOrcidV20;
    /**
     *
     * @type {CreditNameV20}
     * @memberof FundingContributorV20
     */
    creditName?: CreditNameV20;
    /**
     *
     * @type {ContributorEmailV20}
     * @memberof FundingContributorV20
     */
    contributorEmail?: ContributorEmailV20;
    /**
     *
     * @type {FundingContributorAttributesV20}
     * @memberof FundingContributorV20
     */
    contributorAttributes?: FundingContributorAttributesV20;
}
/**
 *
 * @export
 * @interface FundingContributorV30
 */
export interface FundingContributorV30 {
    /**
     *
     * @type {ContributorOrcidV30}
     * @memberof FundingContributorV30
     */
    contributorOrcid?: ContributorOrcidV30;
    /**
     *
     * @type {CreditNameV30}
     * @memberof FundingContributorV30
     */
    creditName?: CreditNameV30;
    /**
     *
     * @type {ContributorEmailV30}
     * @memberof FundingContributorV30
     */
    contributorEmail?: ContributorEmailV30;
    /**
     *
     * @type {FundingContributorAttributesV30}
     * @memberof FundingContributorV30
     */
    contributorAttributes?: FundingContributorAttributesV30;
}
/**
 *
 * @export
 * @interface FundingContributorV30Rc1
 */
export interface FundingContributorV30Rc1 {
    /**
     *
     * @type {ContributorOrcidV30Rc1}
     * @memberof FundingContributorV30Rc1
     */
    contributorOrcid?: ContributorOrcidV30Rc1;
    /**
     *
     * @type {CreditNameV30Rc1}
     * @memberof FundingContributorV30Rc1
     */
    creditName?: CreditNameV30Rc1;
    /**
     *
     * @type {ContributorEmailV30Rc1}
     * @memberof FundingContributorV30Rc1
     */
    contributorEmail?: ContributorEmailV30Rc1;
    /**
     *
     * @type {FundingContributorAttributesV30Rc1}
     * @memberof FundingContributorV30Rc1
     */
    contributorAttributes?: FundingContributorAttributesV30Rc1;
}
/**
 *
 * @export
 * @interface FundingContributorV30Rc2
 */
export interface FundingContributorV30Rc2 {
    /**
     *
     * @type {ContributorOrcidV30Rc2}
     * @memberof FundingContributorV30Rc2
     */
    contributorOrcid?: ContributorOrcidV30Rc2;
    /**
     *
     * @type {CreditNameV30Rc2}
     * @memberof FundingContributorV30Rc2
     */
    creditName?: CreditNameV30Rc2;
    /**
     *
     * @type {ContributorEmailV30Rc2}
     * @memberof FundingContributorV30Rc2
     */
    contributorEmail?: ContributorEmailV30Rc2;
    /**
     *
     * @type {FundingContributorAttributesV30Rc2}
     * @memberof FundingContributorV30Rc2
     */
    contributorAttributes?: FundingContributorAttributesV30Rc2;
}
/**
 *
 * @export
 * @interface FundingContributorsV20
 */
export interface FundingContributorsV20 {
    /**
     *
     * @type {Array<FundingContributorV20>}
     * @memberof FundingContributorsV20
     */
    contributor?: Array<FundingContributorV20>;
}
/**
 *
 * @export
 * @interface FundingContributorsV30
 */
export interface FundingContributorsV30 {
    /**
     *
     * @type {Array<FundingContributorV30>}
     * @memberof FundingContributorsV30
     */
    contributor?: Array<FundingContributorV30>;
}
/**
 *
 * @export
 * @interface FundingContributorsV30Rc1
 */
export interface FundingContributorsV30Rc1 {
    /**
     *
     * @type {Array<FundingContributorV30Rc1>}
     * @memberof FundingContributorsV30Rc1
     */
    contributor?: Array<FundingContributorV30Rc1>;
}
/**
 *
 * @export
 * @interface FundingContributorsV30Rc2
 */
export interface FundingContributorsV30Rc2 {
    /**
     *
     * @type {Array<FundingContributorV30Rc2>}
     * @memberof FundingContributorsV30Rc2
     */
    contributor?: Array<FundingContributorV30Rc2>;
}
/**
 *
 * @export
 * @interface FundingGroupV20
 */
export interface FundingGroupV20 {
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof FundingGroupV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {ExternalIDsV20}
     * @memberof FundingGroupV20
     */
    externalIds?: ExternalIDsV20;
    /**
     *
     * @type {Array<FundingSummaryV20>}
     * @memberof FundingGroupV20
     */
    fundingSummary?: Array<FundingSummaryV20>;
}
/**
 *
 * @export
 * @interface FundingGroupV30
 */
export interface FundingGroupV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof FundingGroupV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof FundingGroupV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {Array<FundingSummaryV30>}
     * @memberof FundingGroupV30
     */
    fundingSummary?: Array<FundingSummaryV30>;
}
/**
 *
 * @export
 * @interface FundingGroupV30Rc1
 */
export interface FundingGroupV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof FundingGroupV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof FundingGroupV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {Array<FundingSummaryV30Rc1>}
     * @memberof FundingGroupV30Rc1
     */
    fundingSummary?: Array<FundingSummaryV30Rc1>;
}
/**
 *
 * @export
 * @interface FundingGroupV30Rc2
 */
export interface FundingGroupV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof FundingGroupV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof FundingGroupV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {Array<FundingSummaryV30Rc2>}
     * @memberof FundingGroupV30Rc2
     */
    fundingSummary?: Array<FundingSummaryV30Rc2>;
}
/**
 *
 * @export
 * @interface FundingSummaryV20
 */
export interface FundingSummaryV20 {
    /**
     *
     * @type {CreatedDateV20}
     * @memberof FundingSummaryV20
     */
    createdDate?: CreatedDateV20;
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof FundingSummaryV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {SourceV20}
     * @memberof FundingSummaryV20
     */
    source?: SourceV20;
    /**
     *
     * @type {FundingTitleV20}
     * @memberof FundingSummaryV20
     */
    title: FundingTitleV20;
    /**
     *
     * @type {ExternalIDsV20}
     * @memberof FundingSummaryV20
     */
    externalIds?: ExternalIDsV20;
    /**
     *
     * @type {string}
     * @memberof FundingSummaryV20
     */
    type: FundingSummaryV20TypeEnum;
    /**
     *
     * @type {FuzzyDateV20}
     * @memberof FundingSummaryV20
     */
    startDate?: FuzzyDateV20;
    /**
     *
     * @type {FuzzyDateV20}
     * @memberof FundingSummaryV20
     */
    endDate?: FuzzyDateV20;
    /**
     *
     * @type {OrganizationV20}
     * @memberof FundingSummaryV20
     */
    organization: OrganizationV20;
    /**
     *
     * @type {string}
     * @memberof FundingSummaryV20
     */
    visibility?: FundingSummaryV20VisibilityEnum;
    /**
     *
     * @type {number}
     * @memberof FundingSummaryV20
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof FundingSummaryV20
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof FundingSummaryV20
     */
    displayIndex?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FundingSummaryV20TypeEnum {
    Grant = 'GRANT',
    Contract = 'CONTRACT',
    Award = 'AWARD',
    SalaryAward = 'SALARY_AWARD'
}
/**
    * @export
    * @enum {string}
    */
export enum FundingSummaryV20VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface FundingSummaryV30
 */
export interface FundingSummaryV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof FundingSummaryV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof FundingSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof FundingSummaryV30
     */
    source?: SourceV30;
    /**
     *
     * @type {FundingTitleV30}
     * @memberof FundingSummaryV30
     */
    title: FundingTitleV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof FundingSummaryV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {UrlV30}
     * @memberof FundingSummaryV30
     */
    url?: UrlV30;
    /**
     *
     * @type {string}
     * @memberof FundingSummaryV30
     */
    type: FundingSummaryV30TypeEnum;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof FundingSummaryV30
     */
    startDate?: FuzzyDateV30;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof FundingSummaryV30
     */
    endDate?: FuzzyDateV30;
    /**
     *
     * @type {OrganizationV30}
     * @memberof FundingSummaryV30
     */
    organization: OrganizationV30;
    /**
     *
     * @type {string}
     * @memberof FundingSummaryV30
     */
    visibility?: FundingSummaryV30VisibilityEnum;
    /**
     *
     * @type {number}
     * @memberof FundingSummaryV30
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof FundingSummaryV30
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof FundingSummaryV30
     */
    displayIndex?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FundingSummaryV30TypeEnum {
    Grant = 'GRANT',
    Contract = 'CONTRACT',
    Award = 'AWARD',
    SalaryAward = 'SALARY_AWARD'
}
/**
    * @export
    * @enum {string}
    */
export enum FundingSummaryV30VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface FundingSummaryV30Rc1
 */
export interface FundingSummaryV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof FundingSummaryV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof FundingSummaryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof FundingSummaryV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {FundingTitleV30Rc1}
     * @memberof FundingSummaryV30Rc1
     */
    title: FundingTitleV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof FundingSummaryV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof FundingSummaryV30Rc1
     */
    url?: UrlV30Rc1;
    /**
     *
     * @type {string}
     * @memberof FundingSummaryV30Rc1
     */
    type: FundingSummaryV30Rc1TypeEnum;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof FundingSummaryV30Rc1
     */
    startDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof FundingSummaryV30Rc1
     */
    endDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {OrganizationV30Rc1}
     * @memberof FundingSummaryV30Rc1
     */
    organization: OrganizationV30Rc1;
    /**
     *
     * @type {string}
     * @memberof FundingSummaryV30Rc1
     */
    visibility?: FundingSummaryV30Rc1VisibilityEnum;
    /**
     *
     * @type {number}
     * @memberof FundingSummaryV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof FundingSummaryV30Rc1
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof FundingSummaryV30Rc1
     */
    displayIndex?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FundingSummaryV30Rc1TypeEnum {
    Grant = 'GRANT',
    Contract = 'CONTRACT',
    Award = 'AWARD',
    SalaryAward = 'SALARY_AWARD'
}
/**
    * @export
    * @enum {string}
    */
export enum FundingSummaryV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface FundingSummaryV30Rc2
 */
export interface FundingSummaryV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof FundingSummaryV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof FundingSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof FundingSummaryV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {FundingTitleV30Rc2}
     * @memberof FundingSummaryV30Rc2
     */
    title: FundingTitleV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof FundingSummaryV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof FundingSummaryV30Rc2
     */
    url?: UrlV30Rc2;
    /**
     *
     * @type {string}
     * @memberof FundingSummaryV30Rc2
     */
    type: FundingSummaryV30Rc2TypeEnum;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof FundingSummaryV30Rc2
     */
    startDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof FundingSummaryV30Rc2
     */
    endDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {OrganizationV30Rc2}
     * @memberof FundingSummaryV30Rc2
     */
    organization: OrganizationV30Rc2;
    /**
     *
     * @type {string}
     * @memberof FundingSummaryV30Rc2
     */
    visibility?: FundingSummaryV30Rc2VisibilityEnum;
    /**
     *
     * @type {number}
     * @memberof FundingSummaryV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof FundingSummaryV30Rc2
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof FundingSummaryV30Rc2
     */
    displayIndex?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum FundingSummaryV30Rc2TypeEnum {
    Grant = 'GRANT',
    Contract = 'CONTRACT',
    Award = 'AWARD',
    SalaryAward = 'SALARY_AWARD'
}
/**
    * @export
    * @enum {string}
    */
export enum FundingSummaryV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface FundingTitleV20
 */
export interface FundingTitleV20 {
    /**
     *
     * @type {TitleV20}
     * @memberof FundingTitleV20
     */
    title?: TitleV20;
    /**
     *
     * @type {TranslatedTitleV20}
     * @memberof FundingTitleV20
     */
    translatedTitle?: TranslatedTitleV20;
}
/**
 *
 * @export
 * @interface FundingTitleV30
 */
export interface FundingTitleV30 {
    /**
     *
     * @type {TitleV30}
     * @memberof FundingTitleV30
     */
    title?: TitleV30;
    /**
     *
     * @type {TranslatedTitleV30}
     * @memberof FundingTitleV30
     */
    translatedTitle?: TranslatedTitleV30;
}
/**
 *
 * @export
 * @interface FundingTitleV30Rc1
 */
export interface FundingTitleV30Rc1 {
    /**
     *
     * @type {TitleV30Rc1}
     * @memberof FundingTitleV30Rc1
     */
    title?: TitleV30Rc1;
    /**
     *
     * @type {TranslatedTitleV30Rc1}
     * @memberof FundingTitleV30Rc1
     */
    translatedTitle?: TranslatedTitleV30Rc1;
}
/**
 *
 * @export
 * @interface FundingTitleV30Rc2
 */
export interface FundingTitleV30Rc2 {
    /**
     *
     * @type {TitleV30Rc2}
     * @memberof FundingTitleV30Rc2
     */
    title?: TitleV30Rc2;
    /**
     *
     * @type {TranslatedTitleV30Rc2}
     * @memberof FundingTitleV30Rc2
     */
    translatedTitle?: TranslatedTitleV30Rc2;
}
/**
 *
 * @export
 * @interface FundingV20
 */
export interface FundingV20 {
    /**
     *
     * @type {CreatedDateV20}
     * @memberof FundingV20
     */
    createdDate?: CreatedDateV20;
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof FundingV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {SourceV20}
     * @memberof FundingV20
     */
    source?: SourceV20;
    /**
     *
     * @type {number}
     * @memberof FundingV20
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof FundingV20
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof FundingV20
     */
    type: FundingV20TypeEnum;
    /**
     *
     * @type {OrganizationDefinedFundingSubTypeV20}
     * @memberof FundingV20
     */
    organizationDefinedType?: OrganizationDefinedFundingSubTypeV20;
    /**
     *
     * @type {FundingTitleV20}
     * @memberof FundingV20
     */
    title: FundingTitleV20;
    /**
     *
     * @type {string}
     * @memberof FundingV20
     */
    shortDescription?: string;
    /**
     *
     * @type {AmountV20}
     * @memberof FundingV20
     */
    amount?: AmountV20;
    /**
     *
     * @type {UrlV20}
     * @memberof FundingV20
     */
    url?: UrlV20;
    /**
     *
     * @type {FuzzyDateV20}
     * @memberof FundingV20
     */
    startDate?: FuzzyDateV20;
    /**
     *
     * @type {FuzzyDateV20}
     * @memberof FundingV20
     */
    endDate?: FuzzyDateV20;
    /**
     *
     * @type {ExternalIDsV20}
     * @memberof FundingV20
     */
    externalIds?: ExternalIDsV20;
    /**
     *
     * @type {FundingContributorsV20}
     * @memberof FundingV20
     */
    contributors?: FundingContributorsV20;
    /**
     *
     * @type {OrganizationV20}
     * @memberof FundingV20
     */
    organization: OrganizationV20;
    /**
     *
     * @type {string}
     * @memberof FundingV20
     */
    visibility?: FundingV20VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum FundingV20TypeEnum {
    Grant = 'GRANT',
    Contract = 'CONTRACT',
    Award = 'AWARD',
    SalaryAward = 'SALARY_AWARD'
}
/**
    * @export
    * @enum {string}
    */
export enum FundingV20VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface FundingV30
 */
export interface FundingV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof FundingV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof FundingV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof FundingV30
     */
    source?: SourceV30;
    /**
     *
     * @type {number}
     * @memberof FundingV30
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof FundingV30
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof FundingV30
     */
    type: FundingV30TypeEnum;
    /**
     *
     * @type {OrganizationDefinedFundingSubTypeV30}
     * @memberof FundingV30
     */
    organizationDefinedType?: OrganizationDefinedFundingSubTypeV30;
    /**
     *
     * @type {FundingTitleV30}
     * @memberof FundingV30
     */
    title: FundingTitleV30;
    /**
     *
     * @type {string}
     * @memberof FundingV30
     */
    shortDescription?: string;
    /**
     *
     * @type {AmountV30}
     * @memberof FundingV30
     */
    amount?: AmountV30;
    /**
     *
     * @type {UrlV30}
     * @memberof FundingV30
     */
    url?: UrlV30;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof FundingV30
     */
    startDate?: FuzzyDateV30;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof FundingV30
     */
    endDate?: FuzzyDateV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof FundingV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {FundingContributorsV30}
     * @memberof FundingV30
     */
    contributors?: FundingContributorsV30;
    /**
     *
     * @type {OrganizationV30}
     * @memberof FundingV30
     */
    organization: OrganizationV30;
    /**
     *
     * @type {string}
     * @memberof FundingV30
     */
    visibility?: FundingV30VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum FundingV30TypeEnum {
    Grant = 'grant',
    Contract = 'contract',
    Award = 'award',
    SalaryAward = 'salary-award'
}
/**
    * @export
    * @enum {string}
    */
export enum FundingV30VisibilityEnum {
    Limited = 'limited',
    RegisteredOnly = 'registered-only',
    Public = 'public'
}

/**
 *
 * @export
 * @interface FundingV30Rc1
 */
export interface FundingV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof FundingV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof FundingV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof FundingV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {number}
     * @memberof FundingV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof FundingV30Rc1
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof FundingV30Rc1
     */
    type: FundingV30Rc1TypeEnum;
    /**
     *
     * @type {OrganizationDefinedFundingSubTypeV30Rc1}
     * @memberof FundingV30Rc1
     */
    organizationDefinedType?: OrganizationDefinedFundingSubTypeV30Rc1;
    /**
     *
     * @type {FundingTitleV30Rc1}
     * @memberof FundingV30Rc1
     */
    title: FundingTitleV30Rc1;
    /**
     *
     * @type {string}
     * @memberof FundingV30Rc1
     */
    shortDescription?: string;
    /**
     *
     * @type {AmountV30Rc1}
     * @memberof FundingV30Rc1
     */
    amount?: AmountV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof FundingV30Rc1
     */
    url?: UrlV30Rc1;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof FundingV30Rc1
     */
    startDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof FundingV30Rc1
     */
    endDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof FundingV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {FundingContributorsV30Rc1}
     * @memberof FundingV30Rc1
     */
    contributors?: FundingContributorsV30Rc1;
    /**
     *
     * @type {OrganizationV30Rc1}
     * @memberof FundingV30Rc1
     */
    organization: OrganizationV30Rc1;
    /**
     *
     * @type {string}
     * @memberof FundingV30Rc1
     */
    visibility?: FundingV30Rc1VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum FundingV30Rc1TypeEnum {
    Grant = 'GRANT',
    Contract = 'CONTRACT',
    Award = 'AWARD',
    SalaryAward = 'SALARY_AWARD'
}
/**
    * @export
    * @enum {string}
    */
export enum FundingV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface FundingV30Rc2
 */
export interface FundingV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof FundingV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof FundingV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof FundingV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {number}
     * @memberof FundingV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof FundingV30Rc2
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof FundingV30Rc2
     */
    type: FundingV30Rc2TypeEnum;
    /**
     *
     * @type {OrganizationDefinedFundingSubTypeV30Rc2}
     * @memberof FundingV30Rc2
     */
    organizationDefinedType?: OrganizationDefinedFundingSubTypeV30Rc2;
    /**
     *
     * @type {FundingTitleV30Rc2}
     * @memberof FundingV30Rc2
     */
    title: FundingTitleV30Rc2;
    /**
     *
     * @type {string}
     * @memberof FundingV30Rc2
     */
    shortDescription?: string;
    /**
     *
     * @type {AmountV30Rc2}
     * @memberof FundingV30Rc2
     */
    amount?: AmountV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof FundingV30Rc2
     */
    url?: UrlV30Rc2;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof FundingV30Rc2
     */
    startDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof FundingV30Rc2
     */
    endDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof FundingV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {FundingContributorsV30Rc2}
     * @memberof FundingV30Rc2
     */
    contributors?: FundingContributorsV30Rc2;
    /**
     *
     * @type {OrganizationV30Rc2}
     * @memberof FundingV30Rc2
     */
    organization: OrganizationV30Rc2;
    /**
     *
     * @type {string}
     * @memberof FundingV30Rc2
     */
    visibility?: FundingV30Rc2VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum FundingV30Rc2TypeEnum {
    Grant = 'GRANT',
    Contract = 'CONTRACT',
    Award = 'AWARD',
    SalaryAward = 'SALARY_AWARD'
}
/**
    * @export
    * @enum {string}
    */
export enum FundingV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface FundingsV20
 */
export interface FundingsV20 {
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof FundingsV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {Array<FundingGroupV20>}
     * @memberof FundingsV20
     */
    group?: Array<FundingGroupV20>;
    /**
     *
     * @type {string}
     * @memberof FundingsV20
     */
    path?: string;
}
/**
 *
 * @export
 * @interface FundingsV30
 */
export interface FundingsV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof FundingsV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {Array<FundingGroupV30>}
     * @memberof FundingsV30
     */
    group?: Array<FundingGroupV30>;
    /**
     *
     * @type {string}
     * @memberof FundingsV30
     */
    path?: string;
}
/**
 *
 * @export
 * @interface FundingsV30Rc1
 */
export interface FundingsV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof FundingsV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {Array<FundingGroupV30Rc1>}
     * @memberof FundingsV30Rc1
     */
    group?: Array<FundingGroupV30Rc1>;
    /**
     *
     * @type {string}
     * @memberof FundingsV30Rc1
     */
    path?: string;
}
/**
 *
 * @export
 * @interface FundingsV30Rc2
 */
export interface FundingsV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof FundingsV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {Array<FundingGroupV30Rc2>}
     * @memberof FundingsV30Rc2
     */
    group?: Array<FundingGroupV30Rc2>;
    /**
     *
     * @type {string}
     * @memberof FundingsV30Rc2
     */
    path?: string;
}
/**
 *
 * @export
 * @interface FuzzyDateV20
 */
export interface FuzzyDateV20 {
    /**
     *
     * @type {YearV20}
     * @memberof FuzzyDateV20
     */
    year: YearV20;
    /**
     *
     * @type {MonthV20}
     * @memberof FuzzyDateV20
     */
    month?: MonthV20;
    /**
     *
     * @type {DayV20}
     * @memberof FuzzyDateV20
     */
    day?: DayV20;
}
/**
 *
 * @export
 * @interface FuzzyDateV30
 */
export interface FuzzyDateV30 {
    /**
     *
     * @type {YearV30}
     * @memberof FuzzyDateV30
     */
    year: YearV30;
    /**
     *
     * @type {MonthV30}
     * @memberof FuzzyDateV30
     */
    month?: MonthV30;
    /**
     *
     * @type {DayV30}
     * @memberof FuzzyDateV30
     */
    day?: DayV30;
}
/**
 *
 * @export
 * @interface FuzzyDateV30Rc1
 */
export interface FuzzyDateV30Rc1 {
    /**
     *
     * @type {YearV30Rc1}
     * @memberof FuzzyDateV30Rc1
     */
    year: YearV30Rc1;
    /**
     *
     * @type {MonthV30Rc1}
     * @memberof FuzzyDateV30Rc1
     */
    month?: MonthV30Rc1;
    /**
     *
     * @type {DayV30Rc1}
     * @memberof FuzzyDateV30Rc1
     */
    day?: DayV30Rc1;
}
/**
 *
 * @export
 * @interface FuzzyDateV30Rc2
 */
export interface FuzzyDateV30Rc2 {
    /**
     *
     * @type {YearV30Rc2}
     * @memberof FuzzyDateV30Rc2
     */
    year: YearV30Rc2;
    /**
     *
     * @type {MonthV30Rc2}
     * @memberof FuzzyDateV30Rc2
     */
    month?: MonthV30Rc2;
    /**
     *
     * @type {DayV30Rc2}
     * @memberof FuzzyDateV30Rc2
     */
    day?: DayV30Rc2;
}
/**
 *
 * @export
 * @interface GivenNamesV20
 */
export interface GivenNamesV20 {
    /**
     *
     * @type {string}
     * @memberof GivenNamesV20
     */
    value?: string;
}
/**
 *
 * @export
 * @interface GivenNamesV30
 */
export interface GivenNamesV30 {
    /**
     *
     * @type {string}
     * @memberof GivenNamesV30
     */
    value?: string;
}
/**
 *
 * @export
 * @interface GivenNamesV30Rc1
 */
export interface GivenNamesV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof GivenNamesV30Rc1
     */
    value?: string;
}
/**
 *
 * @export
 * @interface GivenNamesV30Rc2
 */
export interface GivenNamesV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof GivenNamesV30Rc2
     */
    value?: string;
}
/**
 *
 * @export
 * @interface HistoryV20
 */
export interface HistoryV20 {
    /**
     *
     * @type {string}
     * @memberof HistoryV20
     */
    creationMethod?: HistoryV20CreationMethodEnum;
    /**
     *
     * @type {CompletionDateV20}
     * @memberof HistoryV20
     */
    completionDate?: CompletionDateV20;
    /**
     *
     * @type {SubmissionDateV20}
     * @memberof HistoryV20
     */
    submissionDate?: SubmissionDateV20;
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof HistoryV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {boolean}
     * @memberof HistoryV20
     */
    claimed?: boolean;
    /**
     *
     * @type {SourceV20}
     * @memberof HistoryV20
     */
    source?: SourceV20;
    /**
     *
     * @type {DeactivationDateV20}
     * @memberof HistoryV20
     */
    deactivationDate?: DeactivationDateV20;
    /**
     *
     * @type {boolean}
     * @memberof HistoryV20
     */
    verifiedEmail?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof HistoryV20
     */
    verifiedPrimaryEmail?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum HistoryV20CreationMethodEnum {
    Api = 'API',
    Direct = 'DIRECT',
    MemberReferred = 'MEMBER_REFERRED',
    Website = 'WEBSITE',
    IntegrationTest = 'INTEGRATION_TEST'
}

/**
 *
 * @export
 * @interface HistoryV30
 */
export interface HistoryV30 {
    /**
     *
     * @type {string}
     * @memberof HistoryV30
     */
    creationMethod?: HistoryV30CreationMethodEnum;
    /**
     *
     * @type {CompletionDateV30}
     * @memberof HistoryV30
     */
    completionDate?: CompletionDateV30;
    /**
     *
     * @type {SubmissionDateV30}
     * @memberof HistoryV30
     */
    submissionDate?: SubmissionDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof HistoryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {boolean}
     * @memberof HistoryV30
     */
    claimed?: boolean;
    /**
     *
     * @type {SourceV30}
     * @memberof HistoryV30
     */
    source?: SourceV30;
    /**
     *
     * @type {DeactivationDateV30}
     * @memberof HistoryV30
     */
    deactivationDate?: DeactivationDateV30;
    /**
     *
     * @type {boolean}
     * @memberof HistoryV30
     */
    verifiedEmail?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof HistoryV30
     */
    verifiedPrimaryEmail?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum HistoryV30CreationMethodEnum {
    Api = 'API',
    Direct = 'DIRECT',
    MemberReferred = 'MEMBER_REFERRED',
    Website = 'WEBSITE',
    IntegrationTest = 'INTEGRATION_TEST'
}

/**
 *
 * @export
 * @interface HistoryV30Rc1
 */
export interface HistoryV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof HistoryV30Rc1
     */
    creationMethod?: HistoryV30Rc1CreationMethodEnum;
    /**
     *
     * @type {CompletionDateV30Rc1}
     * @memberof HistoryV30Rc1
     */
    completionDate?: CompletionDateV30Rc1;
    /**
     *
     * @type {SubmissionDateV30Rc1}
     * @memberof HistoryV30Rc1
     */
    submissionDate?: SubmissionDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof HistoryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {boolean}
     * @memberof HistoryV30Rc1
     */
    claimed?: boolean;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof HistoryV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {DeactivationDateV30Rc1}
     * @memberof HistoryV30Rc1
     */
    deactivationDate?: DeactivationDateV30Rc1;
    /**
     *
     * @type {boolean}
     * @memberof HistoryV30Rc1
     */
    verifiedEmail?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof HistoryV30Rc1
     */
    verifiedPrimaryEmail?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum HistoryV30Rc1CreationMethodEnum {
    Api = 'API',
    Direct = 'DIRECT',
    MemberReferred = 'MEMBER_REFERRED',
    Website = 'WEBSITE',
    IntegrationTest = 'INTEGRATION_TEST'
}

/**
 *
 * @export
 * @interface HistoryV30Rc2
 */
export interface HistoryV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof HistoryV30Rc2
     */
    creationMethod?: HistoryV30Rc2CreationMethodEnum;
    /**
     *
     * @type {CompletionDateV30Rc2}
     * @memberof HistoryV30Rc2
     */
    completionDate?: CompletionDateV30Rc2;
    /**
     *
     * @type {SubmissionDateV30Rc2}
     * @memberof HistoryV30Rc2
     */
    submissionDate?: SubmissionDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof HistoryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {boolean}
     * @memberof HistoryV30Rc2
     */
    claimed?: boolean;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof HistoryV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {DeactivationDateV30Rc2}
     * @memberof HistoryV30Rc2
     */
    deactivationDate?: DeactivationDateV30Rc2;
    /**
     *
     * @type {boolean}
     * @memberof HistoryV30Rc2
     */
    verifiedEmail?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof HistoryV30Rc2
     */
    verifiedPrimaryEmail?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum HistoryV30Rc2CreationMethodEnum {
    Api = 'API',
    Direct = 'DIRECT',
    MemberReferred = 'MEMBER_REFERRED',
    Website = 'WEBSITE',
    IntegrationTest = 'INTEGRATION_TEST'
}

/**
 *
 * @export
 * @interface InvitedPositionSummaryV30
 */
export interface InvitedPositionSummaryV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof InvitedPositionSummaryV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof InvitedPositionSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof InvitedPositionSummaryV30
     */
    source?: SourceV30;
    /**
     *
     * @type {number}
     * @memberof InvitedPositionSummaryV30
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionSummaryV30
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionSummaryV30
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof InvitedPositionSummaryV30
     */
    startDate?: FuzzyDateV30;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof InvitedPositionSummaryV30
     */
    endDate?: FuzzyDateV30;
    /**
     *
     * @type {OrganizationV30}
     * @memberof InvitedPositionSummaryV30
     */
    organization?: OrganizationV30;
    /**
     *
     * @type {UrlV30}
     * @memberof InvitedPositionSummaryV30
     */
    url?: UrlV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof InvitedPositionSummaryV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionSummaryV30
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionSummaryV30
     */
    visibility?: InvitedPositionSummaryV30VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionSummaryV30
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InvitedPositionSummaryV30VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface InvitedPositionSummaryV30Rc1
 */
export interface InvitedPositionSummaryV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof InvitedPositionSummaryV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof InvitedPositionSummaryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof InvitedPositionSummaryV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {number}
     * @memberof InvitedPositionSummaryV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionSummaryV30Rc1
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionSummaryV30Rc1
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof InvitedPositionSummaryV30Rc1
     */
    startDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof InvitedPositionSummaryV30Rc1
     */
    endDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {OrganizationV30Rc1}
     * @memberof InvitedPositionSummaryV30Rc1
     */
    organization?: OrganizationV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof InvitedPositionSummaryV30Rc1
     */
    url?: UrlV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof InvitedPositionSummaryV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionSummaryV30Rc1
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionSummaryV30Rc1
     */
    visibility?: InvitedPositionSummaryV30Rc1VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionSummaryV30Rc1
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InvitedPositionSummaryV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface InvitedPositionSummaryV30Rc2
 */
export interface InvitedPositionSummaryV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof InvitedPositionSummaryV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof InvitedPositionSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof InvitedPositionSummaryV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {number}
     * @memberof InvitedPositionSummaryV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionSummaryV30Rc2
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionSummaryV30Rc2
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof InvitedPositionSummaryV30Rc2
     */
    startDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof InvitedPositionSummaryV30Rc2
     */
    endDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {OrganizationV30Rc2}
     * @memberof InvitedPositionSummaryV30Rc2
     */
    organization?: OrganizationV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof InvitedPositionSummaryV30Rc2
     */
    url?: UrlV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof InvitedPositionSummaryV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionSummaryV30Rc2
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionSummaryV30Rc2
     */
    visibility?: InvitedPositionSummaryV30Rc2VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionSummaryV30Rc2
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum InvitedPositionSummaryV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface InvitedPositionV30
 */
export interface InvitedPositionV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof InvitedPositionV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof InvitedPositionV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof InvitedPositionV30
     */
    source?: SourceV30;
    /**
     *
     * @type {number}
     * @memberof InvitedPositionV30
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionV30
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionV30
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionV30
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof InvitedPositionV30
     */
    startDate: FuzzyDateV30;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof InvitedPositionV30
     */
    endDate?: FuzzyDateV30;
    /**
     *
     * @type {OrganizationV30}
     * @memberof InvitedPositionV30
     */
    organization: OrganizationV30;
    /**
     *
     * @type {UrlV30}
     * @memberof InvitedPositionV30
     */
    url?: UrlV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof InvitedPositionV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionV30
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionV30
     */
    visibility?: InvitedPositionV30VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum InvitedPositionV30VisibilityEnum {
    Limited = 'limited',
    RegisteredOnly = 'registered-only',
    Public = 'public'
}

/**
 *
 * @export
 * @interface InvitedPositionV30Rc1
 */
export interface InvitedPositionV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof InvitedPositionV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof InvitedPositionV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof InvitedPositionV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {number}
     * @memberof InvitedPositionV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionV30Rc1
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionV30Rc1
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionV30Rc1
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof InvitedPositionV30Rc1
     */
    startDate: FuzzyDateV30Rc1;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof InvitedPositionV30Rc1
     */
    endDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {OrganizationV30Rc1}
     * @memberof InvitedPositionV30Rc1
     */
    organization: OrganizationV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof InvitedPositionV30Rc1
     */
    url?: UrlV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof InvitedPositionV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionV30Rc1
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionV30Rc1
     */
    visibility?: InvitedPositionV30Rc1VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum InvitedPositionV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface InvitedPositionV30Rc2
 */
export interface InvitedPositionV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof InvitedPositionV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof InvitedPositionV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof InvitedPositionV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {number}
     * @memberof InvitedPositionV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionV30Rc2
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionV30Rc2
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionV30Rc2
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof InvitedPositionV30Rc2
     */
    startDate: FuzzyDateV30Rc2;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof InvitedPositionV30Rc2
     */
    endDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {OrganizationV30Rc2}
     * @memberof InvitedPositionV30Rc2
     */
    organization: OrganizationV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof InvitedPositionV30Rc2
     */
    url?: UrlV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof InvitedPositionV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionV30Rc2
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionV30Rc2
     */
    visibility?: InvitedPositionV30Rc2VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum InvitedPositionV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface InvitedPositionsV30
 */
export interface InvitedPositionsV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof InvitedPositionsV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {Array<AffiliationGroupV30InvitedPositionSummaryV30>}
     * @memberof InvitedPositionsV30
     */
    affiliationGroup?: Array<AffiliationGroupV30InvitedPositionSummaryV30>;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionsV30
     */
    path?: string;
}
/**
 *
 * @export
 * @interface InvitedPositionsV30Rc1
 */
export interface InvitedPositionsV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof InvitedPositionsV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {Array<AffiliationGroupV30Rc1InvitedPositionSummaryV30Rc1>}
     * @memberof InvitedPositionsV30Rc1
     */
    affiliationGroup?: Array<AffiliationGroupV30Rc1InvitedPositionSummaryV30Rc1>;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionsV30Rc1
     */
    path?: string;
}
/**
 *
 * @export
 * @interface InvitedPositionsV30Rc2
 */
export interface InvitedPositionsV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof InvitedPositionsV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {Array<AffiliationGroupV30Rc2InvitedPositionSummaryV30Rc2>}
     * @memberof InvitedPositionsV30Rc2
     */
    affiliationGroup?: Array<AffiliationGroupV30Rc2InvitedPositionSummaryV30Rc2>;
    /**
     *
     * @type {string}
     * @memberof InvitedPositionsV30Rc2
     */
    path?: string;
}
/**
 *
 * @export
 * @interface KeywordV20
 */
export interface KeywordV20 {
    /**
     *
     * @type {CreatedDateV20}
     * @memberof KeywordV20
     */
    createdDate?: CreatedDateV20;
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof KeywordV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {SourceV20}
     * @memberof KeywordV20
     */
    source?: SourceV20;
    /**
     *
     * @type {string}
     * @memberof KeywordV20
     */
    content?: string;
    /**
     *
     * @type {string}
     * @memberof KeywordV20
     */
    visibility?: KeywordV20VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof KeywordV20
     */
    path?: string;
    /**
     *
     * @type {number}
     * @memberof KeywordV20
     */
    putCode?: number;
    /**
     *
     * @type {number}
     * @memberof KeywordV20
     */
    displayIndex?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum KeywordV20VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface KeywordV30
 */
export interface KeywordV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof KeywordV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof KeywordV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof KeywordV30
     */
    source?: SourceV30;
    /**
     *
     * @type {string}
     * @memberof KeywordV30
     */
    content?: string;
    /**
     *
     * @type {string}
     * @memberof KeywordV30
     */
    visibility?: KeywordV30VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof KeywordV30
     */
    path?: string;
    /**
     *
     * @type {number}
     * @memberof KeywordV30
     */
    putCode?: number;
    /**
     *
     * @type {number}
     * @memberof KeywordV30
     */
    displayIndex?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum KeywordV30VisibilityEnum {
    Limited = 'limited',
    RegisteredOnly = 'registered-only',
    Public = 'public'
}

/**
 *
 * @export
 * @interface KeywordV30Rc1
 */
export interface KeywordV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof KeywordV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof KeywordV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof KeywordV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {string}
     * @memberof KeywordV30Rc1
     */
    content?: string;
    /**
     *
     * @type {string}
     * @memberof KeywordV30Rc1
     */
    visibility?: KeywordV30Rc1VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof KeywordV30Rc1
     */
    path?: string;
    /**
     *
     * @type {number}
     * @memberof KeywordV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {number}
     * @memberof KeywordV30Rc1
     */
    displayIndex?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum KeywordV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface KeywordV30Rc2
 */
export interface KeywordV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof KeywordV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof KeywordV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof KeywordV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {string}
     * @memberof KeywordV30Rc2
     */
    content?: string;
    /**
     *
     * @type {string}
     * @memberof KeywordV30Rc2
     */
    visibility?: KeywordV30Rc2VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof KeywordV30Rc2
     */
    path?: string;
    /**
     *
     * @type {number}
     * @memberof KeywordV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {number}
     * @memberof KeywordV30Rc2
     */
    displayIndex?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum KeywordV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface KeywordsV20
 */
export interface KeywordsV20 {
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof KeywordsV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {Array<KeywordV20>}
     * @memberof KeywordsV20
     */
    keyword?: Array<KeywordV20>;
    /**
     *
     * @type {string}
     * @memberof KeywordsV20
     */
    path?: string;
}
/**
 *
 * @export
 * @interface KeywordsV30
 */
export interface KeywordsV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof KeywordsV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {Array<KeywordV30>}
     * @memberof KeywordsV30
     */
    keyword?: Array<KeywordV30>;
    /**
     *
     * @type {string}
     * @memberof KeywordsV30
     */
    path?: string;
}
/**
 *
 * @export
 * @interface KeywordsV30Rc1
 */
export interface KeywordsV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof KeywordsV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {Array<KeywordV30Rc1>}
     * @memberof KeywordsV30Rc1
     */
    keyword?: Array<KeywordV30Rc1>;
    /**
     *
     * @type {string}
     * @memberof KeywordsV30Rc1
     */
    path?: string;
}
/**
 *
 * @export
 * @interface KeywordsV30Rc2
 */
export interface KeywordsV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof KeywordsV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {Array<KeywordV30Rc2>}
     * @memberof KeywordsV30Rc2
     */
    keyword?: Array<KeywordV30Rc2>;
    /**
     *
     * @type {string}
     * @memberof KeywordsV30Rc2
     */
    path?: string;
}
/**
 *
 * @export
 * @interface LastModifiedDateV20
 */
export interface LastModifiedDateV20 {
    /**
     *
     * @type {string}
     * @memberof LastModifiedDateV20
     */
    value?: string;
}
/**
 *
 * @export
 * @interface LastModifiedDateV30
 */
export interface LastModifiedDateV30 {
    /**
     *
     * @type {string}
     * @memberof LastModifiedDateV30
     */
    value?: string;
}
/**
 *
 * @export
 * @interface LastModifiedDateV30Rc1
 */
export interface LastModifiedDateV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof LastModifiedDateV30Rc1
     */
    value?: string;
}
/**
 *
 * @export
 * @interface LastModifiedDateV30Rc2
 */
export interface LastModifiedDateV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof LastModifiedDateV30Rc2
     */
    value?: string;
}
/**
 *
 * @export
 * @interface MembershipSummaryV30
 */
export interface MembershipSummaryV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof MembershipSummaryV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof MembershipSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof MembershipSummaryV30
     */
    source?: SourceV30;
    /**
     *
     * @type {number}
     * @memberof MembershipSummaryV30
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof MembershipSummaryV30
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof MembershipSummaryV30
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof MembershipSummaryV30
     */
    startDate?: FuzzyDateV30;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof MembershipSummaryV30
     */
    endDate?: FuzzyDateV30;
    /**
     *
     * @type {OrganizationV30}
     * @memberof MembershipSummaryV30
     */
    organization?: OrganizationV30;
    /**
     *
     * @type {UrlV30}
     * @memberof MembershipSummaryV30
     */
    url?: UrlV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof MembershipSummaryV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {string}
     * @memberof MembershipSummaryV30
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof MembershipSummaryV30
     */
    visibility?: MembershipSummaryV30VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof MembershipSummaryV30
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum MembershipSummaryV30VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface MembershipSummaryV30Rc1
 */
export interface MembershipSummaryV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof MembershipSummaryV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof MembershipSummaryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof MembershipSummaryV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {number}
     * @memberof MembershipSummaryV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof MembershipSummaryV30Rc1
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof MembershipSummaryV30Rc1
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof MembershipSummaryV30Rc1
     */
    startDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof MembershipSummaryV30Rc1
     */
    endDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {OrganizationV30Rc1}
     * @memberof MembershipSummaryV30Rc1
     */
    organization?: OrganizationV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof MembershipSummaryV30Rc1
     */
    url?: UrlV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof MembershipSummaryV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {string}
     * @memberof MembershipSummaryV30Rc1
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof MembershipSummaryV30Rc1
     */
    visibility?: MembershipSummaryV30Rc1VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof MembershipSummaryV30Rc1
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum MembershipSummaryV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface MembershipSummaryV30Rc2
 */
export interface MembershipSummaryV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof MembershipSummaryV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof MembershipSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof MembershipSummaryV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {number}
     * @memberof MembershipSummaryV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof MembershipSummaryV30Rc2
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof MembershipSummaryV30Rc2
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof MembershipSummaryV30Rc2
     */
    startDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof MembershipSummaryV30Rc2
     */
    endDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {OrganizationV30Rc2}
     * @memberof MembershipSummaryV30Rc2
     */
    organization?: OrganizationV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof MembershipSummaryV30Rc2
     */
    url?: UrlV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof MembershipSummaryV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {string}
     * @memberof MembershipSummaryV30Rc2
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof MembershipSummaryV30Rc2
     */
    visibility?: MembershipSummaryV30Rc2VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof MembershipSummaryV30Rc2
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum MembershipSummaryV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface MembershipV30
 */
export interface MembershipV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof MembershipV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof MembershipV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof MembershipV30
     */
    source?: SourceV30;
    /**
     *
     * @type {number}
     * @memberof MembershipV30
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof MembershipV30
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof MembershipV30
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof MembershipV30
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof MembershipV30
     */
    startDate: FuzzyDateV30;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof MembershipV30
     */
    endDate?: FuzzyDateV30;
    /**
     *
     * @type {OrganizationV30}
     * @memberof MembershipV30
     */
    organization: OrganizationV30;
    /**
     *
     * @type {UrlV30}
     * @memberof MembershipV30
     */
    url?: UrlV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof MembershipV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {string}
     * @memberof MembershipV30
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof MembershipV30
     */
    visibility?: MembershipV30VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum MembershipV30VisibilityEnum {
    Limited = 'limited',
    RegisteredOnly = 'registered-only',
    Public = 'public'
}

/**
 *
 * @export
 * @interface MembershipV30Rc1
 */
export interface MembershipV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof MembershipV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof MembershipV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof MembershipV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {number}
     * @memberof MembershipV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof MembershipV30Rc1
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof MembershipV30Rc1
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof MembershipV30Rc1
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof MembershipV30Rc1
     */
    startDate: FuzzyDateV30Rc1;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof MembershipV30Rc1
     */
    endDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {OrganizationV30Rc1}
     * @memberof MembershipV30Rc1
     */
    organization: OrganizationV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof MembershipV30Rc1
     */
    url?: UrlV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof MembershipV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {string}
     * @memberof MembershipV30Rc1
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof MembershipV30Rc1
     */
    visibility?: MembershipV30Rc1VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum MembershipV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface MembershipV30Rc2
 */
export interface MembershipV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof MembershipV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof MembershipV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof MembershipV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {number}
     * @memberof MembershipV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof MembershipV30Rc2
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof MembershipV30Rc2
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof MembershipV30Rc2
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof MembershipV30Rc2
     */
    startDate: FuzzyDateV30Rc2;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof MembershipV30Rc2
     */
    endDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {OrganizationV30Rc2}
     * @memberof MembershipV30Rc2
     */
    organization: OrganizationV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof MembershipV30Rc2
     */
    url?: UrlV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof MembershipV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {string}
     * @memberof MembershipV30Rc2
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof MembershipV30Rc2
     */
    visibility?: MembershipV30Rc2VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum MembershipV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface MembershipsV30
 */
export interface MembershipsV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof MembershipsV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {Array<AffiliationGroupV30MembershipSummaryV30>}
     * @memberof MembershipsV30
     */
    affiliationGroup?: Array<AffiliationGroupV30MembershipSummaryV30>;
    /**
     *
     * @type {string}
     * @memberof MembershipsV30
     */
    path?: string;
}
/**
 *
 * @export
 * @interface MembershipsV30Rc1
 */
export interface MembershipsV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof MembershipsV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {Array<AffiliationGroupV30Rc1MembershipSummaryV30Rc1>}
     * @memberof MembershipsV30Rc1
     */
    affiliationGroup?: Array<AffiliationGroupV30Rc1MembershipSummaryV30Rc1>;
    /**
     *
     * @type {string}
     * @memberof MembershipsV30Rc1
     */
    path?: string;
}
/**
 *
 * @export
 * @interface MembershipsV30Rc2
 */
export interface MembershipsV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof MembershipsV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {Array<AffiliationGroupV30Rc2MembershipSummaryV30Rc2>}
     * @memberof MembershipsV30Rc2
     */
    affiliationGroup?: Array<AffiliationGroupV30Rc2MembershipSummaryV30Rc2>;
    /**
     *
     * @type {string}
     * @memberof MembershipsV30Rc2
     */
    path?: string;
}
/**
 *
 * @export
 * @interface MonthV20
 */
export interface MonthV20 {
    /**
     *
     * @type {string}
     * @memberof MonthV20
     */
    value?: string;
}
/**
 *
 * @export
 * @interface MonthV30
 */
export interface MonthV30 {
    /**
     *
     * @type {string}
     * @memberof MonthV30
     */
    value?: string;
}
/**
 *
 * @export
 * @interface MonthV30Rc1
 */
export interface MonthV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof MonthV30Rc1
     */
    value?: string;
}
/**
 *
 * @export
 * @interface MonthV30Rc2
 */
export interface MonthV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof MonthV30Rc2
     */
    value?: string;
}
/**
 *
 * @export
 * @interface NameV20
 */
export interface NameV20 {
    /**
     *
     * @type {CreatedDateV20}
     * @memberof NameV20
     */
    createdDate?: CreatedDateV20;
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof NameV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {GivenNamesV20}
     * @memberof NameV20
     */
    givenNames?: GivenNamesV20;
    /**
     *
     * @type {FamilyNameV20}
     * @memberof NameV20
     */
    familyName?: FamilyNameV20;
    /**
     *
     * @type {CreditNameV20}
     * @memberof NameV20
     */
    creditName?: CreditNameV20;
    /**
     *
     * @type {SourceV20}
     * @memberof NameV20
     */
    source?: SourceV20;
    /**
     *
     * @type {string}
     * @memberof NameV20
     */
    visibility?: NameV20VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof NameV20
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum NameV20VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface NameV30
 */
export interface NameV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof NameV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof NameV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {GivenNamesV30}
     * @memberof NameV30
     */
    givenNames?: GivenNamesV30;
    /**
     *
     * @type {FamilyNameV30}
     * @memberof NameV30
     */
    familyName?: FamilyNameV30;
    /**
     *
     * @type {CreditNameV30}
     * @memberof NameV30
     */
    creditName?: CreditNameV30;
    /**
     *
     * @type {SourceV30}
     * @memberof NameV30
     */
    source?: SourceV30;
    /**
     *
     * @type {string}
     * @memberof NameV30
     */
    visibility?: NameV30VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof NameV30
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum NameV30VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface NameV30Rc1
 */
export interface NameV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof NameV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof NameV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {GivenNamesV30Rc1}
     * @memberof NameV30Rc1
     */
    givenNames?: GivenNamesV30Rc1;
    /**
     *
     * @type {FamilyNameV30Rc1}
     * @memberof NameV30Rc1
     */
    familyName?: FamilyNameV30Rc1;
    /**
     *
     * @type {CreditNameV30Rc1}
     * @memberof NameV30Rc1
     */
    creditName?: CreditNameV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof NameV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {string}
     * @memberof NameV30Rc1
     */
    visibility?: NameV30Rc1VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof NameV30Rc1
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum NameV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface NameV30Rc2
 */
export interface NameV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof NameV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof NameV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {GivenNamesV30Rc2}
     * @memberof NameV30Rc2
     */
    givenNames?: GivenNamesV30Rc2;
    /**
     *
     * @type {FamilyNameV30Rc2}
     * @memberof NameV30Rc2
     */
    familyName?: FamilyNameV30Rc2;
    /**
     *
     * @type {CreditNameV30Rc2}
     * @memberof NameV30Rc2
     */
    creditName?: CreditNameV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof NameV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {string}
     * @memberof NameV30Rc2
     */
    visibility?: NameV30Rc2VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof NameV30Rc2
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum NameV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface OrcidIdentifierV20
 */
export interface OrcidIdentifierV20 {
    /**
     *
     * @type {string}
     * @memberof OrcidIdentifierV20
     */
    uri?: string;
    /**
     *
     * @type {string}
     * @memberof OrcidIdentifierV20
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof OrcidIdentifierV20
     */
    host?: string;
}
/**
 *
 * @export
 * @interface OrcidIdentifierV30
 */
export interface OrcidIdentifierV30 {
    /**
     *
     * @type {string}
     * @memberof OrcidIdentifierV30
     */
    uri?: string;
    /**
     *
     * @type {string}
     * @memberof OrcidIdentifierV30
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof OrcidIdentifierV30
     */
    host?: string;
}
/**
 *
 * @export
 * @interface OrcidIdentifierV30Rc1
 */
export interface OrcidIdentifierV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof OrcidIdentifierV30Rc1
     */
    uri?: string;
    /**
     *
     * @type {string}
     * @memberof OrcidIdentifierV30Rc1
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof OrcidIdentifierV30Rc1
     */
    host?: string;
}
/**
 *
 * @export
 * @interface OrcidIdentifierV30Rc2
 */
export interface OrcidIdentifierV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof OrcidIdentifierV30Rc2
     */
    uri?: string;
    /**
     *
     * @type {string}
     * @memberof OrcidIdentifierV30Rc2
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof OrcidIdentifierV30Rc2
     */
    host?: string;
}
/**
 *
 * @export
 * @interface OrganizationAddressV20
 */
export interface OrganizationAddressV20 {
    /**
     *
     * @type {string}
     * @memberof OrganizationAddressV20
     */
    city: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationAddressV20
     */
    region?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationAddressV20
     */
    country: OrganizationAddressV20CountryEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum OrganizationAddressV20CountryEnum {
    Af = 'AF',
    Ax = 'AX',
    Al = 'AL',
    Dz = 'DZ',
    As = 'AS',
    Ad = 'AD',
    Ao = 'AO',
    Ai = 'AI',
    Aq = 'AQ',
    Ag = 'AG',
    Ar = 'AR',
    Am = 'AM',
    Aw = 'AW',
    Au = 'AU',
    At = 'AT',
    Az = 'AZ',
    Bs = 'BS',
    Bh = 'BH',
    Bd = 'BD',
    Bb = 'BB',
    By = 'BY',
    Be = 'BE',
    Bz = 'BZ',
    Bj = 'BJ',
    Bm = 'BM',
    Bt = 'BT',
    Bo = 'BO',
    Bq = 'BQ',
    Ba = 'BA',
    Bw = 'BW',
    Bv = 'BV',
    Br = 'BR',
    Io = 'IO',
    Bn = 'BN',
    Bg = 'BG',
    Bf = 'BF',
    Bi = 'BI',
    Kh = 'KH',
    Cm = 'CM',
    Ca = 'CA',
    Cv = 'CV',
    Ky = 'KY',
    Cf = 'CF',
    Td = 'TD',
    Cl = 'CL',
    Cn = 'CN',
    Cx = 'CX',
    Cc = 'CC',
    Co = 'CO',
    Km = 'KM',
    Cg = 'CG',
    Cd = 'CD',
    Ck = 'CK',
    Cr = 'CR',
    Ci = 'CI',
    Hr = 'HR',
    Cu = 'CU',
    Cw = 'CW',
    Cy = 'CY',
    Cz = 'CZ',
    Dk = 'DK',
    Dj = 'DJ',
    Dm = 'DM',
    Do = 'DO',
    Ec = 'EC',
    Eg = 'EG',
    Sv = 'SV',
    Gq = 'GQ',
    Er = 'ER',
    Ee = 'EE',
    Et = 'ET',
    Fk = 'FK',
    Fo = 'FO',
    Fj = 'FJ',
    Fi = 'FI',
    Fr = 'FR',
    Gf = 'GF',
    Pf = 'PF',
    Tf = 'TF',
    Ga = 'GA',
    Gm = 'GM',
    Ge = 'GE',
    De = 'DE',
    Gh = 'GH',
    Gi = 'GI',
    Gr = 'GR',
    Gl = 'GL',
    Gd = 'GD',
    Gp = 'GP',
    Gu = 'GU',
    Gt = 'GT',
    Gg = 'GG',
    Gn = 'GN',
    Gw = 'GW',
    Gy = 'GY',
    Ht = 'HT',
    Hm = 'HM',
    Va = 'VA',
    Hn = 'HN',
    Hk = 'HK',
    Hu = 'HU',
    Is = 'IS',
    In = 'IN',
    Id = 'ID',
    Ir = 'IR',
    Iq = 'IQ',
    Ie = 'IE',
    Im = 'IM',
    Il = 'IL',
    It = 'IT',
    Jm = 'JM',
    Jp = 'JP',
    Je = 'JE',
    Jo = 'JO',
    Kz = 'KZ',
    Ke = 'KE',
    Ki = 'KI',
    Kp = 'KP',
    Kr = 'KR',
    Kw = 'KW',
    Kg = 'KG',
    La = 'LA',
    Lv = 'LV',
    Lb = 'LB',
    Ls = 'LS',
    Lr = 'LR',
    Ly = 'LY',
    Li = 'LI',
    Lt = 'LT',
    Lu = 'LU',
    Mo = 'MO',
    Mk = 'MK',
    Mg = 'MG',
    Mw = 'MW',
    My = 'MY',
    Mv = 'MV',
    Ml = 'ML',
    Mt = 'MT',
    Mh = 'MH',
    Mq = 'MQ',
    Mr = 'MR',
    Mu = 'MU',
    Yt = 'YT',
    Mx = 'MX',
    Fm = 'FM',
    Md = 'MD',
    Mc = 'MC',
    Mn = 'MN',
    Me = 'ME',
    Ms = 'MS',
    Ma = 'MA',
    Mz = 'MZ',
    Mm = 'MM',
    Na = 'NA',
    Nr = 'NR',
    Np = 'NP',
    Nl = 'NL',
    Nc = 'NC',
    Nz = 'NZ',
    Ni = 'NI',
    Ne = 'NE',
    Ng = 'NG',
    Nu = 'NU',
    Nf = 'NF',
    Mp = 'MP',
    No = 'NO',
    Om = 'OM',
    Pk = 'PK',
    Pw = 'PW',
    Ps = 'PS',
    Pa = 'PA',
    Pg = 'PG',
    Py = 'PY',
    Pe = 'PE',
    Ph = 'PH',
    Pn = 'PN',
    Pl = 'PL',
    Pt = 'PT',
    Pr = 'PR',
    Qa = 'QA',
    Re = 'RE',
    Ro = 'RO',
    Ru = 'RU',
    Rw = 'RW',
    Bl = 'BL',
    Sh = 'SH',
    Kn = 'KN',
    Lc = 'LC',
    Mf = 'MF',
    Pm = 'PM',
    Vc = 'VC',
    Ws = 'WS',
    Sm = 'SM',
    St = 'ST',
    Sa = 'SA',
    Sn = 'SN',
    Rs = 'RS',
    Sc = 'SC',
    Sl = 'SL',
    Sg = 'SG',
    Sx = 'SX',
    Sk = 'SK',
    Si = 'SI',
    Sb = 'SB',
    So = 'SO',
    Za = 'ZA',
    Gs = 'GS',
    Ss = 'SS',
    Es = 'ES',
    Lk = 'LK',
    Sd = 'SD',
    Sr = 'SR',
    Sj = 'SJ',
    Sz = 'SZ',
    Se = 'SE',
    Ch = 'CH',
    Sy = 'SY',
    Tj = 'TJ',
    Tz = 'TZ',
    Th = 'TH',
    Tl = 'TL',
    Tg = 'TG',
    Tk = 'TK',
    To = 'TO',
    Tt = 'TT',
    Tn = 'TN',
    Tr = 'TR',
    Tm = 'TM',
    Tc = 'TC',
    Tv = 'TV',
    Ug = 'UG',
    Ua = 'UA',
    Ae = 'AE',
    Gb = 'GB',
    Us = 'US',
    Um = 'UM',
    Uy = 'UY',
    Uz = 'UZ',
    Vu = 'VU',
    Ve = 'VE',
    Vn = 'VN',
    Vg = 'VG',
    Vi = 'VI',
    Wf = 'WF',
    Eh = 'EH',
    Ye = 'YE',
    Zm = 'ZM',
    Zw = 'ZW',
    Tw = 'TW',
    Xk = 'XK'
}

/**
 *
 * @export
 * @interface OrganizationAddressV30
 */
export interface OrganizationAddressV30 {
    /**
     *
     * @type {string}
     * @memberof OrganizationAddressV30
     */
    city: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationAddressV30
     */
    region?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationAddressV30
     */
    country: OrganizationAddressV30CountryEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum OrganizationAddressV30CountryEnum {
    Af = 'AF',
    Ax = 'AX',
    Al = 'AL',
    Dz = 'DZ',
    As = 'AS',
    Ad = 'AD',
    Ao = 'AO',
    Ai = 'AI',
    Aq = 'AQ',
    Ag = 'AG',
    Ar = 'AR',
    Am = 'AM',
    Aw = 'AW',
    Au = 'AU',
    At = 'AT',
    Az = 'AZ',
    Bs = 'BS',
    Bh = 'BH',
    Bd = 'BD',
    Bb = 'BB',
    By = 'BY',
    Be = 'BE',
    Bz = 'BZ',
    Bj = 'BJ',
    Bm = 'BM',
    Bt = 'BT',
    Bo = 'BO',
    Bq = 'BQ',
    Ba = 'BA',
    Bw = 'BW',
    Bv = 'BV',
    Br = 'BR',
    Io = 'IO',
    Bn = 'BN',
    Bg = 'BG',
    Bf = 'BF',
    Bi = 'BI',
    Kh = 'KH',
    Cm = 'CM',
    Ca = 'CA',
    Cv = 'CV',
    Ky = 'KY',
    Cf = 'CF',
    Td = 'TD',
    Cl = 'CL',
    Cn = 'CN',
    Cx = 'CX',
    Cc = 'CC',
    Co = 'CO',
    Km = 'KM',
    Cg = 'CG',
    Cd = 'CD',
    Ck = 'CK',
    Cr = 'CR',
    Ci = 'CI',
    Hr = 'HR',
    Cu = 'CU',
    Cw = 'CW',
    Cy = 'CY',
    Cz = 'CZ',
    Dk = 'DK',
    Dj = 'DJ',
    Dm = 'DM',
    Do = 'DO',
    Ec = 'EC',
    Eg = 'EG',
    Sv = 'SV',
    Gq = 'GQ',
    Er = 'ER',
    Ee = 'EE',
    Et = 'ET',
    Fk = 'FK',
    Fo = 'FO',
    Fj = 'FJ',
    Fi = 'FI',
    Fr = 'FR',
    Gf = 'GF',
    Pf = 'PF',
    Tf = 'TF',
    Ga = 'GA',
    Gm = 'GM',
    Ge = 'GE',
    De = 'DE',
    Gh = 'GH',
    Gi = 'GI',
    Gr = 'GR',
    Gl = 'GL',
    Gd = 'GD',
    Gp = 'GP',
    Gu = 'GU',
    Gt = 'GT',
    Gg = 'GG',
    Gn = 'GN',
    Gw = 'GW',
    Gy = 'GY',
    Ht = 'HT',
    Hm = 'HM',
    Va = 'VA',
    Hn = 'HN',
    Hk = 'HK',
    Hu = 'HU',
    Is = 'IS',
    In = 'IN',
    Id = 'ID',
    Ir = 'IR',
    Iq = 'IQ',
    Ie = 'IE',
    Im = 'IM',
    Il = 'IL',
    It = 'IT',
    Jm = 'JM',
    Jp = 'JP',
    Je = 'JE',
    Jo = 'JO',
    Kz = 'KZ',
    Ke = 'KE',
    Ki = 'KI',
    Kp = 'KP',
    Kr = 'KR',
    Kw = 'KW',
    Kg = 'KG',
    La = 'LA',
    Lv = 'LV',
    Lb = 'LB',
    Ls = 'LS',
    Lr = 'LR',
    Ly = 'LY',
    Li = 'LI',
    Lt = 'LT',
    Lu = 'LU',
    Mo = 'MO',
    Mk = 'MK',
    Mg = 'MG',
    Mw = 'MW',
    My = 'MY',
    Mv = 'MV',
    Ml = 'ML',
    Mt = 'MT',
    Mh = 'MH',
    Mq = 'MQ',
    Mr = 'MR',
    Mu = 'MU',
    Yt = 'YT',
    Mx = 'MX',
    Fm = 'FM',
    Md = 'MD',
    Mc = 'MC',
    Mn = 'MN',
    Me = 'ME',
    Ms = 'MS',
    Ma = 'MA',
    Mz = 'MZ',
    Mm = 'MM',
    Na = 'NA',
    Nr = 'NR',
    Np = 'NP',
    Nl = 'NL',
    Nc = 'NC',
    Nz = 'NZ',
    Ni = 'NI',
    Ne = 'NE',
    Ng = 'NG',
    Nu = 'NU',
    Nf = 'NF',
    Mp = 'MP',
    No = 'NO',
    Om = 'OM',
    Pk = 'PK',
    Pw = 'PW',
    Ps = 'PS',
    Pa = 'PA',
    Pg = 'PG',
    Py = 'PY',
    Pe = 'PE',
    Ph = 'PH',
    Pn = 'PN',
    Pl = 'PL',
    Pt = 'PT',
    Pr = 'PR',
    Qa = 'QA',
    Re = 'RE',
    Ro = 'RO',
    Ru = 'RU',
    Rw = 'RW',
    Bl = 'BL',
    Sh = 'SH',
    Kn = 'KN',
    Lc = 'LC',
    Mf = 'MF',
    Pm = 'PM',
    Vc = 'VC',
    Ws = 'WS',
    Sm = 'SM',
    St = 'ST',
    Sa = 'SA',
    Sn = 'SN',
    Rs = 'RS',
    Sc = 'SC',
    Sl = 'SL',
    Sg = 'SG',
    Sx = 'SX',
    Sk = 'SK',
    Si = 'SI',
    Sb = 'SB',
    So = 'SO',
    Za = 'ZA',
    Gs = 'GS',
    Ss = 'SS',
    Es = 'ES',
    Lk = 'LK',
    Sd = 'SD',
    Sr = 'SR',
    Sj = 'SJ',
    Sz = 'SZ',
    Se = 'SE',
    Ch = 'CH',
    Sy = 'SY',
    Tj = 'TJ',
    Tz = 'TZ',
    Th = 'TH',
    Tl = 'TL',
    Tg = 'TG',
    Tk = 'TK',
    To = 'TO',
    Tt = 'TT',
    Tn = 'TN',
    Tr = 'TR',
    Tm = 'TM',
    Tc = 'TC',
    Tv = 'TV',
    Ug = 'UG',
    Ua = 'UA',
    Ae = 'AE',
    Gb = 'GB',
    Us = 'US',
    Um = 'UM',
    Uy = 'UY',
    Uz = 'UZ',
    Vu = 'VU',
    Ve = 'VE',
    Vn = 'VN',
    Vg = 'VG',
    Vi = 'VI',
    Wf = 'WF',
    Eh = 'EH',
    Ye = 'YE',
    Zm = 'ZM',
    Zw = 'ZW',
    Tw = 'TW',
    Xk = 'XK'
}

/**
 *
 * @export
 * @interface OrganizationAddressV30Rc1
 */
export interface OrganizationAddressV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof OrganizationAddressV30Rc1
     */
    city: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationAddressV30Rc1
     */
    region?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationAddressV30Rc1
     */
    country: OrganizationAddressV30Rc1CountryEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum OrganizationAddressV30Rc1CountryEnum {
    Af = 'AF',
    Ax = 'AX',
    Al = 'AL',
    Dz = 'DZ',
    As = 'AS',
    Ad = 'AD',
    Ao = 'AO',
    Ai = 'AI',
    Aq = 'AQ',
    Ag = 'AG',
    Ar = 'AR',
    Am = 'AM',
    Aw = 'AW',
    Au = 'AU',
    At = 'AT',
    Az = 'AZ',
    Bs = 'BS',
    Bh = 'BH',
    Bd = 'BD',
    Bb = 'BB',
    By = 'BY',
    Be = 'BE',
    Bz = 'BZ',
    Bj = 'BJ',
    Bm = 'BM',
    Bt = 'BT',
    Bo = 'BO',
    Bq = 'BQ',
    Ba = 'BA',
    Bw = 'BW',
    Bv = 'BV',
    Br = 'BR',
    Io = 'IO',
    Bn = 'BN',
    Bg = 'BG',
    Bf = 'BF',
    Bi = 'BI',
    Kh = 'KH',
    Cm = 'CM',
    Ca = 'CA',
    Cv = 'CV',
    Ky = 'KY',
    Cf = 'CF',
    Td = 'TD',
    Cl = 'CL',
    Cn = 'CN',
    Cx = 'CX',
    Cc = 'CC',
    Co = 'CO',
    Km = 'KM',
    Cg = 'CG',
    Cd = 'CD',
    Ck = 'CK',
    Cr = 'CR',
    Ci = 'CI',
    Hr = 'HR',
    Cu = 'CU',
    Cw = 'CW',
    Cy = 'CY',
    Cz = 'CZ',
    Dk = 'DK',
    Dj = 'DJ',
    Dm = 'DM',
    Do = 'DO',
    Ec = 'EC',
    Eg = 'EG',
    Sv = 'SV',
    Gq = 'GQ',
    Er = 'ER',
    Ee = 'EE',
    Et = 'ET',
    Fk = 'FK',
    Fo = 'FO',
    Fj = 'FJ',
    Fi = 'FI',
    Fr = 'FR',
    Gf = 'GF',
    Pf = 'PF',
    Tf = 'TF',
    Ga = 'GA',
    Gm = 'GM',
    Ge = 'GE',
    De = 'DE',
    Gh = 'GH',
    Gi = 'GI',
    Gr = 'GR',
    Gl = 'GL',
    Gd = 'GD',
    Gp = 'GP',
    Gu = 'GU',
    Gt = 'GT',
    Gg = 'GG',
    Gn = 'GN',
    Gw = 'GW',
    Gy = 'GY',
    Ht = 'HT',
    Hm = 'HM',
    Va = 'VA',
    Hn = 'HN',
    Hk = 'HK',
    Hu = 'HU',
    Is = 'IS',
    In = 'IN',
    Id = 'ID',
    Ir = 'IR',
    Iq = 'IQ',
    Ie = 'IE',
    Im = 'IM',
    Il = 'IL',
    It = 'IT',
    Jm = 'JM',
    Jp = 'JP',
    Je = 'JE',
    Jo = 'JO',
    Kz = 'KZ',
    Ke = 'KE',
    Ki = 'KI',
    Kp = 'KP',
    Kr = 'KR',
    Kw = 'KW',
    Kg = 'KG',
    La = 'LA',
    Lv = 'LV',
    Lb = 'LB',
    Ls = 'LS',
    Lr = 'LR',
    Ly = 'LY',
    Li = 'LI',
    Lt = 'LT',
    Lu = 'LU',
    Mo = 'MO',
    Mk = 'MK',
    Mg = 'MG',
    Mw = 'MW',
    My = 'MY',
    Mv = 'MV',
    Ml = 'ML',
    Mt = 'MT',
    Mh = 'MH',
    Mq = 'MQ',
    Mr = 'MR',
    Mu = 'MU',
    Yt = 'YT',
    Mx = 'MX',
    Fm = 'FM',
    Md = 'MD',
    Mc = 'MC',
    Mn = 'MN',
    Me = 'ME',
    Ms = 'MS',
    Ma = 'MA',
    Mz = 'MZ',
    Mm = 'MM',
    Na = 'NA',
    Nr = 'NR',
    Np = 'NP',
    Nl = 'NL',
    Nc = 'NC',
    Nz = 'NZ',
    Ni = 'NI',
    Ne = 'NE',
    Ng = 'NG',
    Nu = 'NU',
    Nf = 'NF',
    Mp = 'MP',
    No = 'NO',
    Om = 'OM',
    Pk = 'PK',
    Pw = 'PW',
    Ps = 'PS',
    Pa = 'PA',
    Pg = 'PG',
    Py = 'PY',
    Pe = 'PE',
    Ph = 'PH',
    Pn = 'PN',
    Pl = 'PL',
    Pt = 'PT',
    Pr = 'PR',
    Qa = 'QA',
    Re = 'RE',
    Ro = 'RO',
    Ru = 'RU',
    Rw = 'RW',
    Bl = 'BL',
    Sh = 'SH',
    Kn = 'KN',
    Lc = 'LC',
    Mf = 'MF',
    Pm = 'PM',
    Vc = 'VC',
    Ws = 'WS',
    Sm = 'SM',
    St = 'ST',
    Sa = 'SA',
    Sn = 'SN',
    Rs = 'RS',
    Sc = 'SC',
    Sl = 'SL',
    Sg = 'SG',
    Sx = 'SX',
    Sk = 'SK',
    Si = 'SI',
    Sb = 'SB',
    So = 'SO',
    Za = 'ZA',
    Gs = 'GS',
    Ss = 'SS',
    Es = 'ES',
    Lk = 'LK',
    Sd = 'SD',
    Sr = 'SR',
    Sj = 'SJ',
    Sz = 'SZ',
    Se = 'SE',
    Ch = 'CH',
    Sy = 'SY',
    Tj = 'TJ',
    Tz = 'TZ',
    Th = 'TH',
    Tl = 'TL',
    Tg = 'TG',
    Tk = 'TK',
    To = 'TO',
    Tt = 'TT',
    Tn = 'TN',
    Tr = 'TR',
    Tm = 'TM',
    Tc = 'TC',
    Tv = 'TV',
    Ug = 'UG',
    Ua = 'UA',
    Ae = 'AE',
    Gb = 'GB',
    Us = 'US',
    Um = 'UM',
    Uy = 'UY',
    Uz = 'UZ',
    Vu = 'VU',
    Ve = 'VE',
    Vn = 'VN',
    Vg = 'VG',
    Vi = 'VI',
    Wf = 'WF',
    Eh = 'EH',
    Ye = 'YE',
    Zm = 'ZM',
    Zw = 'ZW',
    Tw = 'TW',
    Xk = 'XK'
}

/**
 *
 * @export
 * @interface OrganizationAddressV30Rc2
 */
export interface OrganizationAddressV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof OrganizationAddressV30Rc2
     */
    city: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationAddressV30Rc2
     */
    region?: string;
    /**
     *
     * @type {string}
     * @memberof OrganizationAddressV30Rc2
     */
    country: OrganizationAddressV30Rc2CountryEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum OrganizationAddressV30Rc2CountryEnum {
    Af = 'AF',
    Ax = 'AX',
    Al = 'AL',
    Dz = 'DZ',
    As = 'AS',
    Ad = 'AD',
    Ao = 'AO',
    Ai = 'AI',
    Aq = 'AQ',
    Ag = 'AG',
    Ar = 'AR',
    Am = 'AM',
    Aw = 'AW',
    Au = 'AU',
    At = 'AT',
    Az = 'AZ',
    Bs = 'BS',
    Bh = 'BH',
    Bd = 'BD',
    Bb = 'BB',
    By = 'BY',
    Be = 'BE',
    Bz = 'BZ',
    Bj = 'BJ',
    Bm = 'BM',
    Bt = 'BT',
    Bo = 'BO',
    Bq = 'BQ',
    Ba = 'BA',
    Bw = 'BW',
    Bv = 'BV',
    Br = 'BR',
    Io = 'IO',
    Bn = 'BN',
    Bg = 'BG',
    Bf = 'BF',
    Bi = 'BI',
    Kh = 'KH',
    Cm = 'CM',
    Ca = 'CA',
    Cv = 'CV',
    Ky = 'KY',
    Cf = 'CF',
    Td = 'TD',
    Cl = 'CL',
    Cn = 'CN',
    Cx = 'CX',
    Cc = 'CC',
    Co = 'CO',
    Km = 'KM',
    Cg = 'CG',
    Cd = 'CD',
    Ck = 'CK',
    Cr = 'CR',
    Ci = 'CI',
    Hr = 'HR',
    Cu = 'CU',
    Cw = 'CW',
    Cy = 'CY',
    Cz = 'CZ',
    Dk = 'DK',
    Dj = 'DJ',
    Dm = 'DM',
    Do = 'DO',
    Ec = 'EC',
    Eg = 'EG',
    Sv = 'SV',
    Gq = 'GQ',
    Er = 'ER',
    Ee = 'EE',
    Et = 'ET',
    Fk = 'FK',
    Fo = 'FO',
    Fj = 'FJ',
    Fi = 'FI',
    Fr = 'FR',
    Gf = 'GF',
    Pf = 'PF',
    Tf = 'TF',
    Ga = 'GA',
    Gm = 'GM',
    Ge = 'GE',
    De = 'DE',
    Gh = 'GH',
    Gi = 'GI',
    Gr = 'GR',
    Gl = 'GL',
    Gd = 'GD',
    Gp = 'GP',
    Gu = 'GU',
    Gt = 'GT',
    Gg = 'GG',
    Gn = 'GN',
    Gw = 'GW',
    Gy = 'GY',
    Ht = 'HT',
    Hm = 'HM',
    Va = 'VA',
    Hn = 'HN',
    Hk = 'HK',
    Hu = 'HU',
    Is = 'IS',
    In = 'IN',
    Id = 'ID',
    Ir = 'IR',
    Iq = 'IQ',
    Ie = 'IE',
    Im = 'IM',
    Il = 'IL',
    It = 'IT',
    Jm = 'JM',
    Jp = 'JP',
    Je = 'JE',
    Jo = 'JO',
    Kz = 'KZ',
    Ke = 'KE',
    Ki = 'KI',
    Kp = 'KP',
    Kr = 'KR',
    Kw = 'KW',
    Kg = 'KG',
    La = 'LA',
    Lv = 'LV',
    Lb = 'LB',
    Ls = 'LS',
    Lr = 'LR',
    Ly = 'LY',
    Li = 'LI',
    Lt = 'LT',
    Lu = 'LU',
    Mo = 'MO',
    Mk = 'MK',
    Mg = 'MG',
    Mw = 'MW',
    My = 'MY',
    Mv = 'MV',
    Ml = 'ML',
    Mt = 'MT',
    Mh = 'MH',
    Mq = 'MQ',
    Mr = 'MR',
    Mu = 'MU',
    Yt = 'YT',
    Mx = 'MX',
    Fm = 'FM',
    Md = 'MD',
    Mc = 'MC',
    Mn = 'MN',
    Me = 'ME',
    Ms = 'MS',
    Ma = 'MA',
    Mz = 'MZ',
    Mm = 'MM',
    Na = 'NA',
    Nr = 'NR',
    Np = 'NP',
    Nl = 'NL',
    Nc = 'NC',
    Nz = 'NZ',
    Ni = 'NI',
    Ne = 'NE',
    Ng = 'NG',
    Nu = 'NU',
    Nf = 'NF',
    Mp = 'MP',
    No = 'NO',
    Om = 'OM',
    Pk = 'PK',
    Pw = 'PW',
    Ps = 'PS',
    Pa = 'PA',
    Pg = 'PG',
    Py = 'PY',
    Pe = 'PE',
    Ph = 'PH',
    Pn = 'PN',
    Pl = 'PL',
    Pt = 'PT',
    Pr = 'PR',
    Qa = 'QA',
    Re = 'RE',
    Ro = 'RO',
    Ru = 'RU',
    Rw = 'RW',
    Bl = 'BL',
    Sh = 'SH',
    Kn = 'KN',
    Lc = 'LC',
    Mf = 'MF',
    Pm = 'PM',
    Vc = 'VC',
    Ws = 'WS',
    Sm = 'SM',
    St = 'ST',
    Sa = 'SA',
    Sn = 'SN',
    Rs = 'RS',
    Sc = 'SC',
    Sl = 'SL',
    Sg = 'SG',
    Sx = 'SX',
    Sk = 'SK',
    Si = 'SI',
    Sb = 'SB',
    So = 'SO',
    Za = 'ZA',
    Gs = 'GS',
    Ss = 'SS',
    Es = 'ES',
    Lk = 'LK',
    Sd = 'SD',
    Sr = 'SR',
    Sj = 'SJ',
    Sz = 'SZ',
    Se = 'SE',
    Ch = 'CH',
    Sy = 'SY',
    Tj = 'TJ',
    Tz = 'TZ',
    Th = 'TH',
    Tl = 'TL',
    Tg = 'TG',
    Tk = 'TK',
    To = 'TO',
    Tt = 'TT',
    Tn = 'TN',
    Tr = 'TR',
    Tm = 'TM',
    Tc = 'TC',
    Tv = 'TV',
    Ug = 'UG',
    Ua = 'UA',
    Ae = 'AE',
    Gb = 'GB',
    Us = 'US',
    Um = 'UM',
    Uy = 'UY',
    Uz = 'UZ',
    Vu = 'VU',
    Ve = 'VE',
    Vn = 'VN',
    Vg = 'VG',
    Vi = 'VI',
    Wf = 'WF',
    Eh = 'EH',
    Ye = 'YE',
    Zm = 'ZM',
    Zw = 'ZW',
    Tw = 'TW',
    Xk = 'XK'
}

/**
 *
 * @export
 * @interface OrganizationDefinedFundingSubTypeV20
 */
export interface OrganizationDefinedFundingSubTypeV20 {
    /**
     *
     * @type {string}
     * @memberof OrganizationDefinedFundingSubTypeV20
     */
    value?: string;
}
/**
 *
 * @export
 * @interface OrganizationDefinedFundingSubTypeV30
 */
export interface OrganizationDefinedFundingSubTypeV30 {
    /**
     *
     * @type {string}
     * @memberof OrganizationDefinedFundingSubTypeV30
     */
    value?: string;
}
/**
 *
 * @export
 * @interface OrganizationDefinedFundingSubTypeV30Rc1
 */
export interface OrganizationDefinedFundingSubTypeV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof OrganizationDefinedFundingSubTypeV30Rc1
     */
    value?: string;
}
/**
 *
 * @export
 * @interface OrganizationDefinedFundingSubTypeV30Rc2
 */
export interface OrganizationDefinedFundingSubTypeV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof OrganizationDefinedFundingSubTypeV30Rc2
     */
    value?: string;
}
/**
 *
 * @export
 * @interface OrganizationV20
 */
export interface OrganizationV20 {
    /**
     *
     * @type {string}
     * @memberof OrganizationV20
     */
    name: string;
    /**
     *
     * @type {OrganizationAddressV20}
     * @memberof OrganizationV20
     */
    address: OrganizationAddressV20;
    /**
     *
     * @type {DisambiguatedOrganizationV20}
     * @memberof OrganizationV20
     */
    disambiguatedOrganization?: DisambiguatedOrganizationV20;
}
/**
 *
 * @export
 * @interface OrganizationV30
 */
export interface OrganizationV30 {
    /**
     *
     * @type {string}
     * @memberof OrganizationV30
     */
    name: string;
    /**
     *
     * @type {OrganizationAddressV30}
     * @memberof OrganizationV30
     */
    address: OrganizationAddressV30;
    /**
     *
     * @type {DisambiguatedOrganizationV30}
     * @memberof OrganizationV30
     */
    disambiguatedOrganization?: DisambiguatedOrganizationV30;
}
/**
 *
 * @export
 * @interface OrganizationV30Rc1
 */
export interface OrganizationV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof OrganizationV30Rc1
     */
    name: string;
    /**
     *
     * @type {OrganizationAddressV30Rc1}
     * @memberof OrganizationV30Rc1
     */
    address: OrganizationAddressV30Rc1;
    /**
     *
     * @type {DisambiguatedOrganizationV30Rc1}
     * @memberof OrganizationV30Rc1
     */
    disambiguatedOrganization?: DisambiguatedOrganizationV30Rc1;
}
/**
 *
 * @export
 * @interface OrganizationV30Rc2
 */
export interface OrganizationV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof OrganizationV30Rc2
     */
    name: string;
    /**
     *
     * @type {OrganizationAddressV30Rc2}
     * @memberof OrganizationV30Rc2
     */
    address: OrganizationAddressV30Rc2;
    /**
     *
     * @type {DisambiguatedOrganizationV30Rc2}
     * @memberof OrganizationV30Rc2
     */
    disambiguatedOrganization?: DisambiguatedOrganizationV30Rc2;
}
/**
 *
 * @export
 * @interface OtherNameV20
 */
export interface OtherNameV20 {
    /**
     *
     * @type {CreatedDateV20}
     * @memberof OtherNameV20
     */
    createdDate?: CreatedDateV20;
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof OtherNameV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {SourceV20}
     * @memberof OtherNameV20
     */
    source?: SourceV20;
    /**
     *
     * @type {string}
     * @memberof OtherNameV20
     */
    content?: string;
    /**
     *
     * @type {string}
     * @memberof OtherNameV20
     */
    visibility?: OtherNameV20VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof OtherNameV20
     */
    path?: string;
    /**
     *
     * @type {number}
     * @memberof OtherNameV20
     */
    putCode?: number;
    /**
     *
     * @type {number}
     * @memberof OtherNameV20
     */
    displayIndex?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum OtherNameV20VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface OtherNameV30
 */
export interface OtherNameV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof OtherNameV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof OtherNameV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof OtherNameV30
     */
    source?: SourceV30;
    /**
     *
     * @type {string}
     * @memberof OtherNameV30
     */
    content?: string;
    /**
     *
     * @type {string}
     * @memberof OtherNameV30
     */
    visibility?: OtherNameV30VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof OtherNameV30
     */
    path?: string;
    /**
     *
     * @type {number}
     * @memberof OtherNameV30
     */
    putCode?: number;
    /**
     *
     * @type {number}
     * @memberof OtherNameV30
     */
    displayIndex?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum OtherNameV30VisibilityEnum {
    Limited = 'limited',
    RegisteredOnly = 'registered-only',
    Public = 'public'
}

/**
 *
 * @export
 * @interface OtherNameV30Rc1
 */
export interface OtherNameV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof OtherNameV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof OtherNameV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof OtherNameV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {string}
     * @memberof OtherNameV30Rc1
     */
    content?: string;
    /**
     *
     * @type {string}
     * @memberof OtherNameV30Rc1
     */
    visibility?: OtherNameV30Rc1VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof OtherNameV30Rc1
     */
    path?: string;
    /**
     *
     * @type {number}
     * @memberof OtherNameV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {number}
     * @memberof OtherNameV30Rc1
     */
    displayIndex?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum OtherNameV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface OtherNameV30Rc2
 */
export interface OtherNameV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof OtherNameV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof OtherNameV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof OtherNameV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {string}
     * @memberof OtherNameV30Rc2
     */
    content?: string;
    /**
     *
     * @type {string}
     * @memberof OtherNameV30Rc2
     */
    visibility?: OtherNameV30Rc2VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof OtherNameV30Rc2
     */
    path?: string;
    /**
     *
     * @type {number}
     * @memberof OtherNameV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {number}
     * @memberof OtherNameV30Rc2
     */
    displayIndex?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum OtherNameV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface OtherNamesV20
 */
export interface OtherNamesV20 {
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof OtherNamesV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {Array<OtherNameV20>}
     * @memberof OtherNamesV20
     */
    otherName?: Array<OtherNameV20>;
    /**
     *
     * @type {string}
     * @memberof OtherNamesV20
     */
    path?: string;
}
/**
 *
 * @export
 * @interface OtherNamesV30
 */
export interface OtherNamesV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof OtherNamesV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {Array<OtherNameV30>}
     * @memberof OtherNamesV30
     */
    otherName?: Array<OtherNameV30>;
    /**
     *
     * @type {string}
     * @memberof OtherNamesV30
     */
    path?: string;
}
/**
 *
 * @export
 * @interface OtherNamesV30Rc1
 */
export interface OtherNamesV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof OtherNamesV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {Array<OtherNameV30Rc1>}
     * @memberof OtherNamesV30Rc1
     */
    otherName?: Array<OtherNameV30Rc1>;
    /**
     *
     * @type {string}
     * @memberof OtherNamesV30Rc1
     */
    path?: string;
}
/**
 *
 * @export
 * @interface OtherNamesV30Rc2
 */
export interface OtherNamesV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof OtherNamesV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {Array<OtherNameV30Rc2>}
     * @memberof OtherNamesV30Rc2
     */
    otherName?: Array<OtherNameV30Rc2>;
    /**
     *
     * @type {string}
     * @memberof OtherNamesV30Rc2
     */
    path?: string;
}
/**
 *
 * @export
 * @interface PeerReviewDuplicateGroupV30
 */
export interface PeerReviewDuplicateGroupV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof PeerReviewDuplicateGroupV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof PeerReviewDuplicateGroupV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {Array<PeerReviewSummaryV30>}
     * @memberof PeerReviewDuplicateGroupV30
     */
    peerReviewSummary?: Array<PeerReviewSummaryV30>;
}
/**
 *
 * @export
 * @interface PeerReviewDuplicateGroupV30Rc1
 */
export interface PeerReviewDuplicateGroupV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof PeerReviewDuplicateGroupV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof PeerReviewDuplicateGroupV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {Array<PeerReviewSummaryV30Rc1>}
     * @memberof PeerReviewDuplicateGroupV30Rc1
     */
    peerReviewSummary?: Array<PeerReviewSummaryV30Rc1>;
}
/**
 *
 * @export
 * @interface PeerReviewDuplicateGroupV30Rc2
 */
export interface PeerReviewDuplicateGroupV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof PeerReviewDuplicateGroupV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof PeerReviewDuplicateGroupV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {Array<PeerReviewSummaryV30Rc2>}
     * @memberof PeerReviewDuplicateGroupV30Rc2
     */
    peerReviewSummary?: Array<PeerReviewSummaryV30Rc2>;
}
/**
 *
 * @export
 * @interface PeerReviewGroupV20
 */
export interface PeerReviewGroupV20 {
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof PeerReviewGroupV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {ExternalIDsV20}
     * @memberof PeerReviewGroupV20
     */
    externalIds?: ExternalIDsV20;
    /**
     *
     * @type {Array<PeerReviewSummaryV20>}
     * @memberof PeerReviewGroupV20
     */
    peerReviewSummary?: Array<PeerReviewSummaryV20>;
}
/**
 *
 * @export
 * @interface PeerReviewGroupV30
 */
export interface PeerReviewGroupV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof PeerReviewGroupV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof PeerReviewGroupV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {Array<PeerReviewDuplicateGroupV30>}
     * @memberof PeerReviewGroupV30
     */
    peerReviewGroup?: Array<PeerReviewDuplicateGroupV30>;
}
/**
 *
 * @export
 * @interface PeerReviewGroupV30Rc1
 */
export interface PeerReviewGroupV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof PeerReviewGroupV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof PeerReviewGroupV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {Array<PeerReviewDuplicateGroupV30Rc1>}
     * @memberof PeerReviewGroupV30Rc1
     */
    peerReviewGroup?: Array<PeerReviewDuplicateGroupV30Rc1>;
}
/**
 *
 * @export
 * @interface PeerReviewGroupV30Rc2
 */
export interface PeerReviewGroupV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof PeerReviewGroupV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof PeerReviewGroupV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {Array<PeerReviewDuplicateGroupV30Rc2>}
     * @memberof PeerReviewGroupV30Rc2
     */
    peerReviewGroup?: Array<PeerReviewDuplicateGroupV30Rc2>;
}
/**
 *
 * @export
 * @interface PeerReviewSummaryV20
 */
export interface PeerReviewSummaryV20 {
    /**
     *
     * @type {CreatedDateV20}
     * @memberof PeerReviewSummaryV20
     */
    createdDate?: CreatedDateV20;
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof PeerReviewSummaryV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {SourceV20}
     * @memberof PeerReviewSummaryV20
     */
    source?: SourceV20;
    /**
     *
     * @type {ExternalIDsV20}
     * @memberof PeerReviewSummaryV20
     */
    externalIds?: ExternalIDsV20;
    /**
     *
     * @type {FuzzyDateV20}
     * @memberof PeerReviewSummaryV20
     */
    completionDate?: FuzzyDateV20;
    /**
     *
     * @type {string}
     * @memberof PeerReviewSummaryV20
     */
    reviewGroupId: string;
    /**
     *
     * @type {OrganizationV20}
     * @memberof PeerReviewSummaryV20
     */
    conveningOrganization: OrganizationV20;
    /**
     *
     * @type {string}
     * @memberof PeerReviewSummaryV20
     */
    visibility?: PeerReviewSummaryV20VisibilityEnum;
    /**
     *
     * @type {number}
     * @memberof PeerReviewSummaryV20
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof PeerReviewSummaryV20
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof PeerReviewSummaryV20
     */
    displayIndex?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PeerReviewSummaryV20VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface PeerReviewSummaryV30
 */
export interface PeerReviewSummaryV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof PeerReviewSummaryV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof PeerReviewSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof PeerReviewSummaryV30
     */
    source?: SourceV30;
    /**
     *
     * @type {string}
     * @memberof PeerReviewSummaryV30
     */
    reviewerRole?: PeerReviewSummaryV30ReviewerRoleEnum;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof PeerReviewSummaryV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {UrlV30}
     * @memberof PeerReviewSummaryV30
     */
    reviewUrl?: UrlV30;
    /**
     *
     * @type {string}
     * @memberof PeerReviewSummaryV30
     */
    reviewType?: PeerReviewSummaryV30ReviewTypeEnum;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof PeerReviewSummaryV30
     */
    completionDate?: FuzzyDateV30;
    /**
     *
     * @type {string}
     * @memberof PeerReviewSummaryV30
     */
    reviewGroupId: string;
    /**
     *
     * @type {OrganizationV30}
     * @memberof PeerReviewSummaryV30
     */
    conveningOrganization?: OrganizationV30;
    /**
     *
     * @type {string}
     * @memberof PeerReviewSummaryV30
     */
    visibility?: PeerReviewSummaryV30VisibilityEnum;
    /**
     *
     * @type {number}
     * @memberof PeerReviewSummaryV30
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof PeerReviewSummaryV30
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof PeerReviewSummaryV30
     */
    displayIndex?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PeerReviewSummaryV30ReviewerRoleEnum {
    Reviewer = 'REVIEWER',
    Editor = 'EDITOR',
    Member = 'MEMBER',
    Chair = 'CHAIR',
    Organizer = 'ORGANIZER'
}
/**
    * @export
    * @enum {string}
    */
export enum PeerReviewSummaryV30ReviewTypeEnum {
    Review = 'REVIEW',
    Evaluation = 'EVALUATION'
}
/**
    * @export
    * @enum {string}
    */
export enum PeerReviewSummaryV30VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface PeerReviewSummaryV30Rc1
 */
export interface PeerReviewSummaryV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof PeerReviewSummaryV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof PeerReviewSummaryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof PeerReviewSummaryV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {string}
     * @memberof PeerReviewSummaryV30Rc1
     */
    reviewerRole?: PeerReviewSummaryV30Rc1ReviewerRoleEnum;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof PeerReviewSummaryV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof PeerReviewSummaryV30Rc1
     */
    reviewUrl?: UrlV30Rc1;
    /**
     *
     * @type {string}
     * @memberof PeerReviewSummaryV30Rc1
     */
    reviewType?: PeerReviewSummaryV30Rc1ReviewTypeEnum;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof PeerReviewSummaryV30Rc1
     */
    completionDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {string}
     * @memberof PeerReviewSummaryV30Rc1
     */
    reviewGroupId: string;
    /**
     *
     * @type {OrganizationV30Rc1}
     * @memberof PeerReviewSummaryV30Rc1
     */
    conveningOrganization: OrganizationV30Rc1;
    /**
     *
     * @type {string}
     * @memberof PeerReviewSummaryV30Rc1
     */
    visibility?: PeerReviewSummaryV30Rc1VisibilityEnum;
    /**
     *
     * @type {number}
     * @memberof PeerReviewSummaryV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof PeerReviewSummaryV30Rc1
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof PeerReviewSummaryV30Rc1
     */
    displayIndex?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PeerReviewSummaryV30Rc1ReviewerRoleEnum {
    Reviewer = 'REVIEWER',
    Editor = 'EDITOR',
    Member = 'MEMBER',
    Chair = 'CHAIR',
    Organizer = 'ORGANIZER'
}
/**
    * @export
    * @enum {string}
    */
export enum PeerReviewSummaryV30Rc1ReviewTypeEnum {
    Review = 'REVIEW',
    Evaluation = 'EVALUATION'
}
/**
    * @export
    * @enum {string}
    */
export enum PeerReviewSummaryV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface PeerReviewSummaryV30Rc2
 */
export interface PeerReviewSummaryV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof PeerReviewSummaryV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof PeerReviewSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof PeerReviewSummaryV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {string}
     * @memberof PeerReviewSummaryV30Rc2
     */
    reviewerRole?: PeerReviewSummaryV30Rc2ReviewerRoleEnum;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof PeerReviewSummaryV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof PeerReviewSummaryV30Rc2
     */
    reviewUrl?: UrlV30Rc2;
    /**
     *
     * @type {string}
     * @memberof PeerReviewSummaryV30Rc2
     */
    reviewType?: PeerReviewSummaryV30Rc2ReviewTypeEnum;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof PeerReviewSummaryV30Rc2
     */
    completionDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {string}
     * @memberof PeerReviewSummaryV30Rc2
     */
    reviewGroupId: string;
    /**
     *
     * @type {OrganizationV30Rc2}
     * @memberof PeerReviewSummaryV30Rc2
     */
    conveningOrganization: OrganizationV30Rc2;
    /**
     *
     * @type {string}
     * @memberof PeerReviewSummaryV30Rc2
     */
    visibility?: PeerReviewSummaryV30Rc2VisibilityEnum;
    /**
     *
     * @type {number}
     * @memberof PeerReviewSummaryV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof PeerReviewSummaryV30Rc2
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof PeerReviewSummaryV30Rc2
     */
    displayIndex?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PeerReviewSummaryV30Rc2ReviewerRoleEnum {
    Reviewer = 'REVIEWER',
    Editor = 'EDITOR',
    Member = 'MEMBER',
    Chair = 'CHAIR',
    Organizer = 'ORGANIZER'
}
/**
    * @export
    * @enum {string}
    */
export enum PeerReviewSummaryV30Rc2ReviewTypeEnum {
    Review = 'REVIEW',
    Evaluation = 'EVALUATION'
}
/**
    * @export
    * @enum {string}
    */
export enum PeerReviewSummaryV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface PeerReviewV20
 */
export interface PeerReviewV20 {
    /**
     *
     * @type {CreatedDateV20}
     * @memberof PeerReviewV20
     */
    createdDate?: CreatedDateV20;
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof PeerReviewV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {SourceV20}
     * @memberof PeerReviewV20
     */
    source?: SourceV20;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV20
     */
    reviewerRole?: PeerReviewV20ReviewerRoleEnum;
    /**
     *
     * @type {ExternalIDsV20}
     * @memberof PeerReviewV20
     */
    reviewIdentifiers?: ExternalIDsV20;
    /**
     *
     * @type {UrlV20}
     * @memberof PeerReviewV20
     */
    reviewUrl?: UrlV20;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV20
     */
    reviewType?: PeerReviewV20ReviewTypeEnum;
    /**
     *
     * @type {FuzzyDateV20}
     * @memberof PeerReviewV20
     */
    reviewCompletionDate?: FuzzyDateV20;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV20
     */
    reviewGroupId: string;
    /**
     *
     * @type {ExternalIDV20}
     * @memberof PeerReviewV20
     */
    subjectExternalIdentifier?: ExternalIDV20;
    /**
     *
     * @type {TitleV20}
     * @memberof PeerReviewV20
     */
    subjectContainerName?: TitleV20;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV20
     */
    subjectType?: PeerReviewV20SubjectTypeEnum;
    /**
     *
     * @type {WorkTitleV20}
     * @memberof PeerReviewV20
     */
    subjectName?: WorkTitleV20;
    /**
     *
     * @type {UrlV20}
     * @memberof PeerReviewV20
     */
    subjectUrl?: UrlV20;
    /**
     *
     * @type {OrganizationV20}
     * @memberof PeerReviewV20
     */
    conveningOrganization: OrganizationV20;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV20
     */
    visibility?: PeerReviewV20VisibilityEnum;
    /**
     *
     * @type {number}
     * @memberof PeerReviewV20
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV20
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PeerReviewV20ReviewerRoleEnum {
    Reviewer = 'REVIEWER',
    Editor = 'EDITOR',
    Member = 'MEMBER',
    Chair = 'CHAIR',
    Organizer = 'ORGANIZER'
}
/**
    * @export
    * @enum {string}
    */
export enum PeerReviewV20ReviewTypeEnum {
    Review = 'REVIEW',
    Evaluation = 'EVALUATION'
}
/**
    * @export
    * @enum {string}
    */
export enum PeerReviewV20SubjectTypeEnum {
    ArtisticPerformance = 'ARTISTIC_PERFORMANCE',
    BookChapter = 'BOOK_CHAPTER',
    BookReview = 'BOOK_REVIEW',
    Book = 'BOOK',
    ConferenceAbstract = 'CONFERENCE_ABSTRACT',
    ConferencePaper = 'CONFERENCE_PAPER',
    ConferencePoster = 'CONFERENCE_POSTER',
    DataSet = 'DATA_SET',
    DictionaryEntry = 'DICTIONARY_ENTRY',
    Disclosure = 'DISCLOSURE',
    Dissertation = 'DISSERTATION',
    EditedBook = 'EDITED_BOOK',
    EncyclopediaEntry = 'ENCYCLOPEDIA_ENTRY',
    Invention = 'INVENTION',
    JournalArticle = 'JOURNAL_ARTICLE',
    JournalIssue = 'JOURNAL_ISSUE',
    LectureSpeech = 'LECTURE_SPEECH',
    License = 'LICENSE',
    MagazineArticle = 'MAGAZINE_ARTICLE',
    Manual = 'MANUAL',
    NewsletterArticle = 'NEWSLETTER_ARTICLE',
    NewspaperArticle = 'NEWSPAPER_ARTICLE',
    OnlineResource = 'ONLINE_RESOURCE',
    Other = 'OTHER',
    Patent = 'PATENT',
    RegisteredCopyright = 'REGISTERED_COPYRIGHT',
    Report = 'REPORT',
    ResearchTechnique = 'RESEARCH_TECHNIQUE',
    ResearchTool = 'RESEARCH_TOOL',
    SpinOffCompany = 'SPIN_OFF_COMPANY',
    StandardsAndPolicy = 'STANDARDS_AND_POLICY',
    SupervisedStudentPublication = 'SUPERVISED_STUDENT_PUBLICATION',
    TechnicalStandard = 'TECHNICAL_STANDARD',
    Test = 'TEST',
    Trademark = 'TRADEMARK',
    Translation = 'TRANSLATION',
    Website = 'WEBSITE',
    WorkingPaper = 'WORKING_PAPER',
    Undefined = 'UNDEFINED'
}
/**
    * @export
    * @enum {string}
    */
export enum PeerReviewV20VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface PeerReviewV30
 */
export interface PeerReviewV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof PeerReviewV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof PeerReviewV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof PeerReviewV30
     */
    source?: SourceV30;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV30
     */
    reviewerRole?: PeerReviewV30ReviewerRoleEnum;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof PeerReviewV30
     */
    reviewIdentifiers?: ExternalIDsV30;
    /**
     *
     * @type {UrlV30}
     * @memberof PeerReviewV30
     */
    reviewUrl?: UrlV30;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV30
     */
    reviewType?: PeerReviewV30ReviewTypeEnum;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof PeerReviewV30
     */
    reviewCompletionDate?: FuzzyDateV30;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV30
     */
    reviewGroupId: string;
    /**
     *
     * @type {ExternalIDV30}
     * @memberof PeerReviewV30
     */
    subjectExternalIdentifier?: ExternalIDV30;
    /**
     *
     * @type {TitleV30}
     * @memberof PeerReviewV30
     */
    subjectContainerName?: TitleV30;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV30
     */
    subjectType?: PeerReviewV30SubjectTypeEnum;
    /**
     *
     * @type {SubjectNameV30}
     * @memberof PeerReviewV30
     */
    subjectName?: SubjectNameV30;
    /**
     *
     * @type {UrlV30}
     * @memberof PeerReviewV30
     */
    subjectUrl?: UrlV30;
    /**
     *
     * @type {OrganizationV30}
     * @memberof PeerReviewV30
     */
    conveningOrganization?: OrganizationV30;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV30
     */
    visibility?: PeerReviewV30VisibilityEnum;
    /**
     *
     * @type {number}
     * @memberof PeerReviewV30
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV30
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PeerReviewV30ReviewerRoleEnum {
    Reviewer = 'reviewer',
    Editor = 'editor',
    Member = 'member',
    Chair = 'chair',
    Organizer = 'organizer'
}
/**
    * @export
    * @enum {string}
    */
export enum PeerReviewV30ReviewTypeEnum {
    Review = 'review',
    Evaluation = 'evaluation'
}
/**
    * @export
    * @enum {string}
    */
export enum PeerReviewV30SubjectTypeEnum {
    ArtisticPerformance = 'artistic-performance',
    BookChapter = 'book-chapter',
    BookReview = 'book-review',
    Book = 'book',
    ConferenceAbstract = 'conference-abstract',
    ConferencePaper = 'conference-paper',
    ConferencePoster = 'conference-poster',
    DataSet = 'data-set',
    DictionaryEntry = 'dictionary-entry',
    Disclosure = 'disclosure',
    DissertationThesis = 'dissertation-thesis',
    EditedBook = 'edited-book',
    EncyclopediaEntry = 'encyclopedia-entry',
    Invention = 'invention',
    JournalArticle = 'journal-article',
    JournalIssue = 'journal-issue',
    LectureSpeech = 'lecture-speech',
    License = 'license',
    MagazineArticle = 'magazine-article',
    Manual = 'manual',
    NewsletterArticle = 'newsletter-article',
    NewspaperArticle = 'newspaper-article',
    OnlineResource = 'online-resource',
    Other = 'other',
    Patent = 'patent',
    RegisteredCopyright = 'registered-copyright',
    Report = 'report',
    ResearchTechnique = 'research-technique',
    ResearchTool = 'research-tool',
    Software = 'software',
    SpinOffCompany = 'spin-off-company',
    StandardsAndPolicy = 'standards-and-policy',
    SupervisedStudentPublication = 'supervised-student-publication',
    TechnicalStandard = 'technical-standard',
    Test = 'test',
    Trademark = 'trademark',
    Translation = 'translation',
    Website = 'website',
    WorkingPaper = 'working-paper',
    Grant = 'grant',
    Contract = 'contract',
    Award = 'award',
    SalaryAward = 'salary-award',
    ResearchResourceProposal = 'research-resource-proposal',
    Undefined = 'undefined'
}
/**
    * @export
    * @enum {string}
    */
export enum PeerReviewV30VisibilityEnum {
    Limited = 'limited',
    RegisteredOnly = 'registered-only',
    Public = 'public'
}

/**
 *
 * @export
 * @interface PeerReviewV30Rc1
 */
export interface PeerReviewV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof PeerReviewV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof PeerReviewV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof PeerReviewV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV30Rc1
     */
    reviewerRole?: PeerReviewV30Rc1ReviewerRoleEnum;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof PeerReviewV30Rc1
     */
    reviewIdentifiers?: ExternalIDsV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof PeerReviewV30Rc1
     */
    reviewUrl?: UrlV30Rc1;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV30Rc1
     */
    reviewType?: PeerReviewV30Rc1ReviewTypeEnum;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof PeerReviewV30Rc1
     */
    reviewCompletionDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV30Rc1
     */
    reviewGroupId: string;
    /**
     *
     * @type {ExternalIDV30Rc1}
     * @memberof PeerReviewV30Rc1
     */
    subjectExternalIdentifier?: ExternalIDV30Rc1;
    /**
     *
     * @type {TitleV30Rc1}
     * @memberof PeerReviewV30Rc1
     */
    subjectContainerName?: TitleV30Rc1;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV30Rc1
     */
    subjectType?: PeerReviewV30Rc1SubjectTypeEnum;
    /**
     *
     * @type {WorkTitleV30Rc1}
     * @memberof PeerReviewV30Rc1
     */
    subjectName?: WorkTitleV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof PeerReviewV30Rc1
     */
    subjectUrl?: UrlV30Rc1;
    /**
     *
     * @type {OrganizationV30Rc1}
     * @memberof PeerReviewV30Rc1
     */
    conveningOrganization: OrganizationV30Rc1;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV30Rc1
     */
    visibility?: PeerReviewV30Rc1VisibilityEnum;
    /**
     *
     * @type {number}
     * @memberof PeerReviewV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV30Rc1
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PeerReviewV30Rc1ReviewerRoleEnum {
    Reviewer = 'REVIEWER',
    Editor = 'EDITOR',
    Member = 'MEMBER',
    Chair = 'CHAIR',
    Organizer = 'ORGANIZER'
}
/**
    * @export
    * @enum {string}
    */
export enum PeerReviewV30Rc1ReviewTypeEnum {
    Review = 'REVIEW',
    Evaluation = 'EVALUATION'
}
/**
    * @export
    * @enum {string}
    */
export enum PeerReviewV30Rc1SubjectTypeEnum {
    ArtisticPerformance = 'ARTISTIC_PERFORMANCE',
    BookChapter = 'BOOK_CHAPTER',
    BookReview = 'BOOK_REVIEW',
    Book = 'BOOK',
    ConferenceAbstract = 'CONFERENCE_ABSTRACT',
    ConferencePaper = 'CONFERENCE_PAPER',
    ConferencePoster = 'CONFERENCE_POSTER',
    DataSet = 'DATA_SET',
    DictionaryEntry = 'DICTIONARY_ENTRY',
    Disclosure = 'DISCLOSURE',
    Dissertation = 'DISSERTATION',
    EditedBook = 'EDITED_BOOK',
    EncyclopediaEntry = 'ENCYCLOPEDIA_ENTRY',
    Invention = 'INVENTION',
    JournalArticle = 'JOURNAL_ARTICLE',
    JournalIssue = 'JOURNAL_ISSUE',
    LectureSpeech = 'LECTURE_SPEECH',
    License = 'LICENSE',
    MagazineArticle = 'MAGAZINE_ARTICLE',
    Manual = 'MANUAL',
    NewsletterArticle = 'NEWSLETTER_ARTICLE',
    NewspaperArticle = 'NEWSPAPER_ARTICLE',
    OnlineResource = 'ONLINE_RESOURCE',
    Other = 'OTHER',
    Patent = 'PATENT',
    RegisteredCopyright = 'REGISTERED_COPYRIGHT',
    Report = 'REPORT',
    ResearchTechnique = 'RESEARCH_TECHNIQUE',
    ResearchTool = 'RESEARCH_TOOL',
    Software = 'SOFTWARE',
    SpinOffCompany = 'SPIN_OFF_COMPANY',
    StandardsAndPolicy = 'STANDARDS_AND_POLICY',
    SupervisedStudentPublication = 'SUPERVISED_STUDENT_PUBLICATION',
    TechnicalStandard = 'TECHNICAL_STANDARD',
    Test = 'TEST',
    Trademark = 'TRADEMARK',
    Translation = 'TRANSLATION',
    Website = 'WEBSITE',
    WorkingPaper = 'WORKING_PAPER',
    Grant = 'GRANT',
    Contract = 'CONTRACT',
    Award = 'AWARD',
    SalaryAward = 'SALARY_AWARD',
    ResearchResourceProposal = 'RESEARCH_RESOURCE_PROPOSAL',
    Undefined = 'UNDEFINED'
}
/**
    * @export
    * @enum {string}
    */
export enum PeerReviewV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface PeerReviewV30Rc2
 */
export interface PeerReviewV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof PeerReviewV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof PeerReviewV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof PeerReviewV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV30Rc2
     */
    reviewerRole?: PeerReviewV30Rc2ReviewerRoleEnum;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof PeerReviewV30Rc2
     */
    reviewIdentifiers?: ExternalIDsV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof PeerReviewV30Rc2
     */
    reviewUrl?: UrlV30Rc2;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV30Rc2
     */
    reviewType?: PeerReviewV30Rc2ReviewTypeEnum;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof PeerReviewV30Rc2
     */
    reviewCompletionDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV30Rc2
     */
    reviewGroupId: string;
    /**
     *
     * @type {ExternalIDV30Rc2}
     * @memberof PeerReviewV30Rc2
     */
    subjectExternalIdentifier?: ExternalIDV30Rc2;
    /**
     *
     * @type {TitleV30Rc2}
     * @memberof PeerReviewV30Rc2
     */
    subjectContainerName?: TitleV30Rc2;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV30Rc2
     */
    subjectType?: PeerReviewV30Rc2SubjectTypeEnum;
    /**
     *
     * @type {SubjectNameV30Rc2}
     * @memberof PeerReviewV30Rc2
     */
    subjectName?: SubjectNameV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof PeerReviewV30Rc2
     */
    subjectUrl?: UrlV30Rc2;
    /**
     *
     * @type {OrganizationV30Rc2}
     * @memberof PeerReviewV30Rc2
     */
    conveningOrganization: OrganizationV30Rc2;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV30Rc2
     */
    visibility?: PeerReviewV30Rc2VisibilityEnum;
    /**
     *
     * @type {number}
     * @memberof PeerReviewV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof PeerReviewV30Rc2
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum PeerReviewV30Rc2ReviewerRoleEnum {
    Reviewer = 'REVIEWER',
    Editor = 'EDITOR',
    Member = 'MEMBER',
    Chair = 'CHAIR',
    Organizer = 'ORGANIZER'
}
/**
    * @export
    * @enum {string}
    */
export enum PeerReviewV30Rc2ReviewTypeEnum {
    Review = 'REVIEW',
    Evaluation = 'EVALUATION'
}
/**
    * @export
    * @enum {string}
    */
export enum PeerReviewV30Rc2SubjectTypeEnum {
    ArtisticPerformance = 'ARTISTIC_PERFORMANCE',
    BookChapter = 'BOOK_CHAPTER',
    BookReview = 'BOOK_REVIEW',
    Book = 'BOOK',
    ConferenceAbstract = 'CONFERENCE_ABSTRACT',
    ConferencePaper = 'CONFERENCE_PAPER',
    ConferencePoster = 'CONFERENCE_POSTER',
    DataSet = 'DATA_SET',
    DictionaryEntry = 'DICTIONARY_ENTRY',
    Disclosure = 'DISCLOSURE',
    DissertationThesis = 'DISSERTATION_THESIS',
    EditedBook = 'EDITED_BOOK',
    EncyclopediaEntry = 'ENCYCLOPEDIA_ENTRY',
    Invention = 'INVENTION',
    JournalArticle = 'JOURNAL_ARTICLE',
    JournalIssue = 'JOURNAL_ISSUE',
    LectureSpeech = 'LECTURE_SPEECH',
    License = 'LICENSE',
    MagazineArticle = 'MAGAZINE_ARTICLE',
    Manual = 'MANUAL',
    NewsletterArticle = 'NEWSLETTER_ARTICLE',
    NewspaperArticle = 'NEWSPAPER_ARTICLE',
    OnlineResource = 'ONLINE_RESOURCE',
    Other = 'OTHER',
    Patent = 'PATENT',
    RegisteredCopyright = 'REGISTERED_COPYRIGHT',
    Report = 'REPORT',
    ResearchTechnique = 'RESEARCH_TECHNIQUE',
    ResearchTool = 'RESEARCH_TOOL',
    Software = 'SOFTWARE',
    SpinOffCompany = 'SPIN_OFF_COMPANY',
    StandardsAndPolicy = 'STANDARDS_AND_POLICY',
    SupervisedStudentPublication = 'SUPERVISED_STUDENT_PUBLICATION',
    TechnicalStandard = 'TECHNICAL_STANDARD',
    Test = 'TEST',
    Trademark = 'TRADEMARK',
    Translation = 'TRANSLATION',
    Website = 'WEBSITE',
    WorkingPaper = 'WORKING_PAPER',
    Grant = 'GRANT',
    Contract = 'CONTRACT',
    Award = 'AWARD',
    SalaryAward = 'SALARY_AWARD',
    ResearchResourceProposal = 'RESEARCH_RESOURCE_PROPOSAL',
    Undefined = 'UNDEFINED'
}
/**
    * @export
    * @enum {string}
    */
export enum PeerReviewV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface PeerReviewsV20
 */
export interface PeerReviewsV20 {
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof PeerReviewsV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {Array<PeerReviewGroupV20>}
     * @memberof PeerReviewsV20
     */
    group?: Array<PeerReviewGroupV20>;
    /**
     *
     * @type {string}
     * @memberof PeerReviewsV20
     */
    path?: string;
}
/**
 *
 * @export
 * @interface PeerReviewsV30
 */
export interface PeerReviewsV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof PeerReviewsV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {Array<PeerReviewGroupV30>}
     * @memberof PeerReviewsV30
     */
    group?: Array<PeerReviewGroupV30>;
    /**
     *
     * @type {string}
     * @memberof PeerReviewsV30
     */
    path?: string;
}
/**
 *
 * @export
 * @interface PeerReviewsV30Rc1
 */
export interface PeerReviewsV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof PeerReviewsV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {Array<PeerReviewGroupV30Rc1>}
     * @memberof PeerReviewsV30Rc1
     */
    group?: Array<PeerReviewGroupV30Rc1>;
    /**
     *
     * @type {string}
     * @memberof PeerReviewsV30Rc1
     */
    path?: string;
}
/**
 *
 * @export
 * @interface PeerReviewsV30Rc2
 */
export interface PeerReviewsV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof PeerReviewsV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {Array<PeerReviewGroupV30Rc2>}
     * @memberof PeerReviewsV30Rc2
     */
    group?: Array<PeerReviewGroupV30Rc2>;
    /**
     *
     * @type {string}
     * @memberof PeerReviewsV30Rc2
     */
    path?: string;
}
/**
 *
 * @export
 * @interface PersonExternalIdentifierV20
 */
export interface PersonExternalIdentifierV20 {
    /**
     *
     * @type {CreatedDateV20}
     * @memberof PersonExternalIdentifierV20
     */
    createdDate?: CreatedDateV20;
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof PersonExternalIdentifierV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {SourceV20}
     * @memberof PersonExternalIdentifierV20
     */
    source?: SourceV20;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifierV20
     */
    externalIdType: string;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifierV20
     */
    externalIdValue: string;
    /**
     *
     * @type {UrlV20}
     * @memberof PersonExternalIdentifierV20
     */
    externalIdUrl?: UrlV20;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifierV20
     */
    externalIdRelationship?: PersonExternalIdentifierV20ExternalIdRelationshipEnum;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifierV20
     */
    visibility?: PersonExternalIdentifierV20VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifierV20
     */
    path?: string;
    /**
     *
     * @type {number}
     * @memberof PersonExternalIdentifierV20
     */
    putCode?: number;
    /**
     *
     * @type {number}
     * @memberof PersonExternalIdentifierV20
     */
    displayIndex?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum PersonExternalIdentifierV20ExternalIdRelationshipEnum {
    PartOf = 'PART_OF',
    Self = 'SELF'
}
/**
    * @export
    * @enum {string}
    */
export enum PersonExternalIdentifierV20VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface PersonExternalIdentifierV30
 */
export interface PersonExternalIdentifierV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof PersonExternalIdentifierV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof PersonExternalIdentifierV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof PersonExternalIdentifierV30
     */
    source?: SourceV30;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifierV30
     */
    externalIdType: string;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifierV30
     */
    externalIdValue: string;
    /**
     *
     * @type {UrlV30}
     * @memberof PersonExternalIdentifierV30
     */
    externalIdUrl?: UrlV30;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifierV30
     */
    externalIdRelationship?: PersonExternalIdentifierV30ExternalIdRelationshipEnum;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifierV30
     */
    visibility?: PersonExternalIdentifierV30VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifierV30
     */
    path?: string;
    /**
     *
     * @type {number}
     * @memberof PersonExternalIdentifierV30
     */
    putCode?: number;
    /**
     *
     * @type {number}
     * @memberof PersonExternalIdentifierV30
     */
    displayIndex?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum PersonExternalIdentifierV30ExternalIdRelationshipEnum {
    PartOf = 'part-of',
    Self = 'self',
    VersionOf = 'version-of'
}
/**
    * @export
    * @enum {string}
    */
export enum PersonExternalIdentifierV30VisibilityEnum {
    Limited = 'limited',
    RegisteredOnly = 'registered-only',
    Public = 'public'
}

/**
 *
 * @export
 * @interface PersonExternalIdentifierV30Rc1
 */
export interface PersonExternalIdentifierV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof PersonExternalIdentifierV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof PersonExternalIdentifierV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof PersonExternalIdentifierV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifierV30Rc1
     */
    externalIdType: string;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifierV30Rc1
     */
    externalIdValue: string;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof PersonExternalIdentifierV30Rc1
     */
    externalIdUrl?: UrlV30Rc1;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifierV30Rc1
     */
    externalIdRelationship?: PersonExternalIdentifierV30Rc1ExternalIdRelationshipEnum;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifierV30Rc1
     */
    visibility?: PersonExternalIdentifierV30Rc1VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifierV30Rc1
     */
    path?: string;
    /**
     *
     * @type {number}
     * @memberof PersonExternalIdentifierV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {number}
     * @memberof PersonExternalIdentifierV30Rc1
     */
    displayIndex?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum PersonExternalIdentifierV30Rc1ExternalIdRelationshipEnum {
    PartOf = 'PART_OF',
    Self = 'SELF'
}
/**
    * @export
    * @enum {string}
    */
export enum PersonExternalIdentifierV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface PersonExternalIdentifierV30Rc2
 */
export interface PersonExternalIdentifierV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof PersonExternalIdentifierV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof PersonExternalIdentifierV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof PersonExternalIdentifierV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifierV30Rc2
     */
    externalIdType: string;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifierV30Rc2
     */
    externalIdValue: string;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof PersonExternalIdentifierV30Rc2
     */
    externalIdUrl?: UrlV30Rc2;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifierV30Rc2
     */
    externalIdRelationship?: PersonExternalIdentifierV30Rc2ExternalIdRelationshipEnum;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifierV30Rc2
     */
    visibility?: PersonExternalIdentifierV30Rc2VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifierV30Rc2
     */
    path?: string;
    /**
     *
     * @type {number}
     * @memberof PersonExternalIdentifierV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {number}
     * @memberof PersonExternalIdentifierV30Rc2
     */
    displayIndex?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum PersonExternalIdentifierV30Rc2ExternalIdRelationshipEnum {
    PartOf = 'PART_OF',
    Self = 'SELF',
    VersionOf = 'VERSION_OF'
}
/**
    * @export
    * @enum {string}
    */
export enum PersonExternalIdentifierV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface PersonExternalIdentifiersV20
 */
export interface PersonExternalIdentifiersV20 {
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof PersonExternalIdentifiersV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {Array<PersonExternalIdentifierV20>}
     * @memberof PersonExternalIdentifiersV20
     */
    externalIdentifier?: Array<PersonExternalIdentifierV20>;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifiersV20
     */
    path?: string;
}
/**
 *
 * @export
 * @interface PersonExternalIdentifiersV30
 */
export interface PersonExternalIdentifiersV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof PersonExternalIdentifiersV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {Array<PersonExternalIdentifierV30>}
     * @memberof PersonExternalIdentifiersV30
     */
    externalIdentifier?: Array<PersonExternalIdentifierV30>;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifiersV30
     */
    path?: string;
}
/**
 *
 * @export
 * @interface PersonExternalIdentifiersV30Rc1
 */
export interface PersonExternalIdentifiersV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof PersonExternalIdentifiersV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {Array<PersonExternalIdentifierV30Rc1>}
     * @memberof PersonExternalIdentifiersV30Rc1
     */
    externalIdentifier?: Array<PersonExternalIdentifierV30Rc1>;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifiersV30Rc1
     */
    path?: string;
}
/**
 *
 * @export
 * @interface PersonExternalIdentifiersV30Rc2
 */
export interface PersonExternalIdentifiersV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof PersonExternalIdentifiersV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {Array<PersonExternalIdentifierV30Rc2>}
     * @memberof PersonExternalIdentifiersV30Rc2
     */
    externalIdentifier?: Array<PersonExternalIdentifierV30Rc2>;
    /**
     *
     * @type {string}
     * @memberof PersonExternalIdentifiersV30Rc2
     */
    path?: string;
}
/**
 *
 * @export
 * @interface PersonV20
 */
export interface PersonV20 {
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof PersonV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {NameV20}
     * @memberof PersonV20
     */
    name?: NameV20;
    /**
     *
     * @type {OtherNamesV20}
     * @memberof PersonV20
     */
    otherNames?: OtherNamesV20;
    /**
     *
     * @type {BiographyV20}
     * @memberof PersonV20
     */
    biography?: BiographyV20;
    /**
     *
     * @type {ResearcherUrlsV20}
     * @memberof PersonV20
     */
    researcherUrls?: ResearcherUrlsV20;
    /**
     *
     * @type {EmailsV20}
     * @memberof PersonV20
     */
    emails?: EmailsV20;
    /**
     *
     * @type {AddressesV20}
     * @memberof PersonV20
     */
    addresses?: AddressesV20;
    /**
     *
     * @type {KeywordsV20}
     * @memberof PersonV20
     */
    keywords?: KeywordsV20;
    /**
     *
     * @type {PersonExternalIdentifiersV20}
     * @memberof PersonV20
     */
    externalIdentifiers?: PersonExternalIdentifiersV20;
    /**
     *
     * @type {string}
     * @memberof PersonV20
     */
    path?: string;
}
/**
 *
 * @export
 * @interface PersonV30
 */
export interface PersonV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof PersonV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {NameV30}
     * @memberof PersonV30
     */
    name?: NameV30;
    /**
     *
     * @type {OtherNamesV30}
     * @memberof PersonV30
     */
    otherNames?: OtherNamesV30;
    /**
     *
     * @type {BiographyV30}
     * @memberof PersonV30
     */
    biography?: BiographyV30;
    /**
     *
     * @type {ResearcherUrlsV30}
     * @memberof PersonV30
     */
    researcherUrls?: ResearcherUrlsV30;
    /**
     *
     * @type {EmailsV30}
     * @memberof PersonV30
     */
    emails?: EmailsV30;
    /**
     *
     * @type {AddressesV30}
     * @memberof PersonV30
     */
    addresses?: AddressesV30;
    /**
     *
     * @type {KeywordsV30}
     * @memberof PersonV30
     */
    keywords?: KeywordsV30;
    /**
     *
     * @type {PersonExternalIdentifiersV30}
     * @memberof PersonV30
     */
    externalIdentifiers?: PersonExternalIdentifiersV30;
    /**
     *
     * @type {string}
     * @memberof PersonV30
     */
    path?: string;
}
/**
 *
 * @export
 * @interface PersonV30Rc1
 */
export interface PersonV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof PersonV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {NameV30Rc1}
     * @memberof PersonV30Rc1
     */
    name?: NameV30Rc1;
    /**
     *
     * @type {OtherNamesV30Rc1}
     * @memberof PersonV30Rc1
     */
    otherNames?: OtherNamesV30Rc1;
    /**
     *
     * @type {BiographyV30Rc1}
     * @memberof PersonV30Rc1
     */
    biography?: BiographyV30Rc1;
    /**
     *
     * @type {ResearcherUrlsV30Rc1}
     * @memberof PersonV30Rc1
     */
    researcherUrls?: ResearcherUrlsV30Rc1;
    /**
     *
     * @type {EmailsV30Rc1}
     * @memberof PersonV30Rc1
     */
    emails?: EmailsV30Rc1;
    /**
     *
     * @type {AddressesV30Rc1}
     * @memberof PersonV30Rc1
     */
    addresses?: AddressesV30Rc1;
    /**
     *
     * @type {KeywordsV30Rc1}
     * @memberof PersonV30Rc1
     */
    keywords?: KeywordsV30Rc1;
    /**
     *
     * @type {PersonExternalIdentifiersV30Rc1}
     * @memberof PersonV30Rc1
     */
    externalIdentifiers?: PersonExternalIdentifiersV30Rc1;
    /**
     *
     * @type {string}
     * @memberof PersonV30Rc1
     */
    path?: string;
}
/**
 *
 * @export
 * @interface PersonV30Rc2
 */
export interface PersonV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof PersonV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {NameV30Rc2}
     * @memberof PersonV30Rc2
     */
    name?: NameV30Rc2;
    /**
     *
     * @type {OtherNamesV30Rc2}
     * @memberof PersonV30Rc2
     */
    otherNames?: OtherNamesV30Rc2;
    /**
     *
     * @type {BiographyV30Rc2}
     * @memberof PersonV30Rc2
     */
    biography?: BiographyV30Rc2;
    /**
     *
     * @type {ResearcherUrlsV30Rc2}
     * @memberof PersonV30Rc2
     */
    researcherUrls?: ResearcherUrlsV30Rc2;
    /**
     *
     * @type {EmailsV30Rc2}
     * @memberof PersonV30Rc2
     */
    emails?: EmailsV30Rc2;
    /**
     *
     * @type {AddressesV30Rc2}
     * @memberof PersonV30Rc2
     */
    addresses?: AddressesV30Rc2;
    /**
     *
     * @type {KeywordsV30Rc2}
     * @memberof PersonV30Rc2
     */
    keywords?: KeywordsV30Rc2;
    /**
     *
     * @type {PersonExternalIdentifiersV30Rc2}
     * @memberof PersonV30Rc2
     */
    externalIdentifiers?: PersonExternalIdentifiersV30Rc2;
    /**
     *
     * @type {string}
     * @memberof PersonV30Rc2
     */
    path?: string;
}
/**
 *
 * @export
 * @interface PersonalDetailsV20
 */
export interface PersonalDetailsV20 {
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof PersonalDetailsV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {NameV20}
     * @memberof PersonalDetailsV20
     */
    name?: NameV20;
    /**
     *
     * @type {OtherNamesV20}
     * @memberof PersonalDetailsV20
     */
    otherNames?: OtherNamesV20;
    /**
     *
     * @type {BiographyV20}
     * @memberof PersonalDetailsV20
     */
    biography?: BiographyV20;
    /**
     *
     * @type {string}
     * @memberof PersonalDetailsV20
     */
    path?: string;
}
/**
 *
 * @export
 * @interface PreferencesV20
 */
export interface PreferencesV20 {
    /**
     *
     * @type {string}
     * @memberof PreferencesV20
     */
    locale?: PreferencesV20LocaleEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PreferencesV20LocaleEnum {
    Ar = 'AR',
    En = 'EN',
    Es = 'ES',
    Fr = 'FR',
    Ko = 'KO',
    Pt = 'PT',
    Ru = 'RU',
    ZhCn = 'ZH_CN',
    ZhTw = 'ZH_TW',
    It = 'IT',
    Ja = 'JA',
    Xx = 'XX'
}

/**
 *
 * @export
 * @interface PreferencesV30
 */
export interface PreferencesV30 {
    /**
     *
     * @type {string}
     * @memberof PreferencesV30
     */
    locale?: PreferencesV30LocaleEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PreferencesV30LocaleEnum {
    Ar = 'AR',
    Cs = 'CS',
    De = 'DE',
    En = 'EN',
    Es = 'ES',
    Fr = 'FR',
    It = 'IT',
    Ja = 'JA',
    Ko = 'KO',
    Pt = 'PT',
    Ru = 'RU',
    ZhCn = 'ZH_CN',
    ZhTw = 'ZH_TW',
    Xx = 'XX'
}

/**
 *
 * @export
 * @interface PreferencesV30Rc1
 */
export interface PreferencesV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof PreferencesV30Rc1
     */
    locale?: PreferencesV30Rc1LocaleEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PreferencesV30Rc1LocaleEnum {
    Ar = 'AR',
    Cs = 'CS',
    De = 'DE',
    En = 'EN',
    Es = 'ES',
    Fr = 'FR',
    It = 'IT',
    Ja = 'JA',
    Ko = 'KO',
    Pt = 'PT',
    Ru = 'RU',
    ZhCn = 'ZH_CN',
    ZhTw = 'ZH_TW',
    Xx = 'XX'
}

/**
 *
 * @export
 * @interface PreferencesV30Rc2
 */
export interface PreferencesV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof PreferencesV30Rc2
     */
    locale?: PreferencesV30Rc2LocaleEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PreferencesV30Rc2LocaleEnum {
    Ar = 'AR',
    Cs = 'CS',
    De = 'DE',
    En = 'EN',
    Es = 'ES',
    Fr = 'FR',
    It = 'IT',
    Ja = 'JA',
    Ko = 'KO',
    Pt = 'PT',
    Ru = 'RU',
    ZhCn = 'ZH_CN',
    ZhTw = 'ZH_TW',
    Xx = 'XX'
}

/**
 *
 * @export
 * @interface PublicationDateV20
 */
export interface PublicationDateV20 {
    /**
     *
     * @type {YearV20}
     * @memberof PublicationDateV20
     */
    year: YearV20;
    /**
     *
     * @type {MonthV20}
     * @memberof PublicationDateV20
     */
    month?: MonthV20;
    /**
     *
     * @type {DayV20}
     * @memberof PublicationDateV20
     */
    day?: DayV20;
    /**
     *
     * @type {string}
     * @memberof PublicationDateV20
     */
    mediaType?: PublicationDateV20MediaTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PublicationDateV20MediaTypeEnum {
    Print = 'PRINT',
    Online = 'ONLINE',
    Other = 'OTHER'
}

/**
 *
 * @export
 * @interface PublicationDateV30
 */
export interface PublicationDateV30 {
    /**
     *
     * @type {YearV30}
     * @memberof PublicationDateV30
     */
    year: YearV30;
    /**
     *
     * @type {MonthV30}
     * @memberof PublicationDateV30
     */
    month?: MonthV30;
    /**
     *
     * @type {DayV30}
     * @memberof PublicationDateV30
     */
    day?: DayV30;
}
/**
 *
 * @export
 * @interface PublicationDateV30Rc1
 */
export interface PublicationDateV30Rc1 {
    /**
     *
     * @type {YearV30Rc1}
     * @memberof PublicationDateV30Rc1
     */
    year: YearV30Rc1;
    /**
     *
     * @type {MonthV30Rc1}
     * @memberof PublicationDateV30Rc1
     */
    month?: MonthV30Rc1;
    /**
     *
     * @type {DayV30Rc1}
     * @memberof PublicationDateV30Rc1
     */
    day?: DayV30Rc1;
    /**
     *
     * @type {string}
     * @memberof PublicationDateV30Rc1
     */
    mediaType?: PublicationDateV30Rc1MediaTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PublicationDateV30Rc1MediaTypeEnum {
    Print = 'PRINT',
    Online = 'ONLINE',
    Other = 'OTHER'
}

/**
 *
 * @export
 * @interface PublicationDateV30Rc2
 */
export interface PublicationDateV30Rc2 {
    /**
     *
     * @type {YearV30Rc2}
     * @memberof PublicationDateV30Rc2
     */
    year: YearV30Rc2;
    /**
     *
     * @type {MonthV30Rc2}
     * @memberof PublicationDateV30Rc2
     */
    month?: MonthV30Rc2;
    /**
     *
     * @type {DayV30Rc2}
     * @memberof PublicationDateV30Rc2
     */
    day?: DayV30Rc2;
}
/**
 *
 * @export
 * @interface QualificationSummaryV30
 */
export interface QualificationSummaryV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof QualificationSummaryV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof QualificationSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof QualificationSummaryV30
     */
    source?: SourceV30;
    /**
     *
     * @type {number}
     * @memberof QualificationSummaryV30
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof QualificationSummaryV30
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof QualificationSummaryV30
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof QualificationSummaryV30
     */
    startDate?: FuzzyDateV30;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof QualificationSummaryV30
     */
    endDate?: FuzzyDateV30;
    /**
     *
     * @type {OrganizationV30}
     * @memberof QualificationSummaryV30
     */
    organization?: OrganizationV30;
    /**
     *
     * @type {UrlV30}
     * @memberof QualificationSummaryV30
     */
    url?: UrlV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof QualificationSummaryV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {string}
     * @memberof QualificationSummaryV30
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof QualificationSummaryV30
     */
    visibility?: QualificationSummaryV30VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof QualificationSummaryV30
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum QualificationSummaryV30VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface QualificationSummaryV30Rc1
 */
export interface QualificationSummaryV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof QualificationSummaryV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof QualificationSummaryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof QualificationSummaryV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {number}
     * @memberof QualificationSummaryV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof QualificationSummaryV30Rc1
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof QualificationSummaryV30Rc1
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof QualificationSummaryV30Rc1
     */
    startDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof QualificationSummaryV30Rc1
     */
    endDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {OrganizationV30Rc1}
     * @memberof QualificationSummaryV30Rc1
     */
    organization?: OrganizationV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof QualificationSummaryV30Rc1
     */
    url?: UrlV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof QualificationSummaryV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {string}
     * @memberof QualificationSummaryV30Rc1
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof QualificationSummaryV30Rc1
     */
    visibility?: QualificationSummaryV30Rc1VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof QualificationSummaryV30Rc1
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum QualificationSummaryV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface QualificationSummaryV30Rc2
 */
export interface QualificationSummaryV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof QualificationSummaryV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof QualificationSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof QualificationSummaryV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {number}
     * @memberof QualificationSummaryV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof QualificationSummaryV30Rc2
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof QualificationSummaryV30Rc2
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof QualificationSummaryV30Rc2
     */
    startDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof QualificationSummaryV30Rc2
     */
    endDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {OrganizationV30Rc2}
     * @memberof QualificationSummaryV30Rc2
     */
    organization?: OrganizationV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof QualificationSummaryV30Rc2
     */
    url?: UrlV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof QualificationSummaryV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {string}
     * @memberof QualificationSummaryV30Rc2
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof QualificationSummaryV30Rc2
     */
    visibility?: QualificationSummaryV30Rc2VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof QualificationSummaryV30Rc2
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum QualificationSummaryV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface QualificationV30
 */
export interface QualificationV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof QualificationV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof QualificationV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof QualificationV30
     */
    source?: SourceV30;
    /**
     *
     * @type {number}
     * @memberof QualificationV30
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof QualificationV30
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof QualificationV30
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof QualificationV30
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof QualificationV30
     */
    startDate: FuzzyDateV30;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof QualificationV30
     */
    endDate?: FuzzyDateV30;
    /**
     *
     * @type {OrganizationV30}
     * @memberof QualificationV30
     */
    organization: OrganizationV30;
    /**
     *
     * @type {UrlV30}
     * @memberof QualificationV30
     */
    url?: UrlV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof QualificationV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {string}
     * @memberof QualificationV30
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof QualificationV30
     */
    visibility?: QualificationV30VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum QualificationV30VisibilityEnum {
    Limited = 'limited',
    RegisteredOnly = 'registered-only',
    Public = 'public'
}

/**
 *
 * @export
 * @interface QualificationV30Rc1
 */
export interface QualificationV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof QualificationV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof QualificationV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof QualificationV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {number}
     * @memberof QualificationV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof QualificationV30Rc1
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof QualificationV30Rc1
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof QualificationV30Rc1
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof QualificationV30Rc1
     */
    startDate: FuzzyDateV30Rc1;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof QualificationV30Rc1
     */
    endDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {OrganizationV30Rc1}
     * @memberof QualificationV30Rc1
     */
    organization: OrganizationV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof QualificationV30Rc1
     */
    url?: UrlV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof QualificationV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {string}
     * @memberof QualificationV30Rc1
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof QualificationV30Rc1
     */
    visibility?: QualificationV30Rc1VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum QualificationV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface QualificationV30Rc2
 */
export interface QualificationV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof QualificationV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof QualificationV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof QualificationV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {number}
     * @memberof QualificationV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof QualificationV30Rc2
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof QualificationV30Rc2
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof QualificationV30Rc2
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof QualificationV30Rc2
     */
    startDate: FuzzyDateV30Rc2;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof QualificationV30Rc2
     */
    endDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {OrganizationV30Rc2}
     * @memberof QualificationV30Rc2
     */
    organization: OrganizationV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof QualificationV30Rc2
     */
    url?: UrlV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof QualificationV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {string}
     * @memberof QualificationV30Rc2
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof QualificationV30Rc2
     */
    visibility?: QualificationV30Rc2VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum QualificationV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface QualificationsV30
 */
export interface QualificationsV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof QualificationsV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {Array<AffiliationGroupV30QualificationSummaryV30>}
     * @memberof QualificationsV30
     */
    affiliationGroup?: Array<AffiliationGroupV30QualificationSummaryV30>;
    /**
     *
     * @type {string}
     * @memberof QualificationsV30
     */
    path?: string;
}
/**
 *
 * @export
 * @interface QualificationsV30Rc1
 */
export interface QualificationsV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof QualificationsV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {Array<AffiliationGroupV30Rc1QualificationSummaryV30Rc1>}
     * @memberof QualificationsV30Rc1
     */
    affiliationGroup?: Array<AffiliationGroupV30Rc1QualificationSummaryV30Rc1>;
    /**
     *
     * @type {string}
     * @memberof QualificationsV30Rc1
     */
    path?: string;
}
/**
 *
 * @export
 * @interface QualificationsV30Rc2
 */
export interface QualificationsV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof QualificationsV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {Array<AffiliationGroupV30Rc2QualificationSummaryV30Rc2>}
     * @memberof QualificationsV30Rc2
     */
    affiliationGroup?: Array<AffiliationGroupV30Rc2QualificationSummaryV30Rc2>;
    /**
     *
     * @type {string}
     * @memberof QualificationsV30Rc2
     */
    path?: string;
}
/**
 *
 * @export
 * @interface RecordV20
 */
export interface RecordV20 {
    /**
     *
     * @type {OrcidIdentifierV20}
     * @memberof RecordV20
     */
    orcidIdentifier?: OrcidIdentifierV20;
    /**
     *
     * @type {PreferencesV20}
     * @memberof RecordV20
     */
    preferences?: PreferencesV20;
    /**
     *
     * @type {HistoryV20}
     * @memberof RecordV20
     */
    history?: HistoryV20;
    /**
     *
     * @type {PersonV20}
     * @memberof RecordV20
     */
    person?: PersonV20;
    /**
     *
     * @type {ActivitiesSummaryV20}
     * @memberof RecordV20
     */
    activitiesSummary?: ActivitiesSummaryV20;
    /**
     *
     * @type {string}
     * @memberof RecordV20
     */
    path?: string;
}
/**
 *
 * @export
 * @interface RecordV30
 */
export interface RecordV30 {
    /**
     *
     * @type {OrcidIdentifierV30}
     * @memberof RecordV30
     */
    orcidIdentifier?: OrcidIdentifierV30;
    /**
     *
     * @type {PreferencesV30}
     * @memberof RecordV30
     */
    preferences?: PreferencesV30;
    /**
     *
     * @type {HistoryV30}
     * @memberof RecordV30
     */
    history?: HistoryV30;
    /**
     *
     * @type {PersonV30}
     * @memberof RecordV30
     */
    person?: PersonV30;
    /**
     *
     * @type {ActivitiesSummaryV30}
     * @memberof RecordV30
     */
    activitiesSummary?: ActivitiesSummaryV30;
    /**
     *
     * @type {string}
     * @memberof RecordV30
     */
    path?: string;
}
/**
 *
 * @export
 * @interface RecordV30Rc1
 */
export interface RecordV30Rc1 {
    /**
     *
     * @type {OrcidIdentifierV30Rc1}
     * @memberof RecordV30Rc1
     */
    orcidIdentifier?: OrcidIdentifierV30Rc1;
    /**
     *
     * @type {PreferencesV30Rc1}
     * @memberof RecordV30Rc1
     */
    preferences?: PreferencesV30Rc1;
    /**
     *
     * @type {HistoryV30Rc1}
     * @memberof RecordV30Rc1
     */
    history?: HistoryV30Rc1;
    /**
     *
     * @type {PersonV30Rc1}
     * @memberof RecordV30Rc1
     */
    person?: PersonV30Rc1;
    /**
     *
     * @type {ActivitiesSummaryV30Rc1}
     * @memberof RecordV30Rc1
     */
    activitiesSummary?: ActivitiesSummaryV30Rc1;
    /**
     *
     * @type {string}
     * @memberof RecordV30Rc1
     */
    path?: string;
}
/**
 *
 * @export
 * @interface RecordV30Rc2
 */
export interface RecordV30Rc2 {
    /**
     *
     * @type {OrcidIdentifierV30Rc2}
     * @memberof RecordV30Rc2
     */
    orcidIdentifier?: OrcidIdentifierV30Rc2;
    /**
     *
     * @type {PreferencesV30Rc2}
     * @memberof RecordV30Rc2
     */
    preferences?: PreferencesV30Rc2;
    /**
     *
     * @type {HistoryV30Rc2}
     * @memberof RecordV30Rc2
     */
    history?: HistoryV30Rc2;
    /**
     *
     * @type {PersonV30Rc2}
     * @memberof RecordV30Rc2
     */
    person?: PersonV30Rc2;
    /**
     *
     * @type {ActivitiesSummaryV30Rc2}
     * @memberof RecordV30Rc2
     */
    activitiesSummary?: ActivitiesSummaryV30Rc2;
    /**
     *
     * @type {string}
     * @memberof RecordV30Rc2
     */
    path?: string;
}
/**
 *
 * @export
 * @interface ResearchResourceGroupV30
 */
export interface ResearchResourceGroupV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof ResearchResourceGroupV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof ResearchResourceGroupV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {Array<ResearchResourceSummaryV30>}
     * @memberof ResearchResourceGroupV30
     */
    researchResourceSummary?: Array<ResearchResourceSummaryV30>;
}
/**
 *
 * @export
 * @interface ResearchResourceGroupV30Rc1
 */
export interface ResearchResourceGroupV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof ResearchResourceGroupV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof ResearchResourceGroupV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {Array<ResearchResourceSummaryV30Rc1>}
     * @memberof ResearchResourceGroupV30Rc1
     */
    researchResourceSummary?: Array<ResearchResourceSummaryV30Rc1>;
}
/**
 *
 * @export
 * @interface ResearchResourceGroupV30Rc2
 */
export interface ResearchResourceGroupV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof ResearchResourceGroupV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof ResearchResourceGroupV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {Array<ResearchResourceSummaryV30Rc2>}
     * @memberof ResearchResourceGroupV30Rc2
     */
    researchResourceSummary?: Array<ResearchResourceSummaryV30Rc2>;
}
/**
 *
 * @export
 * @interface ResearchResourceHostsV30
 */
export interface ResearchResourceHostsV30 {
    /**
     *
     * @type {Array<OrganizationV30>}
     * @memberof ResearchResourceHostsV30
     */
    organization?: Array<OrganizationV30>;
}
/**
 *
 * @export
 * @interface ResearchResourceHostsV30Rc1
 */
export interface ResearchResourceHostsV30Rc1 {
    /**
     *
     * @type {Array<OrganizationV30Rc1>}
     * @memberof ResearchResourceHostsV30Rc1
     */
    organization?: Array<OrganizationV30Rc1>;
}
/**
 *
 * @export
 * @interface ResearchResourceHostsV30Rc2
 */
export interface ResearchResourceHostsV30Rc2 {
    /**
     *
     * @type {Array<OrganizationV30Rc2>}
     * @memberof ResearchResourceHostsV30Rc2
     */
    organization?: Array<OrganizationV30Rc2>;
}
/**
 *
 * @export
 * @interface ResearchResourceItemV30
 */
export interface ResearchResourceItemV30 {
    /**
     *
     * @type {string}
     * @memberof ResearchResourceItemV30
     */
    resourceName?: string;
    /**
     *
     * @type {string}
     * @memberof ResearchResourceItemV30
     */
    resourceType?: ResearchResourceItemV30ResourceTypeEnum;
    /**
     *
     * @type {ResearchResourceHostsV30}
     * @memberof ResearchResourceItemV30
     */
    hosts?: ResearchResourceHostsV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof ResearchResourceItemV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {UrlV30}
     * @memberof ResearchResourceItemV30
     */
    url?: UrlV30;
}

/**
    * @export
    * @enum {string}
    */
export enum ResearchResourceItemV30ResourceTypeEnum {
    Infrastructures = 'infrastructures',
    Collections = 'collections',
    Equipment = 'equipment',
    Services = 'services'
}

/**
 *
 * @export
 * @interface ResearchResourceItemV30Rc1
 */
export interface ResearchResourceItemV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof ResearchResourceItemV30Rc1
     */
    resourceName?: string;
    /**
     *
     * @type {string}
     * @memberof ResearchResourceItemV30Rc1
     */
    resourceType?: string;
    /**
     *
     * @type {ResearchResourceHostsV30Rc1}
     * @memberof ResearchResourceItemV30Rc1
     */
    hosts?: ResearchResourceHostsV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof ResearchResourceItemV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof ResearchResourceItemV30Rc1
     */
    url?: UrlV30Rc1;
}
/**
 *
 * @export
 * @interface ResearchResourceItemV30Rc2
 */
export interface ResearchResourceItemV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof ResearchResourceItemV30Rc2
     */
    resourceName?: string;
    /**
     *
     * @type {string}
     * @memberof ResearchResourceItemV30Rc2
     */
    resourceType?: ResearchResourceItemV30Rc2ResourceTypeEnum;
    /**
     *
     * @type {ResearchResourceHostsV30Rc2}
     * @memberof ResearchResourceItemV30Rc2
     */
    hosts?: ResearchResourceHostsV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof ResearchResourceItemV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof ResearchResourceItemV30Rc2
     */
    url?: UrlV30Rc2;
}

/**
    * @export
    * @enum {string}
    */
export enum ResearchResourceItemV30Rc2ResourceTypeEnum {
    Infrastructures = 'infrastructures',
    Collections = 'collections',
    Equipment = 'equipment',
    Services = 'services'
}

/**
 *
 * @export
 * @interface ResearchResourceProposalV30
 */
export interface ResearchResourceProposalV30 {
    /**
     *
     * @type {ResearchResourceTitleV30}
     * @memberof ResearchResourceProposalV30
     */
    title?: ResearchResourceTitleV30;
    /**
     *
     * @type {ResearchResourceHostsV30}
     * @memberof ResearchResourceProposalV30
     */
    hosts?: ResearchResourceHostsV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof ResearchResourceProposalV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof ResearchResourceProposalV30
     */
    startDate?: FuzzyDateV30;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof ResearchResourceProposalV30
     */
    endDate?: FuzzyDateV30;
    /**
     *
     * @type {UrlV30}
     * @memberof ResearchResourceProposalV30
     */
    url?: UrlV30;
}
/**
 *
 * @export
 * @interface ResearchResourceProposalV30Rc1
 */
export interface ResearchResourceProposalV30Rc1 {
    /**
     *
     * @type {ResearchResourceTitleV30Rc1}
     * @memberof ResearchResourceProposalV30Rc1
     */
    title?: ResearchResourceTitleV30Rc1;
    /**
     *
     * @type {ResearchResourceHostsV30Rc1}
     * @memberof ResearchResourceProposalV30Rc1
     */
    hosts?: ResearchResourceHostsV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof ResearchResourceProposalV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof ResearchResourceProposalV30Rc1
     */
    startDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof ResearchResourceProposalV30Rc1
     */
    endDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof ResearchResourceProposalV30Rc1
     */
    url?: UrlV30Rc1;
}
/**
 *
 * @export
 * @interface ResearchResourceProposalV30Rc2
 */
export interface ResearchResourceProposalV30Rc2 {
    /**
     *
     * @type {ResearchResourceTitleV30Rc2}
     * @memberof ResearchResourceProposalV30Rc2
     */
    title?: ResearchResourceTitleV30Rc2;
    /**
     *
     * @type {ResearchResourceHostsV30Rc2}
     * @memberof ResearchResourceProposalV30Rc2
     */
    hosts?: ResearchResourceHostsV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof ResearchResourceProposalV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof ResearchResourceProposalV30Rc2
     */
    startDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof ResearchResourceProposalV30Rc2
     */
    endDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof ResearchResourceProposalV30Rc2
     */
    url?: UrlV30Rc2;
}
/**
 *
 * @export
 * @interface ResearchResourceSummaryV30
 */
export interface ResearchResourceSummaryV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof ResearchResourceSummaryV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof ResearchResourceSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof ResearchResourceSummaryV30
     */
    source?: SourceV30;
    /**
     *
     * @type {ResearchResourceProposalV30}
     * @memberof ResearchResourceSummaryV30
     */
    proposal?: ResearchResourceProposalV30;
    /**
     *
     * @type {string}
     * @memberof ResearchResourceSummaryV30
     */
    visibility?: ResearchResourceSummaryV30VisibilityEnum;
    /**
     *
     * @type {number}
     * @memberof ResearchResourceSummaryV30
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof ResearchResourceSummaryV30
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof ResearchResourceSummaryV30
     */
    displayIndex?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ResearchResourceSummaryV30VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface ResearchResourceSummaryV30Rc1
 */
export interface ResearchResourceSummaryV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof ResearchResourceSummaryV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof ResearchResourceSummaryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof ResearchResourceSummaryV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {ResearchResourceProposalV30Rc1}
     * @memberof ResearchResourceSummaryV30Rc1
     */
    proposal?: ResearchResourceProposalV30Rc1;
    /**
     *
     * @type {string}
     * @memberof ResearchResourceSummaryV30Rc1
     */
    visibility?: ResearchResourceSummaryV30Rc1VisibilityEnum;
    /**
     *
     * @type {number}
     * @memberof ResearchResourceSummaryV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof ResearchResourceSummaryV30Rc1
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof ResearchResourceSummaryV30Rc1
     */
    displayIndex?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ResearchResourceSummaryV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface ResearchResourceSummaryV30Rc2
 */
export interface ResearchResourceSummaryV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof ResearchResourceSummaryV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof ResearchResourceSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof ResearchResourceSummaryV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {ResearchResourceProposalV30Rc2}
     * @memberof ResearchResourceSummaryV30Rc2
     */
    proposal?: ResearchResourceProposalV30Rc2;
    /**
     *
     * @type {string}
     * @memberof ResearchResourceSummaryV30Rc2
     */
    visibility?: ResearchResourceSummaryV30Rc2VisibilityEnum;
    /**
     *
     * @type {number}
     * @memberof ResearchResourceSummaryV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof ResearchResourceSummaryV30Rc2
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof ResearchResourceSummaryV30Rc2
     */
    displayIndex?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ResearchResourceSummaryV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface ResearchResourceTitleV30
 */
export interface ResearchResourceTitleV30 {
    /**
     *
     * @type {TitleV30}
     * @memberof ResearchResourceTitleV30
     */
    title?: TitleV30;
    /**
     *
     * @type {TranslatedTitleV30}
     * @memberof ResearchResourceTitleV30
     */
    translatedTitle?: TranslatedTitleV30;
}
/**
 *
 * @export
 * @interface ResearchResourceTitleV30Rc1
 */
export interface ResearchResourceTitleV30Rc1 {
    /**
     *
     * @type {TitleV30Rc1}
     * @memberof ResearchResourceTitleV30Rc1
     */
    title?: TitleV30Rc1;
    /**
     *
     * @type {TranslatedTitleV30Rc1}
     * @memberof ResearchResourceTitleV30Rc1
     */
    translatedTitle?: TranslatedTitleV30Rc1;
}
/**
 *
 * @export
 * @interface ResearchResourceTitleV30Rc2
 */
export interface ResearchResourceTitleV30Rc2 {
    /**
     *
     * @type {TitleV30Rc2}
     * @memberof ResearchResourceTitleV30Rc2
     */
    title?: TitleV30Rc2;
    /**
     *
     * @type {TranslatedTitleV30Rc2}
     * @memberof ResearchResourceTitleV30Rc2
     */
    translatedTitle?: TranslatedTitleV30Rc2;
}
/**
 *
 * @export
 * @interface ResearchResourceV30
 */
export interface ResearchResourceV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof ResearchResourceV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof ResearchResourceV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof ResearchResourceV30
     */
    source?: SourceV30;
    /**
     *
     * @type {ResearchResourceProposalV30}
     * @memberof ResearchResourceV30
     */
    proposal?: ResearchResourceProposalV30;
    /**
     *
     * @type {Array<ResearchResourceItemV30>}
     * @memberof ResearchResourceV30
     */
    resourceItem?: Array<ResearchResourceItemV30>;
    /**
     *
     * @type {string}
     * @memberof ResearchResourceV30
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof ResearchResourceV30
     */
    visibility?: ResearchResourceV30VisibilityEnum;
    /**
     *
     * @type {number}
     * @memberof ResearchResourceV30
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof ResearchResourceV30
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ResearchResourceV30VisibilityEnum {
    Limited = 'limited',
    RegisteredOnly = 'registered-only',
    Public = 'public'
}

/**
 *
 * @export
 * @interface ResearchResourceV30Rc1
 */
export interface ResearchResourceV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof ResearchResourceV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof ResearchResourceV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof ResearchResourceV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {ResearchResourceProposalV30Rc1}
     * @memberof ResearchResourceV30Rc1
     */
    proposal?: ResearchResourceProposalV30Rc1;
    /**
     *
     * @type {Array<ResearchResourceItemV30Rc1>}
     * @memberof ResearchResourceV30Rc1
     */
    resourceItem?: Array<ResearchResourceItemV30Rc1>;
    /**
     *
     * @type {string}
     * @memberof ResearchResourceV30Rc1
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof ResearchResourceV30Rc1
     */
    visibility?: ResearchResourceV30Rc1VisibilityEnum;
    /**
     *
     * @type {number}
     * @memberof ResearchResourceV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof ResearchResourceV30Rc1
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ResearchResourceV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface ResearchResourceV30Rc2
 */
export interface ResearchResourceV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof ResearchResourceV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof ResearchResourceV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof ResearchResourceV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {ResearchResourceProposalV30Rc2}
     * @memberof ResearchResourceV30Rc2
     */
    proposal?: ResearchResourceProposalV30Rc2;
    /**
     *
     * @type {Array<ResearchResourceItemV30Rc2>}
     * @memberof ResearchResourceV30Rc2
     */
    resourceItem?: Array<ResearchResourceItemV30Rc2>;
    /**
     *
     * @type {string}
     * @memberof ResearchResourceV30Rc2
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof ResearchResourceV30Rc2
     */
    visibility?: ResearchResourceV30Rc2VisibilityEnum;
    /**
     *
     * @type {number}
     * @memberof ResearchResourceV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof ResearchResourceV30Rc2
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ResearchResourceV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface ResearchResourcesV30
 */
export interface ResearchResourcesV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof ResearchResourcesV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {Array<ResearchResourceGroupV30>}
     * @memberof ResearchResourcesV30
     */
    group?: Array<ResearchResourceGroupV30>;
    /**
     *
     * @type {string}
     * @memberof ResearchResourcesV30
     */
    path?: string;
}
/**
 *
 * @export
 * @interface ResearchResourcesV30Rc1
 */
export interface ResearchResourcesV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof ResearchResourcesV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {Array<ResearchResourceGroupV30Rc1>}
     * @memberof ResearchResourcesV30Rc1
     */
    group?: Array<ResearchResourceGroupV30Rc1>;
    /**
     *
     * @type {string}
     * @memberof ResearchResourcesV30Rc1
     */
    path?: string;
}
/**
 *
 * @export
 * @interface ResearchResourcesV30Rc2
 */
export interface ResearchResourcesV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof ResearchResourcesV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {Array<ResearchResourceGroupV30Rc2>}
     * @memberof ResearchResourcesV30Rc2
     */
    group?: Array<ResearchResourceGroupV30Rc2>;
    /**
     *
     * @type {string}
     * @memberof ResearchResourcesV30Rc2
     */
    path?: string;
}
/**
 *
 * @export
 * @interface ResearcherUrlV20
 */
export interface ResearcherUrlV20 {
    /**
     *
     * @type {CreatedDateV20}
     * @memberof ResearcherUrlV20
     */
    createdDate?: CreatedDateV20;
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof ResearcherUrlV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {SourceV20}
     * @memberof ResearcherUrlV20
     */
    source?: SourceV20;
    /**
     *
     * @type {string}
     * @memberof ResearcherUrlV20
     */
    urlName?: string;
    /**
     *
     * @type {UrlV20}
     * @memberof ResearcherUrlV20
     */
    url?: UrlV20;
    /**
     *
     * @type {string}
     * @memberof ResearcherUrlV20
     */
    visibility?: ResearcherUrlV20VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof ResearcherUrlV20
     */
    path?: string;
    /**
     *
     * @type {number}
     * @memberof ResearcherUrlV20
     */
    putCode?: number;
    /**
     *
     * @type {number}
     * @memberof ResearcherUrlV20
     */
    displayIndex?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum ResearcherUrlV20VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface ResearcherUrlV30
 */
export interface ResearcherUrlV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof ResearcherUrlV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof ResearcherUrlV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof ResearcherUrlV30
     */
    source?: SourceV30;
    /**
     *
     * @type {string}
     * @memberof ResearcherUrlV30
     */
    urlName?: string;
    /**
     *
     * @type {UrlV30}
     * @memberof ResearcherUrlV30
     */
    url?: UrlV30;
    /**
     *
     * @type {string}
     * @memberof ResearcherUrlV30
     */
    visibility?: ResearcherUrlV30VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof ResearcherUrlV30
     */
    path?: string;
    /**
     *
     * @type {number}
     * @memberof ResearcherUrlV30
     */
    putCode?: number;
    /**
     *
     * @type {number}
     * @memberof ResearcherUrlV30
     */
    displayIndex?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum ResearcherUrlV30VisibilityEnum {
    Limited = 'limited',
    RegisteredOnly = 'registered-only',
    Public = 'public'
}

/**
 *
 * @export
 * @interface ResearcherUrlV30Rc1
 */
export interface ResearcherUrlV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof ResearcherUrlV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof ResearcherUrlV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof ResearcherUrlV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {string}
     * @memberof ResearcherUrlV30Rc1
     */
    urlName?: string;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof ResearcherUrlV30Rc1
     */
    url?: UrlV30Rc1;
    /**
     *
     * @type {string}
     * @memberof ResearcherUrlV30Rc1
     */
    visibility?: ResearcherUrlV30Rc1VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof ResearcherUrlV30Rc1
     */
    path?: string;
    /**
     *
     * @type {number}
     * @memberof ResearcherUrlV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {number}
     * @memberof ResearcherUrlV30Rc1
     */
    displayIndex?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum ResearcherUrlV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface ResearcherUrlV30Rc2
 */
export interface ResearcherUrlV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof ResearcherUrlV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof ResearcherUrlV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof ResearcherUrlV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {string}
     * @memberof ResearcherUrlV30Rc2
     */
    urlName?: string;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof ResearcherUrlV30Rc2
     */
    url?: UrlV30Rc2;
    /**
     *
     * @type {string}
     * @memberof ResearcherUrlV30Rc2
     */
    visibility?: ResearcherUrlV30Rc2VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof ResearcherUrlV30Rc2
     */
    path?: string;
    /**
     *
     * @type {number}
     * @memberof ResearcherUrlV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {number}
     * @memberof ResearcherUrlV30Rc2
     */
    displayIndex?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum ResearcherUrlV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface ResearcherUrlsV20
 */
export interface ResearcherUrlsV20 {
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof ResearcherUrlsV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {Array<ResearcherUrlV20>}
     * @memberof ResearcherUrlsV20
     */
    researcherUrl?: Array<ResearcherUrlV20>;
    /**
     *
     * @type {string}
     * @memberof ResearcherUrlsV20
     */
    path?: string;
}
/**
 *
 * @export
 * @interface ResearcherUrlsV30
 */
export interface ResearcherUrlsV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof ResearcherUrlsV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {Array<ResearcherUrlV30>}
     * @memberof ResearcherUrlsV30
     */
    researcherUrl?: Array<ResearcherUrlV30>;
    /**
     *
     * @type {string}
     * @memberof ResearcherUrlsV30
     */
    path?: string;
}
/**
 *
 * @export
 * @interface ResearcherUrlsV30Rc1
 */
export interface ResearcherUrlsV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof ResearcherUrlsV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {Array<ResearcherUrlV30Rc1>}
     * @memberof ResearcherUrlsV30Rc1
     */
    researcherUrl?: Array<ResearcherUrlV30Rc1>;
    /**
     *
     * @type {string}
     * @memberof ResearcherUrlsV30Rc1
     */
    path?: string;
}
/**
 *
 * @export
 * @interface ResearcherUrlsV30Rc2
 */
export interface ResearcherUrlsV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof ResearcherUrlsV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {Array<ResearcherUrlV30Rc2>}
     * @memberof ResearcherUrlsV30Rc2
     */
    researcherUrl?: Array<ResearcherUrlV30Rc2>;
    /**
     *
     * @type {string}
     * @memberof ResearcherUrlsV30Rc2
     */
    path?: string;
}
/**
 *
 * @export
 * @interface ResultV20
 */
export interface ResultV20 {
    /**
     *
     * @type {OrcidIdentifierV20}
     * @memberof ResultV20
     */
    orcidIdentifier?: OrcidIdentifierV20;
}
/**
 *
 * @export
 * @interface SearchV20
 */
export interface SearchV20 {
    /**
     *
     * @type {Array<ResultV20>}
     * @memberof SearchV20
     */
    result?: Array<ResultV20>;
    /**
     *
     * @type {number}
     * @memberof SearchV20
     */
    numFound?: number;
}
/**
 *
 * @export
 * @interface ServiceSummaryV30
 */
export interface ServiceSummaryV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof ServiceSummaryV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof ServiceSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof ServiceSummaryV30
     */
    source?: SourceV30;
    /**
     *
     * @type {number}
     * @memberof ServiceSummaryV30
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof ServiceSummaryV30
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceSummaryV30
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof ServiceSummaryV30
     */
    startDate?: FuzzyDateV30;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof ServiceSummaryV30
     */
    endDate?: FuzzyDateV30;
    /**
     *
     * @type {OrganizationV30}
     * @memberof ServiceSummaryV30
     */
    organization?: OrganizationV30;
    /**
     *
     * @type {UrlV30}
     * @memberof ServiceSummaryV30
     */
    url?: UrlV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof ServiceSummaryV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {string}
     * @memberof ServiceSummaryV30
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceSummaryV30
     */
    visibility?: ServiceSummaryV30VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof ServiceSummaryV30
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ServiceSummaryV30VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface ServiceSummaryV30Rc1
 */
export interface ServiceSummaryV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof ServiceSummaryV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof ServiceSummaryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof ServiceSummaryV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {number}
     * @memberof ServiceSummaryV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof ServiceSummaryV30Rc1
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceSummaryV30Rc1
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof ServiceSummaryV30Rc1
     */
    startDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof ServiceSummaryV30Rc1
     */
    endDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {OrganizationV30Rc1}
     * @memberof ServiceSummaryV30Rc1
     */
    organization?: OrganizationV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof ServiceSummaryV30Rc1
     */
    url?: UrlV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof ServiceSummaryV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {string}
     * @memberof ServiceSummaryV30Rc1
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceSummaryV30Rc1
     */
    visibility?: ServiceSummaryV30Rc1VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof ServiceSummaryV30Rc1
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ServiceSummaryV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface ServiceSummaryV30Rc2
 */
export interface ServiceSummaryV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof ServiceSummaryV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof ServiceSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof ServiceSummaryV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {number}
     * @memberof ServiceSummaryV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof ServiceSummaryV30Rc2
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceSummaryV30Rc2
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof ServiceSummaryV30Rc2
     */
    startDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof ServiceSummaryV30Rc2
     */
    endDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {OrganizationV30Rc2}
     * @memberof ServiceSummaryV30Rc2
     */
    organization?: OrganizationV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof ServiceSummaryV30Rc2
     */
    url?: UrlV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof ServiceSummaryV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {string}
     * @memberof ServiceSummaryV30Rc2
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceSummaryV30Rc2
     */
    visibility?: ServiceSummaryV30Rc2VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof ServiceSummaryV30Rc2
     */
    path?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ServiceSummaryV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface ServiceV30
 */
export interface ServiceV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof ServiceV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof ServiceV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof ServiceV30
     */
    source?: SourceV30;
    /**
     *
     * @type {number}
     * @memberof ServiceV30
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof ServiceV30
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceV30
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceV30
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof ServiceV30
     */
    startDate: FuzzyDateV30;
    /**
     *
     * @type {FuzzyDateV30}
     * @memberof ServiceV30
     */
    endDate?: FuzzyDateV30;
    /**
     *
     * @type {OrganizationV30}
     * @memberof ServiceV30
     */
    organization: OrganizationV30;
    /**
     *
     * @type {UrlV30}
     * @memberof ServiceV30
     */
    url?: UrlV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof ServiceV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {string}
     * @memberof ServiceV30
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceV30
     */
    visibility?: ServiceV30VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ServiceV30VisibilityEnum {
    Limited = 'limited',
    RegisteredOnly = 'registered-only',
    Public = 'public'
}

/**
 *
 * @export
 * @interface ServiceV30Rc1
 */
export interface ServiceV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof ServiceV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof ServiceV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof ServiceV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {number}
     * @memberof ServiceV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof ServiceV30Rc1
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceV30Rc1
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceV30Rc1
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof ServiceV30Rc1
     */
    startDate: FuzzyDateV30Rc1;
    /**
     *
     * @type {FuzzyDateV30Rc1}
     * @memberof ServiceV30Rc1
     */
    endDate?: FuzzyDateV30Rc1;
    /**
     *
     * @type {OrganizationV30Rc1}
     * @memberof ServiceV30Rc1
     */
    organization: OrganizationV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof ServiceV30Rc1
     */
    url?: UrlV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof ServiceV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {string}
     * @memberof ServiceV30Rc1
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceV30Rc1
     */
    visibility?: ServiceV30Rc1VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ServiceV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface ServiceV30Rc2
 */
export interface ServiceV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof ServiceV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof ServiceV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof ServiceV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {number}
     * @memberof ServiceV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof ServiceV30Rc2
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceV30Rc2
     */
    departmentName?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceV30Rc2
     */
    roleTitle?: string;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof ServiceV30Rc2
     */
    startDate: FuzzyDateV30Rc2;
    /**
     *
     * @type {FuzzyDateV30Rc2}
     * @memberof ServiceV30Rc2
     */
    endDate?: FuzzyDateV30Rc2;
    /**
     *
     * @type {OrganizationV30Rc2}
     * @memberof ServiceV30Rc2
     */
    organization: OrganizationV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof ServiceV30Rc2
     */
    url?: UrlV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof ServiceV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {string}
     * @memberof ServiceV30Rc2
     */
    displayIndex?: string;
    /**
     *
     * @type {string}
     * @memberof ServiceV30Rc2
     */
    visibility?: ServiceV30Rc2VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ServiceV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface ServicesV30
 */
export interface ServicesV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof ServicesV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {Array<AffiliationGroupV30ServiceSummaryV30>}
     * @memberof ServicesV30
     */
    affiliationGroup?: Array<AffiliationGroupV30ServiceSummaryV30>;
    /**
     *
     * @type {string}
     * @memberof ServicesV30
     */
    path?: string;
}
/**
 *
 * @export
 * @interface ServicesV30Rc1
 */
export interface ServicesV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof ServicesV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {Array<AffiliationGroupV30Rc1ServiceSummaryV30Rc1>}
     * @memberof ServicesV30Rc1
     */
    affiliationGroup?: Array<AffiliationGroupV30Rc1ServiceSummaryV30Rc1>;
    /**
     *
     * @type {string}
     * @memberof ServicesV30Rc1
     */
    path?: string;
}
/**
 *
 * @export
 * @interface ServicesV30Rc2
 */
export interface ServicesV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof ServicesV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {Array<AffiliationGroupV30Rc2ServiceSummaryV30Rc2>}
     * @memberof ServicesV30Rc2
     */
    affiliationGroup?: Array<AffiliationGroupV30Rc2ServiceSummaryV30Rc2>;
    /**
     *
     * @type {string}
     * @memberof ServicesV30Rc2
     */
    path?: string;
}
/**
 *
 * @export
 * @interface SourceClientIdV20
 */
export interface SourceClientIdV20 {
    /**
     *
     * @type {string}
     * @memberof SourceClientIdV20
     */
    uri?: string;
    /**
     *
     * @type {string}
     * @memberof SourceClientIdV20
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof SourceClientIdV20
     */
    host?: string;
}
/**
 *
 * @export
 * @interface SourceClientIdV30
 */
export interface SourceClientIdV30 {
    /**
     *
     * @type {string}
     * @memberof SourceClientIdV30
     */
    uri?: string;
    /**
     *
     * @type {string}
     * @memberof SourceClientIdV30
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof SourceClientIdV30
     */
    host?: string;
}
/**
 *
 * @export
 * @interface SourceClientIdV30Rc1
 */
export interface SourceClientIdV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof SourceClientIdV30Rc1
     */
    uri?: string;
    /**
     *
     * @type {string}
     * @memberof SourceClientIdV30Rc1
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof SourceClientIdV30Rc1
     */
    host?: string;
}
/**
 *
 * @export
 * @interface SourceClientIdV30Rc2
 */
export interface SourceClientIdV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof SourceClientIdV30Rc2
     */
    uri?: string;
    /**
     *
     * @type {string}
     * @memberof SourceClientIdV30Rc2
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof SourceClientIdV30Rc2
     */
    host?: string;
}
/**
 *
 * @export
 * @interface SourceNameV20
 */
export interface SourceNameV20 {
    /**
     *
     * @type {string}
     * @memberof SourceNameV20
     */
    value?: string;
}
/**
 *
 * @export
 * @interface SourceNameV30
 */
export interface SourceNameV30 {
    /**
     *
     * @type {string}
     * @memberof SourceNameV30
     */
    value?: string;
}
/**
 *
 * @export
 * @interface SourceNameV30Rc1
 */
export interface SourceNameV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof SourceNameV30Rc1
     */
    value?: string;
}
/**
 *
 * @export
 * @interface SourceNameV30Rc2
 */
export interface SourceNameV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof SourceNameV30Rc2
     */
    value?: string;
}
/**
 *
 * @export
 * @interface SourceOrcidV20
 */
export interface SourceOrcidV20 {
    /**
     *
     * @type {string}
     * @memberof SourceOrcidV20
     */
    uri?: string;
    /**
     *
     * @type {string}
     * @memberof SourceOrcidV20
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof SourceOrcidV20
     */
    host?: string;
}
/**
 *
 * @export
 * @interface SourceOrcidV30
 */
export interface SourceOrcidV30 {
    /**
     *
     * @type {string}
     * @memberof SourceOrcidV30
     */
    uri?: string;
    /**
     *
     * @type {string}
     * @memberof SourceOrcidV30
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof SourceOrcidV30
     */
    host?: string;
}
/**
 *
 * @export
 * @interface SourceOrcidV30Rc1
 */
export interface SourceOrcidV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof SourceOrcidV30Rc1
     */
    uri?: string;
    /**
     *
     * @type {string}
     * @memberof SourceOrcidV30Rc1
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof SourceOrcidV30Rc1
     */
    host?: string;
}
/**
 *
 * @export
 * @interface SourceOrcidV30Rc2
 */
export interface SourceOrcidV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof SourceOrcidV30Rc2
     */
    uri?: string;
    /**
     *
     * @type {string}
     * @memberof SourceOrcidV30Rc2
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof SourceOrcidV30Rc2
     */
    host?: string;
}
/**
 *
 * @export
 * @interface SourceV20
 */
export interface SourceV20 {
    /**
     *
     * @type {SourceOrcidV20}
     * @memberof SourceV20
     */
    sourceOrcid?: SourceOrcidV20;
    /**
     *
     * @type {SourceClientIdV20}
     * @memberof SourceV20
     */
    sourceClientId?: SourceClientIdV20;
    /**
     *
     * @type {SourceNameV20}
     * @memberof SourceV20
     */
    sourceName?: SourceNameV20;
}
/**
 *
 * @export
 * @interface SourceV30
 */
export interface SourceV30 {
    /**
     *
     * @type {SourceOrcidV30}
     * @memberof SourceV30
     */
    sourceOrcid?: SourceOrcidV30;
    /**
     *
     * @type {SourceClientIdV30}
     * @memberof SourceV30
     */
    sourceClientId?: SourceClientIdV30;
    /**
     *
     * @type {SourceNameV30}
     * @memberof SourceV30
     */
    sourceName?: SourceNameV30;
    /**
     *
     * @type {SourceOrcidV30}
     * @memberof SourceV30
     */
    assertionOriginOrcid?: SourceOrcidV30;
    /**
     *
     * @type {SourceClientIdV30}
     * @memberof SourceV30
     */
    assertionOriginClientId?: SourceClientIdV30;
    /**
     *
     * @type {SourceNameV30}
     * @memberof SourceV30
     */
    assertionOriginName?: SourceNameV30;
}
/**
 *
 * @export
 * @interface SourceV30Rc1
 */
export interface SourceV30Rc1 {
    /**
     *
     * @type {SourceOrcidV30Rc1}
     * @memberof SourceV30Rc1
     */
    sourceOrcid?: SourceOrcidV30Rc1;
    /**
     *
     * @type {SourceClientIdV30Rc1}
     * @memberof SourceV30Rc1
     */
    sourceClientId?: SourceClientIdV30Rc1;
    /**
     *
     * @type {SourceNameV30Rc1}
     * @memberof SourceV30Rc1
     */
    sourceName?: SourceNameV30Rc1;
}
/**
 *
 * @export
 * @interface SourceV30Rc2
 */
export interface SourceV30Rc2 {
    /**
     *
     * @type {SourceOrcidV30Rc2}
     * @memberof SourceV30Rc2
     */
    sourceOrcid?: SourceOrcidV30Rc2;
    /**
     *
     * @type {SourceClientIdV30Rc2}
     * @memberof SourceV30Rc2
     */
    sourceClientId?: SourceClientIdV30Rc2;
    /**
     *
     * @type {SourceNameV30Rc2}
     * @memberof SourceV30Rc2
     */
    sourceName?: SourceNameV30Rc2;
    /**
     *
     * @type {SourceOrcidV30Rc2}
     * @memberof SourceV30Rc2
     */
    assertionOriginOrcid?: SourceOrcidV30Rc2;
    /**
     *
     * @type {SourceClientIdV30Rc2}
     * @memberof SourceV30Rc2
     */
    assertionOriginClientId?: SourceClientIdV30Rc2;
    /**
     *
     * @type {SourceNameV30Rc2}
     * @memberof SourceV30Rc2
     */
    assertionOriginName?: SourceNameV30Rc2;
}
/**
 *
 * @export
 * @interface SubjectNameV30
 */
export interface SubjectNameV30 {
    /**
     *
     * @type {TitleV30}
     * @memberof SubjectNameV30
     */
    title?: TitleV30;
    /**
     *
     * @type {SubtitleV30}
     * @memberof SubjectNameV30
     */
    subtitle?: SubtitleV30;
    /**
     *
     * @type {TranslatedTitleV30}
     * @memberof SubjectNameV30
     */
    translatedTitle?: TranslatedTitleV30;
}
/**
 *
 * @export
 * @interface SubjectNameV30Rc2
 */
export interface SubjectNameV30Rc2 {
    /**
     *
     * @type {TitleV30Rc2}
     * @memberof SubjectNameV30Rc2
     */
    title?: TitleV30Rc2;
    /**
     *
     * @type {SubtitleV30Rc2}
     * @memberof SubjectNameV30Rc2
     */
    subtitle?: SubtitleV30Rc2;
    /**
     *
     * @type {TranslatedTitleV30Rc2}
     * @memberof SubjectNameV30Rc2
     */
    translatedTitle?: TranslatedTitleV30Rc2;
}
/**
 *
 * @export
 * @interface SubmissionDateV20
 */
export interface SubmissionDateV20 {
    /**
     *
     * @type {string}
     * @memberof SubmissionDateV20
     */
    value?: string;
}
/**
 *
 * @export
 * @interface SubmissionDateV30
 */
export interface SubmissionDateV30 {
    /**
     *
     * @type {string}
     * @memberof SubmissionDateV30
     */
    value?: string;
}
/**
 *
 * @export
 * @interface SubmissionDateV30Rc1
 */
export interface SubmissionDateV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof SubmissionDateV30Rc1
     */
    value?: string;
}
/**
 *
 * @export
 * @interface SubmissionDateV30Rc2
 */
export interface SubmissionDateV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof SubmissionDateV30Rc2
     */
    value?: string;
}
/**
 *
 * @export
 * @interface SubtitleV20
 */
export interface SubtitleV20 {
    /**
     *
     * @type {string}
     * @memberof SubtitleV20
     */
    value?: string;
}
/**
 *
 * @export
 * @interface SubtitleV30
 */
export interface SubtitleV30 {
    /**
     *
     * @type {string}
     * @memberof SubtitleV30
     */
    value?: string;
}
/**
 *
 * @export
 * @interface SubtitleV30Rc1
 */
export interface SubtitleV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof SubtitleV30Rc1
     */
    value?: string;
}
/**
 *
 * @export
 * @interface SubtitleV30Rc2
 */
export interface SubtitleV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof SubtitleV30Rc2
     */
    value?: string;
}
/**
 *
 * @export
 * @interface TitleV20
 */
export interface TitleV20 {
    /**
     *
     * @type {string}
     * @memberof TitleV20
     */
    value?: string;
}
/**
 *
 * @export
 * @interface TitleV30
 */
export interface TitleV30 {
    /**
     *
     * @type {string}
     * @memberof TitleV30
     */
    value?: string;
}
/**
 *
 * @export
 * @interface TitleV30Rc1
 */
export interface TitleV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof TitleV30Rc1
     */
    value?: string;
}
/**
 *
 * @export
 * @interface TitleV30Rc2
 */
export interface TitleV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof TitleV30Rc2
     */
    value?: string;
}
/**
 *
 * @export
 * @interface TransientError
 */
export interface TransientError {
    /**
     *
     * @type {string}
     * @memberof TransientError
     */
    errorCode: string;
    /**
     *
     * @type {string}
     * @memberof TransientError
     */
    errorMessage: string;
    /**
     *
     * @type {boolean}
     * @memberof TransientError
     */
    _transient: boolean;
}
/**
 *
 * @export
 * @interface TransientNonEmptyString
 */
export interface TransientNonEmptyString {
    /**
     *
     * @type {string}
     * @memberof TransientNonEmptyString
     */
    value?: string;
    /**
     *
     * @type {boolean}
     * @memberof TransientNonEmptyString
     */
    _transient?: boolean;
}
/**
 *
 * @export
 * @interface TranslatedTitleV20
 */
export interface TranslatedTitleV20 {
    /**
     *
     * @type {string}
     * @memberof TranslatedTitleV20
     */
    value?: string;
    /**
     *
     * @type {string}
     * @memberof TranslatedTitleV20
     */
    languageCode: string;
}
/**
 *
 * @export
 * @interface TranslatedTitleV30
 */
export interface TranslatedTitleV30 {
    /**
     *
     * @type {string}
     * @memberof TranslatedTitleV30
     */
    value?: string;
    /**
     *
     * @type {string}
     * @memberof TranslatedTitleV30
     */
    languageCode: TranslatedTitleV30LanguageCodeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum TranslatedTitleV30LanguageCodeEnum {
    Ab = 'ab',
    Aa = 'aa',
    Af = 'af',
    Ak = 'ak',
    Sq = 'sq',
    Am = 'am',
    Ar = 'ar',
    An = 'an',
    Hy = 'hy',
    As = 'as',
    Av = 'av',
    Ae = 'ae',
    Ay = 'ay',
    Az = 'az',
    Bm = 'bm',
    Ba = 'ba',
    Eu = 'eu',
    Be = 'be',
    Bn = 'bn',
    Bh = 'bh',
    Bi = 'bi',
    Bs = 'bs',
    Br = 'br',
    Bg = 'bg',
    My = 'my',
    Ca = 'ca',
    Ch = 'ch',
    Ce = 'ce',
    ZhCn = 'zh_CN',
    ZhTw = 'zh_TW',
    Cu = 'cu',
    Cv = 'cv',
    Kw = 'kw',
    Co = 'co',
    Cr = 'cr',
    Hr = 'hr',
    Cs = 'cs',
    Da = 'da',
    Dv = 'dv',
    Nl = 'nl',
    Dz = 'dz',
    En = 'en',
    Eo = 'eo',
    Et = 'et',
    Ee = 'ee',
    Fo = 'fo',
    Fj = 'fj',
    Fi = 'fi',
    Fr = 'fr',
    Fy = 'fy',
    Ff = 'ff',
    Gl = 'gl',
    Lg = 'lg',
    Ka = 'ka',
    De = 'de',
    El = 'el',
    Kl = 'kl',
    Gn = 'gn',
    Gu = 'gu',
    Ht = 'ht',
    Ha = 'ha',
    Iw = 'iw',
    Hz = 'hz',
    Hi = 'hi',
    Ho = 'ho',
    Hu = 'hu',
    Is = 'is',
    Io = 'io',
    Ig = 'ig',
    In = 'in',
    Ia = 'ia',
    Ie = 'ie',
    Iu = 'iu',
    Ik = 'ik',
    Ga = 'ga',
    It = 'it',
    Ja = 'ja',
    Jv = 'jv',
    Kn = 'kn',
    Kr = 'kr',
    Ks = 'ks',
    Kk = 'kk',
    Km = 'km',
    Ki = 'ki',
    Rw = 'rw',
    Ky = 'ky',
    Kv = 'kv',
    Kg = 'kg',
    Ko = 'ko',
    Ku = 'ku',
    Kj = 'kj',
    Lo = 'lo',
    La = 'la',
    Lv = 'lv',
    Li = 'li',
    Ln = 'ln',
    Lt = 'lt',
    Lu = 'lu',
    Lb = 'lb',
    Mk = 'mk',
    Mg = 'mg',
    Ms = 'ms',
    Ml = 'ml',
    Mt = 'mt',
    Gv = 'gv',
    Mi = 'mi',
    Mr = 'mr',
    Mh = 'mh',
    Mo = 'mo',
    Mn = 'mn',
    Na = 'na',
    Nv = 'nv',
    Ng = 'ng',
    Ne = 'ne',
    Nd = 'nd',
    Se = 'se',
    No = 'no',
    Nb = 'nb',
    Nn = 'nn',
    Ny = 'ny',
    Oc = 'oc',
    Oj = 'oj',
    Or = 'or',
    Om = 'om',
    Os = 'os',
    Pi = 'pi',
    Pa = 'pa',
    Fa = 'fa',
    Pl = 'pl',
    Pt = 'pt',
    Ps = 'ps',
    Qu = 'qu',
    Rm = 'rm',
    Ro = 'ro',
    Rn = 'rn',
    Ru = 'ru',
    Sm = 'sm',
    Sg = 'sg',
    Sa = 'sa',
    Sc = 'sc',
    Gd = 'gd',
    Sr = 'sr',
    Sn = 'sn',
    Ii = 'ii',
    Sd = 'sd',
    Si = 'si',
    Sk = 'sk',
    Sl = 'sl',
    So = 'so',
    Nr = 'nr',
    St = 'st',
    Es = 'es',
    Su = 'su',
    Sw = 'sw',
    Ss = 'ss',
    Sv = 'sv',
    Tl = 'tl',
    Ty = 'ty',
    Tg = 'tg',
    Ta = 'ta',
    Tt = 'tt',
    Te = 'te',
    Th = 'th',
    Bo = 'bo',
    Ti = 'ti',
    To = 'to',
    Ts = 'ts',
    Tn = 'tn',
    Tr = 'tr',
    Tk = 'tk',
    Tw = 'tw',
    Ug = 'ug',
    Uk = 'uk',
    Ur = 'ur',
    Uz = 'uz',
    Ve = 've',
    Vi = 'vi',
    Vo = 'vo',
    Wa = 'wa',
    Cy = 'cy',
    Wo = 'wo',
    Xh = 'xh',
    Ji = 'ji',
    Yo = 'yo',
    Za = 'za',
    Zu = 'zu'
}

/**
 *
 * @export
 * @interface TranslatedTitleV30Rc1
 */
export interface TranslatedTitleV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof TranslatedTitleV30Rc1
     */
    value?: string;
    /**
     *
     * @type {string}
     * @memberof TranslatedTitleV30Rc1
     */
    languageCode: string;
}
/**
 *
 * @export
 * @interface TranslatedTitleV30Rc2
 */
export interface TranslatedTitleV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof TranslatedTitleV30Rc2
     */
    value?: string;
    /**
     *
     * @type {string}
     * @memberof TranslatedTitleV30Rc2
     */
    languageCode: TranslatedTitleV30Rc2LanguageCodeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum TranslatedTitleV30Rc2LanguageCodeEnum {
    Ab = 'ab',
    Aa = 'aa',
    Af = 'af',
    Ak = 'ak',
    Sq = 'sq',
    Am = 'am',
    Ar = 'ar',
    An = 'an',
    Hy = 'hy',
    As = 'as',
    Av = 'av',
    Ae = 'ae',
    Ay = 'ay',
    Az = 'az',
    Bm = 'bm',
    Ba = 'ba',
    Eu = 'eu',
    Be = 'be',
    Bn = 'bn',
    Bh = 'bh',
    Bi = 'bi',
    Bs = 'bs',
    Br = 'br',
    Bg = 'bg',
    My = 'my',
    Ca = 'ca',
    Ch = 'ch',
    Ce = 'ce',
    ZhCn = 'zh_CN',
    ZhTw = 'zh_TW',
    Cu = 'cu',
    Cv = 'cv',
    Kw = 'kw',
    Co = 'co',
    Cr = 'cr',
    Hr = 'hr',
    Cs = 'cs',
    Da = 'da',
    Dv = 'dv',
    Nl = 'nl',
    Dz = 'dz',
    En = 'en',
    Eo = 'eo',
    Et = 'et',
    Ee = 'ee',
    Fo = 'fo',
    Fj = 'fj',
    Fi = 'fi',
    Fr = 'fr',
    Fy = 'fy',
    Ff = 'ff',
    Gl = 'gl',
    Lg = 'lg',
    Ka = 'ka',
    De = 'de',
    El = 'el',
    Kl = 'kl',
    Gn = 'gn',
    Gu = 'gu',
    Ht = 'ht',
    Ha = 'ha',
    Iw = 'iw',
    Hz = 'hz',
    Hi = 'hi',
    Ho = 'ho',
    Hu = 'hu',
    Is = 'is',
    Io = 'io',
    Ig = 'ig',
    In = 'in',
    Ia = 'ia',
    Ie = 'ie',
    Iu = 'iu',
    Ik = 'ik',
    Ga = 'ga',
    It = 'it',
    Ja = 'ja',
    Jv = 'jv',
    Kn = 'kn',
    Kr = 'kr',
    Ks = 'ks',
    Kk = 'kk',
    Km = 'km',
    Ki = 'ki',
    Rw = 'rw',
    Ky = 'ky',
    Kv = 'kv',
    Kg = 'kg',
    Ko = 'ko',
    Ku = 'ku',
    Kj = 'kj',
    Lo = 'lo',
    La = 'la',
    Lv = 'lv',
    Li = 'li',
    Ln = 'ln',
    Lt = 'lt',
    Lu = 'lu',
    Lb = 'lb',
    Mk = 'mk',
    Mg = 'mg',
    Ms = 'ms',
    Ml = 'ml',
    Mt = 'mt',
    Gv = 'gv',
    Mi = 'mi',
    Mr = 'mr',
    Mh = 'mh',
    Mo = 'mo',
    Mn = 'mn',
    Na = 'na',
    Nv = 'nv',
    Ng = 'ng',
    Ne = 'ne',
    Nd = 'nd',
    Se = 'se',
    No = 'no',
    Nb = 'nb',
    Nn = 'nn',
    Ny = 'ny',
    Oc = 'oc',
    Oj = 'oj',
    Or = 'or',
    Om = 'om',
    Os = 'os',
    Pi = 'pi',
    Pa = 'pa',
    Fa = 'fa',
    Pl = 'pl',
    Pt = 'pt',
    Ps = 'ps',
    Qu = 'qu',
    Rm = 'rm',
    Ro = 'ro',
    Rn = 'rn',
    Ru = 'ru',
    Sm = 'sm',
    Sg = 'sg',
    Sa = 'sa',
    Sc = 'sc',
    Gd = 'gd',
    Sr = 'sr',
    Sn = 'sn',
    Ii = 'ii',
    Sd = 'sd',
    Si = 'si',
    Sk = 'sk',
    Sl = 'sl',
    So = 'so',
    Nr = 'nr',
    St = 'st',
    Es = 'es',
    Su = 'su',
    Sw = 'sw',
    Ss = 'ss',
    Sv = 'sv',
    Tl = 'tl',
    Ty = 'ty',
    Tg = 'tg',
    Ta = 'ta',
    Tt = 'tt',
    Te = 'te',
    Th = 'th',
    Bo = 'bo',
    Ti = 'ti',
    To = 'to',
    Ts = 'ts',
    Tn = 'tn',
    Tr = 'tr',
    Tk = 'tk',
    Tw = 'tw',
    Ug = 'ug',
    Uk = 'uk',
    Ur = 'ur',
    Uz = 'uz',
    Ve = 've',
    Vi = 'vi',
    Vo = 'vo',
    Wa = 'wa',
    Cy = 'cy',
    Wo = 'wo',
    Xh = 'xh',
    Ji = 'ji',
    Yo = 'yo',
    Za = 'za',
    Zu = 'zu'
}

/**
 *
 * @export
 * @interface UrlV20
 */
export interface UrlV20 {
    /**
     *
     * @type {string}
     * @memberof UrlV20
     */
    value?: string;
}
/**
 *
 * @export
 * @interface UrlV30
 */
export interface UrlV30 {
    /**
     *
     * @type {string}
     * @memberof UrlV30
     */
    value?: string;
}
/**
 *
 * @export
 * @interface UrlV30Rc1
 */
export interface UrlV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof UrlV30Rc1
     */
    value?: string;
}
/**
 *
 * @export
 * @interface UrlV30Rc2
 */
export interface UrlV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof UrlV30Rc2
     */
    value?: string;
}
/**
 *
 * @export
 * @interface WorkBulkV20
 */
export interface WorkBulkV20 {
    /**
     *
     * @type {Array<object>}
     * @memberof WorkBulkV20
     */
    bulk?: Array<object>;
}
/**
 *
 * @export
 * @interface WorkBulkV30
 */
export interface WorkBulkV30 {
    /**
     *
     * @type {Array<object>}
     * @memberof WorkBulkV30
     */
    bulk?: Array<object>;
}
/**
 *
 * @export
 * @interface WorkBulkV30Rc1
 */
export interface WorkBulkV30Rc1 {
    /**
     *
     * @type {Array<object>}
     * @memberof WorkBulkV30Rc1
     */
    bulk?: Array<object>;
}
/**
 *
 * @export
 * @interface WorkBulkV30Rc2
 */
export interface WorkBulkV30Rc2 {
    /**
     *
     * @type {Array<object>}
     * @memberof WorkBulkV30Rc2
     */
    bulk?: Array<object>;
}
/**
 *
 * @export
 * @interface WorkContributorsV20
 */
export interface WorkContributorsV20 {
    /**
     *
     * @type {Array<ContributorV20>}
     * @memberof WorkContributorsV20
     */
    contributor?: Array<ContributorV20>;
}
/**
 *
 * @export
 * @interface WorkContributorsV30
 */
export interface WorkContributorsV30 {
    /**
     *
     * @type {Array<ContributorV30>}
     * @memberof WorkContributorsV30
     */
    contributor?: Array<ContributorV30>;
}
/**
 *
 * @export
 * @interface WorkContributorsV30Rc1
 */
export interface WorkContributorsV30Rc1 {
    /**
     *
     * @type {Array<ContributorV30Rc1>}
     * @memberof WorkContributorsV30Rc1
     */
    contributor?: Array<ContributorV30Rc1>;
}
/**
 *
 * @export
 * @interface WorkContributorsV30Rc2
 */
export interface WorkContributorsV30Rc2 {
    /**
     *
     * @type {Array<ContributorV30Rc2>}
     * @memberof WorkContributorsV30Rc2
     */
    contributor?: Array<ContributorV30Rc2>;
}
/**
 *
 * @export
 * @interface WorkGroupV20
 */
export interface WorkGroupV20 {
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof WorkGroupV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {ExternalIDsV20}
     * @memberof WorkGroupV20
     */
    externalIds?: ExternalIDsV20;
    /**
     *
     * @type {Array<WorkSummaryV20>}
     * @memberof WorkGroupV20
     */
    workSummary?: Array<WorkSummaryV20>;
}
/**
 *
 * @export
 * @interface WorkGroupV30
 */
export interface WorkGroupV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof WorkGroupV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof WorkGroupV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {Array<WorkSummaryV30>}
     * @memberof WorkGroupV30
     */
    workSummary?: Array<WorkSummaryV30>;
}
/**
 *
 * @export
 * @interface WorkGroupV30Rc1
 */
export interface WorkGroupV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof WorkGroupV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof WorkGroupV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {Array<WorkSummaryV30Rc1>}
     * @memberof WorkGroupV30Rc1
     */
    workSummary?: Array<WorkSummaryV30Rc1>;
}
/**
 *
 * @export
 * @interface WorkGroupV30Rc2
 */
export interface WorkGroupV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof WorkGroupV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof WorkGroupV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {Array<WorkSummaryV30Rc2>}
     * @memberof WorkGroupV30Rc2
     */
    workSummary?: Array<WorkSummaryV30Rc2>;
}
/**
 *
 * @export
 * @interface WorkSummaryV20
 */
export interface WorkSummaryV20 {
    /**
     *
     * @type {number}
     * @memberof WorkSummaryV20
     */
    putCode?: number;
    /**
     *
     * @type {CreatedDateV20}
     * @memberof WorkSummaryV20
     */
    createdDate?: CreatedDateV20;
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof WorkSummaryV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {SourceV20}
     * @memberof WorkSummaryV20
     */
    source?: SourceV20;
    /**
     *
     * @type {WorkTitleV20}
     * @memberof WorkSummaryV20
     */
    title?: WorkTitleV20;
    /**
     *
     * @type {ExternalIDsV20}
     * @memberof WorkSummaryV20
     */
    externalIds?: ExternalIDsV20;
    /**
     *
     * @type {string}
     * @memberof WorkSummaryV20
     */
    type?: WorkSummaryV20TypeEnum;
    /**
     *
     * @type {PublicationDateV20}
     * @memberof WorkSummaryV20
     */
    publicationDate?: PublicationDateV20;
    /**
     *
     * @type {string}
     * @memberof WorkSummaryV20
     */
    visibility?: WorkSummaryV20VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof WorkSummaryV20
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof WorkSummaryV20
     */
    displayIndex?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum WorkSummaryV20TypeEnum {
    ArtisticPerformance = 'ARTISTIC_PERFORMANCE',
    BookChapter = 'BOOK_CHAPTER',
    BookReview = 'BOOK_REVIEW',
    Book = 'BOOK',
    ConferenceAbstract = 'CONFERENCE_ABSTRACT',
    ConferencePaper = 'CONFERENCE_PAPER',
    ConferencePoster = 'CONFERENCE_POSTER',
    DataSet = 'DATA_SET',
    DictionaryEntry = 'DICTIONARY_ENTRY',
    Disclosure = 'DISCLOSURE',
    Dissertation = 'DISSERTATION',
    EditedBook = 'EDITED_BOOK',
    EncyclopediaEntry = 'ENCYCLOPEDIA_ENTRY',
    Invention = 'INVENTION',
    JournalArticle = 'JOURNAL_ARTICLE',
    JournalIssue = 'JOURNAL_ISSUE',
    LectureSpeech = 'LECTURE_SPEECH',
    License = 'LICENSE',
    MagazineArticle = 'MAGAZINE_ARTICLE',
    Manual = 'MANUAL',
    NewsletterArticle = 'NEWSLETTER_ARTICLE',
    NewspaperArticle = 'NEWSPAPER_ARTICLE',
    OnlineResource = 'ONLINE_RESOURCE',
    Other = 'OTHER',
    Patent = 'PATENT',
    RegisteredCopyright = 'REGISTERED_COPYRIGHT',
    Report = 'REPORT',
    ResearchTechnique = 'RESEARCH_TECHNIQUE',
    ResearchTool = 'RESEARCH_TOOL',
    SpinOffCompany = 'SPIN_OFF_COMPANY',
    StandardsAndPolicy = 'STANDARDS_AND_POLICY',
    SupervisedStudentPublication = 'SUPERVISED_STUDENT_PUBLICATION',
    TechnicalStandard = 'TECHNICAL_STANDARD',
    Test = 'TEST',
    Trademark = 'TRADEMARK',
    Translation = 'TRANSLATION',
    Website = 'WEBSITE',
    WorkingPaper = 'WORKING_PAPER',
    Undefined = 'UNDEFINED'
}
/**
    * @export
    * @enum {string}
    */
export enum WorkSummaryV20VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface WorkSummaryV30
 */
export interface WorkSummaryV30 {
    /**
     *
     * @type {number}
     * @memberof WorkSummaryV30
     */
    putCode?: number;
    /**
     *
     * @type {CreatedDateV30}
     * @memberof WorkSummaryV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof WorkSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof WorkSummaryV30
     */
    source?: SourceV30;
    /**
     *
     * @type {WorkTitleV30}
     * @memberof WorkSummaryV30
     */
    title?: WorkTitleV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof WorkSummaryV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {UrlV30}
     * @memberof WorkSummaryV30
     */
    url?: UrlV30;
    /**
     *
     * @type {string}
     * @memberof WorkSummaryV30
     */
    type?: WorkSummaryV30TypeEnum;
    /**
     *
     * @type {PublicationDateV30}
     * @memberof WorkSummaryV30
     */
    publicationDate?: PublicationDateV30;
    /**
     *
     * @type {TitleV30}
     * @memberof WorkSummaryV30
     */
    journalTitle?: TitleV30;
    /**
     *
     * @type {string}
     * @memberof WorkSummaryV30
     */
    visibility?: WorkSummaryV30VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof WorkSummaryV30
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof WorkSummaryV30
     */
    displayIndex?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum WorkSummaryV30TypeEnum {
    Annotation = 'ANNOTATION',
    ArtisticPerformance = 'ARTISTIC_PERFORMANCE',
    BookChapter = 'BOOK_CHAPTER',
    BookReview = 'BOOK_REVIEW',
    Book = 'BOOK',
    ConferenceAbstract = 'CONFERENCE_ABSTRACT',
    ConferencePaper = 'CONFERENCE_PAPER',
    ConferencePoster = 'CONFERENCE_POSTER',
    DataManagementPlan = 'DATA_MANAGEMENT_PLAN',
    DataSet = 'DATA_SET',
    DictionaryEntry = 'DICTIONARY_ENTRY',
    Disclosure = 'DISCLOSURE',
    DissertationThesis = 'DISSERTATION_THESIS',
    EditedBook = 'EDITED_BOOK',
    EncyclopediaEntry = 'ENCYCLOPEDIA_ENTRY',
    Invention = 'INVENTION',
    JournalArticle = 'JOURNAL_ARTICLE',
    JournalIssue = 'JOURNAL_ISSUE',
    LectureSpeech = 'LECTURE_SPEECH',
    License = 'LICENSE',
    MagazineArticle = 'MAGAZINE_ARTICLE',
    Manual = 'MANUAL',
    NewsletterArticle = 'NEWSLETTER_ARTICLE',
    NewspaperArticle = 'NEWSPAPER_ARTICLE',
    OnlineResource = 'ONLINE_RESOURCE',
    Other = 'OTHER',
    Patent = 'PATENT',
    PhysicalObject = 'PHYSICAL_OBJECT',
    Preprint = 'PREPRINT',
    RegisteredCopyright = 'REGISTERED_COPYRIGHT',
    Report = 'REPORT',
    ResearchTechnique = 'RESEARCH_TECHNIQUE',
    ResearchTool = 'RESEARCH_TOOL',
    Software = 'SOFTWARE',
    SpinOffCompany = 'SPIN_OFF_COMPANY',
    StandardsAndPolicy = 'STANDARDS_AND_POLICY',
    SupervisedStudentPublication = 'SUPERVISED_STUDENT_PUBLICATION',
    TechnicalStandard = 'TECHNICAL_STANDARD',
    Test = 'TEST',
    Trademark = 'TRADEMARK',
    Translation = 'TRANSLATION',
    Website = 'WEBSITE',
    WorkingPaper = 'WORKING_PAPER',
    Undefined = 'UNDEFINED'
}
/**
    * @export
    * @enum {string}
    */
export enum WorkSummaryV30VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface WorkSummaryV30Rc1
 */
export interface WorkSummaryV30Rc1 {
    /**
     *
     * @type {number}
     * @memberof WorkSummaryV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof WorkSummaryV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof WorkSummaryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof WorkSummaryV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {WorkTitleV30Rc1}
     * @memberof WorkSummaryV30Rc1
     */
    title?: WorkTitleV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof WorkSummaryV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof WorkSummaryV30Rc1
     */
    url?: UrlV30Rc1;
    /**
     *
     * @type {string}
     * @memberof WorkSummaryV30Rc1
     */
    type?: WorkSummaryV30Rc1TypeEnum;
    /**
     *
     * @type {PublicationDateV30Rc1}
     * @memberof WorkSummaryV30Rc1
     */
    publicationDate?: PublicationDateV30Rc1;
    /**
     *
     * @type {TitleV30Rc1}
     * @memberof WorkSummaryV30Rc1
     */
    journalTitle?: TitleV30Rc1;
    /**
     *
     * @type {string}
     * @memberof WorkSummaryV30Rc1
     */
    visibility?: WorkSummaryV30Rc1VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof WorkSummaryV30Rc1
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof WorkSummaryV30Rc1
     */
    displayIndex?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum WorkSummaryV30Rc1TypeEnum {
    ArtisticPerformance = 'ARTISTIC_PERFORMANCE',
    BookChapter = 'BOOK_CHAPTER',
    BookReview = 'BOOK_REVIEW',
    Book = 'BOOK',
    ConferenceAbstract = 'CONFERENCE_ABSTRACT',
    ConferencePaper = 'CONFERENCE_PAPER',
    ConferencePoster = 'CONFERENCE_POSTER',
    DataSet = 'DATA_SET',
    DictionaryEntry = 'DICTIONARY_ENTRY',
    Disclosure = 'DISCLOSURE',
    Dissertation = 'DISSERTATION',
    EditedBook = 'EDITED_BOOK',
    EncyclopediaEntry = 'ENCYCLOPEDIA_ENTRY',
    Invention = 'INVENTION',
    JournalArticle = 'JOURNAL_ARTICLE',
    JournalIssue = 'JOURNAL_ISSUE',
    LectureSpeech = 'LECTURE_SPEECH',
    License = 'LICENSE',
    MagazineArticle = 'MAGAZINE_ARTICLE',
    Manual = 'MANUAL',
    NewsletterArticle = 'NEWSLETTER_ARTICLE',
    NewspaperArticle = 'NEWSPAPER_ARTICLE',
    OnlineResource = 'ONLINE_RESOURCE',
    Other = 'OTHER',
    Patent = 'PATENT',
    Preprint = 'PREPRINT',
    RegisteredCopyright = 'REGISTERED_COPYRIGHT',
    Report = 'REPORT',
    ResearchTechnique = 'RESEARCH_TECHNIQUE',
    ResearchTool = 'RESEARCH_TOOL',
    Software = 'SOFTWARE',
    SpinOffCompany = 'SPIN_OFF_COMPANY',
    StandardsAndPolicy = 'STANDARDS_AND_POLICY',
    SupervisedStudentPublication = 'SUPERVISED_STUDENT_PUBLICATION',
    TechnicalStandard = 'TECHNICAL_STANDARD',
    Test = 'TEST',
    Trademark = 'TRADEMARK',
    Translation = 'TRANSLATION',
    Website = 'WEBSITE',
    WorkingPaper = 'WORKING_PAPER',
    Undefined = 'UNDEFINED'
}
/**
    * @export
    * @enum {string}
    */
export enum WorkSummaryV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface WorkSummaryV30Rc2
 */
export interface WorkSummaryV30Rc2 {
    /**
     *
     * @type {number}
     * @memberof WorkSummaryV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof WorkSummaryV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof WorkSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof WorkSummaryV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {WorkTitleV30Rc2}
     * @memberof WorkSummaryV30Rc2
     */
    title?: WorkTitleV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof WorkSummaryV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof WorkSummaryV30Rc2
     */
    url?: UrlV30Rc2;
    /**
     *
     * @type {string}
     * @memberof WorkSummaryV30Rc2
     */
    type?: WorkSummaryV30Rc2TypeEnum;
    /**
     *
     * @type {PublicationDateV30Rc2}
     * @memberof WorkSummaryV30Rc2
     */
    publicationDate?: PublicationDateV30Rc2;
    /**
     *
     * @type {TitleV30Rc2}
     * @memberof WorkSummaryV30Rc2
     */
    journalTitle?: TitleV30Rc2;
    /**
     *
     * @type {string}
     * @memberof WorkSummaryV30Rc2
     */
    visibility?: WorkSummaryV30Rc2VisibilityEnum;
    /**
     *
     * @type {string}
     * @memberof WorkSummaryV30Rc2
     */
    path?: string;
    /**
     *
     * @type {string}
     * @memberof WorkSummaryV30Rc2
     */
    displayIndex?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum WorkSummaryV30Rc2TypeEnum {
    Annotation = 'ANNOTATION',
    ArtisticPerformance = 'ARTISTIC_PERFORMANCE',
    BookChapter = 'BOOK_CHAPTER',
    BookReview = 'BOOK_REVIEW',
    Book = 'BOOK',
    ConferenceAbstract = 'CONFERENCE_ABSTRACT',
    ConferencePaper = 'CONFERENCE_PAPER',
    ConferencePoster = 'CONFERENCE_POSTER',
    DataManagementPlan = 'DATA_MANAGEMENT_PLAN',
    DataSet = 'DATA_SET',
    DictionaryEntry = 'DICTIONARY_ENTRY',
    Disclosure = 'DISCLOSURE',
    DissertationThesis = 'DISSERTATION_THESIS',
    EditedBook = 'EDITED_BOOK',
    EncyclopediaEntry = 'ENCYCLOPEDIA_ENTRY',
    Invention = 'INVENTION',
    JournalArticle = 'JOURNAL_ARTICLE',
    JournalIssue = 'JOURNAL_ISSUE',
    LectureSpeech = 'LECTURE_SPEECH',
    License = 'LICENSE',
    MagazineArticle = 'MAGAZINE_ARTICLE',
    Manual = 'MANUAL',
    NewsletterArticle = 'NEWSLETTER_ARTICLE',
    NewspaperArticle = 'NEWSPAPER_ARTICLE',
    OnlineResource = 'ONLINE_RESOURCE',
    Other = 'OTHER',
    Patent = 'PATENT',
    PhysicalObject = 'PHYSICAL_OBJECT',
    Preprint = 'PREPRINT',
    RegisteredCopyright = 'REGISTERED_COPYRIGHT',
    Report = 'REPORT',
    ResearchTechnique = 'RESEARCH_TECHNIQUE',
    ResearchTool = 'RESEARCH_TOOL',
    Software = 'SOFTWARE',
    SpinOffCompany = 'SPIN_OFF_COMPANY',
    StandardsAndPolicy = 'STANDARDS_AND_POLICY',
    SupervisedStudentPublication = 'SUPERVISED_STUDENT_PUBLICATION',
    TechnicalStandard = 'TECHNICAL_STANDARD',
    Test = 'TEST',
    Trademark = 'TRADEMARK',
    Translation = 'TRANSLATION',
    Website = 'WEBSITE',
    WorkingPaper = 'WORKING_PAPER',
    Undefined = 'UNDEFINED'
}
/**
    * @export
    * @enum {string}
    */
export enum WorkSummaryV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface WorkTitleV20
 */
export interface WorkTitleV20 {
    /**
     *
     * @type {TitleV20}
     * @memberof WorkTitleV20
     */
    title?: TitleV20;
    /**
     *
     * @type {SubtitleV20}
     * @memberof WorkTitleV20
     */
    subtitle?: SubtitleV20;
    /**
     *
     * @type {TranslatedTitleV20}
     * @memberof WorkTitleV20
     */
    translatedTitle?: TranslatedTitleV20;
}
/**
 *
 * @export
 * @interface WorkTitleV30
 */
export interface WorkTitleV30 {
    /**
     *
     * @type {TitleV30}
     * @memberof WorkTitleV30
     */
    title?: TitleV30;
    /**
     *
     * @type {SubtitleV30}
     * @memberof WorkTitleV30
     */
    subtitle?: SubtitleV30;
    /**
     *
     * @type {TranslatedTitleV30}
     * @memberof WorkTitleV30
     */
    translatedTitle?: TranslatedTitleV30;
}
/**
 *
 * @export
 * @interface WorkTitleV30Rc1
 */
export interface WorkTitleV30Rc1 {
    /**
     *
     * @type {TitleV30Rc1}
     * @memberof WorkTitleV30Rc1
     */
    title?: TitleV30Rc1;
    /**
     *
     * @type {SubtitleV30Rc1}
     * @memberof WorkTitleV30Rc1
     */
    subtitle?: SubtitleV30Rc1;
    /**
     *
     * @type {TranslatedTitleV30Rc1}
     * @memberof WorkTitleV30Rc1
     */
    translatedTitle?: TranslatedTitleV30Rc1;
}
/**
 *
 * @export
 * @interface WorkTitleV30Rc2
 */
export interface WorkTitleV30Rc2 {
    /**
     *
     * @type {TitleV30Rc2}
     * @memberof WorkTitleV30Rc2
     */
    title?: TitleV30Rc2;
    /**
     *
     * @type {SubtitleV30Rc2}
     * @memberof WorkTitleV30Rc2
     */
    subtitle?: SubtitleV30Rc2;
    /**
     *
     * @type {TranslatedTitleV30Rc2}
     * @memberof WorkTitleV30Rc2
     */
    translatedTitle?: TranslatedTitleV30Rc2;
}
/**
 *
 * @export
 * @interface WorkV20
 */
export interface WorkV20 {
    /**
     *
     * @type {CreatedDateV20}
     * @memberof WorkV20
     */
    createdDate?: CreatedDateV20;
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof WorkV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {SourceV20}
     * @memberof WorkV20
     */
    source?: SourceV20;
    /**
     *
     * @type {number}
     * @memberof WorkV20
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof WorkV20
     */
    path?: string;
    /**
     *
     * @type {WorkTitleV20}
     * @memberof WorkV20
     */
    title?: WorkTitleV20;
    /**
     *
     * @type {TitleV20}
     * @memberof WorkV20
     */
    journalTitle?: TitleV20;
    /**
     *
     * @type {string}
     * @memberof WorkV20
     */
    shortDescription?: string;
    /**
     *
     * @type {Citation}
     * @memberof WorkV20
     */
    citation?: Citation;
    /**
     *
     * @type {string}
     * @memberof WorkV20
     */
    type?: WorkV20TypeEnum;
    /**
     *
     * @type {PublicationDateV20}
     * @memberof WorkV20
     */
    publicationDate?: PublicationDateV20;
    /**
     *
     * @type {ExternalIDsV20}
     * @memberof WorkV20
     */
    externalIds?: ExternalIDsV20;
    /**
     *
     * @type {UrlV20}
     * @memberof WorkV20
     */
    url?: UrlV20;
    /**
     *
     * @type {WorkContributorsV20}
     * @memberof WorkV20
     */
    contributors?: WorkContributorsV20;
    /**
     *
     * @type {string}
     * @memberof WorkV20
     */
    languageCode?: string;
    /**
     *
     * @type {CountryV20}
     * @memberof WorkV20
     */
    country?: CountryV20;
    /**
     *
     * @type {string}
     * @memberof WorkV20
     */
    visibility?: WorkV20VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum WorkV20TypeEnum {
    ArtisticPerformance = 'ARTISTIC_PERFORMANCE',
    BookChapter = 'BOOK_CHAPTER',
    BookReview = 'BOOK_REVIEW',
    Book = 'BOOK',
    ConferenceAbstract = 'CONFERENCE_ABSTRACT',
    ConferencePaper = 'CONFERENCE_PAPER',
    ConferencePoster = 'CONFERENCE_POSTER',
    DataSet = 'DATA_SET',
    DictionaryEntry = 'DICTIONARY_ENTRY',
    Disclosure = 'DISCLOSURE',
    Dissertation = 'DISSERTATION',
    EditedBook = 'EDITED_BOOK',
    EncyclopediaEntry = 'ENCYCLOPEDIA_ENTRY',
    Invention = 'INVENTION',
    JournalArticle = 'JOURNAL_ARTICLE',
    JournalIssue = 'JOURNAL_ISSUE',
    LectureSpeech = 'LECTURE_SPEECH',
    License = 'LICENSE',
    MagazineArticle = 'MAGAZINE_ARTICLE',
    Manual = 'MANUAL',
    NewsletterArticle = 'NEWSLETTER_ARTICLE',
    NewspaperArticle = 'NEWSPAPER_ARTICLE',
    OnlineResource = 'ONLINE_RESOURCE',
    Other = 'OTHER',
    Patent = 'PATENT',
    RegisteredCopyright = 'REGISTERED_COPYRIGHT',
    Report = 'REPORT',
    ResearchTechnique = 'RESEARCH_TECHNIQUE',
    ResearchTool = 'RESEARCH_TOOL',
    SpinOffCompany = 'SPIN_OFF_COMPANY',
    StandardsAndPolicy = 'STANDARDS_AND_POLICY',
    SupervisedStudentPublication = 'SUPERVISED_STUDENT_PUBLICATION',
    TechnicalStandard = 'TECHNICAL_STANDARD',
    Test = 'TEST',
    Trademark = 'TRADEMARK',
    Translation = 'TRANSLATION',
    Website = 'WEBSITE',
    WorkingPaper = 'WORKING_PAPER',
    Undefined = 'UNDEFINED'
}
/**
    * @export
    * @enum {string}
    */
export enum WorkV20VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface WorkV30
 */
export interface WorkV30 {
    /**
     *
     * @type {CreatedDateV30}
     * @memberof WorkV30
     */
    createdDate?: CreatedDateV30;
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof WorkV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {SourceV30}
     * @memberof WorkV30
     */
    source?: SourceV30;
    /**
     *
     * @type {number}
     * @memberof WorkV30
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof WorkV30
     */
    path?: string;
    /**
     *
     * @type {WorkTitleV30}
     * @memberof WorkV30
     */
    title?: WorkTitleV30;
    /**
     *
     * @type {TitleV30}
     * @memberof WorkV30
     */
    journalTitle?: TitleV30;
    /**
     *
     * @type {string}
     * @memberof WorkV30
     */
    shortDescription?: string;
    /**
     *
     * @type {Citation}
     * @memberof WorkV30
     */
    citation?: Citation;
    /**
     *
     * @type {string}
     * @memberof WorkV30
     */
    type?: WorkV30TypeEnum;
    /**
     *
     * @type {PublicationDateV30}
     * @memberof WorkV30
     */
    publicationDate?: PublicationDateV30;
    /**
     *
     * @type {ExternalIDsV30}
     * @memberof WorkV30
     */
    externalIds?: ExternalIDsV30;
    /**
     *
     * @type {UrlV30}
     * @memberof WorkV30
     */
    url?: UrlV30;
    /**
     *
     * @type {WorkContributorsV30}
     * @memberof WorkV30
     */
    contributors?: WorkContributorsV30;
    /**
     *
     * @type {string}
     * @memberof WorkV30
     */
    languageCode?: WorkV30LanguageCodeEnum;
    /**
     *
     * @type {CountryV30}
     * @memberof WorkV30
     */
    country?: CountryV30;
    /**
     *
     * @type {string}
     * @memberof WorkV30
     */
    visibility?: WorkV30VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum WorkV30TypeEnum {
    Annotation = 'annotation',
    ArtisticPerformance = 'artistic-performance',
    BookChapter = 'book-chapter',
    BookReview = 'book-review',
    Book = 'book',
    ConferenceAbstract = 'conference-abstract',
    ConferencePaper = 'conference-paper',
    ConferencePoster = 'conference-poster',
    DataManagementPlan = 'data-management-plan',
    DataSet = 'data-set',
    DictionaryEntry = 'dictionary-entry',
    Disclosure = 'disclosure',
    DissertationThesis = 'dissertation-thesis',
    EditedBook = 'edited-book',
    EncyclopediaEntry = 'encyclopedia-entry',
    Invention = 'invention',
    JournalArticle = 'journal-article',
    JournalIssue = 'journal-issue',
    LectureSpeech = 'lecture-speech',
    License = 'license',
    MagazineArticle = 'magazine-article',
    Manual = 'manual',
    NewsletterArticle = 'newsletter-article',
    NewspaperArticle = 'newspaper-article',
    OnlineResource = 'online-resource',
    Other = 'other',
    Patent = 'patent',
    PhysicalObject = 'physical-object',
    Preprint = 'preprint',
    RegisteredCopyright = 'registered-copyright',
    Report = 'report',
    ResearchTechnique = 'research-technique',
    ResearchTool = 'research-tool',
    Software = 'software',
    SpinOffCompany = 'spin-off-company',
    StandardsAndPolicy = 'standards-and-policy',
    SupervisedStudentPublication = 'supervised-student-publication',
    TechnicalStandard = 'technical-standard',
    Test = 'test',
    Trademark = 'trademark',
    Translation = 'translation',
    Website = 'website',
    WorkingPaper = 'working-paper',
    Undefined = 'undefined'
}
/**
    * @export
    * @enum {string}
    */
export enum WorkV30LanguageCodeEnum {
    Ab = 'ab',
    Aa = 'aa',
    Af = 'af',
    Ak = 'ak',
    Sq = 'sq',
    Am = 'am',
    Ar = 'ar',
    An = 'an',
    Hy = 'hy',
    As = 'as',
    Av = 'av',
    Ae = 'ae',
    Ay = 'ay',
    Az = 'az',
    Bm = 'bm',
    Ba = 'ba',
    Eu = 'eu',
    Be = 'be',
    Bn = 'bn',
    Bh = 'bh',
    Bi = 'bi',
    Bs = 'bs',
    Br = 'br',
    Bg = 'bg',
    My = 'my',
    Ca = 'ca',
    Ch = 'ch',
    Ce = 'ce',
    ZhCn = 'zh_CN',
    ZhTw = 'zh_TW',
    Cu = 'cu',
    Cv = 'cv',
    Kw = 'kw',
    Co = 'co',
    Cr = 'cr',
    Hr = 'hr',
    Cs = 'cs',
    Da = 'da',
    Dv = 'dv',
    Nl = 'nl',
    Dz = 'dz',
    En = 'en',
    Eo = 'eo',
    Et = 'et',
    Ee = 'ee',
    Fo = 'fo',
    Fj = 'fj',
    Fi = 'fi',
    Fr = 'fr',
    Fy = 'fy',
    Ff = 'ff',
    Gl = 'gl',
    Lg = 'lg',
    Ka = 'ka',
    De = 'de',
    El = 'el',
    Kl = 'kl',
    Gn = 'gn',
    Gu = 'gu',
    Ht = 'ht',
    Ha = 'ha',
    Iw = 'iw',
    Hz = 'hz',
    Hi = 'hi',
    Ho = 'ho',
    Hu = 'hu',
    Is = 'is',
    Io = 'io',
    Ig = 'ig',
    In = 'in',
    Ia = 'ia',
    Ie = 'ie',
    Iu = 'iu',
    Ik = 'ik',
    Ga = 'ga',
    It = 'it',
    Ja = 'ja',
    Jv = 'jv',
    Kn = 'kn',
    Kr = 'kr',
    Ks = 'ks',
    Kk = 'kk',
    Km = 'km',
    Ki = 'ki',
    Rw = 'rw',
    Ky = 'ky',
    Kv = 'kv',
    Kg = 'kg',
    Ko = 'ko',
    Ku = 'ku',
    Kj = 'kj',
    Lo = 'lo',
    La = 'la',
    Lv = 'lv',
    Li = 'li',
    Ln = 'ln',
    Lt = 'lt',
    Lu = 'lu',
    Lb = 'lb',
    Mk = 'mk',
    Mg = 'mg',
    Ms = 'ms',
    Ml = 'ml',
    Mt = 'mt',
    Gv = 'gv',
    Mi = 'mi',
    Mr = 'mr',
    Mh = 'mh',
    Mo = 'mo',
    Mn = 'mn',
    Na = 'na',
    Nv = 'nv',
    Ng = 'ng',
    Ne = 'ne',
    Nd = 'nd',
    Se = 'se',
    No = 'no',
    Nb = 'nb',
    Nn = 'nn',
    Ny = 'ny',
    Oc = 'oc',
    Oj = 'oj',
    Or = 'or',
    Om = 'om',
    Os = 'os',
    Pi = 'pi',
    Pa = 'pa',
    Fa = 'fa',
    Pl = 'pl',
    Pt = 'pt',
    Ps = 'ps',
    Qu = 'qu',
    Rm = 'rm',
    Ro = 'ro',
    Rn = 'rn',
    Ru = 'ru',
    Sm = 'sm',
    Sg = 'sg',
    Sa = 'sa',
    Sc = 'sc',
    Gd = 'gd',
    Sr = 'sr',
    Sn = 'sn',
    Ii = 'ii',
    Sd = 'sd',
    Si = 'si',
    Sk = 'sk',
    Sl = 'sl',
    So = 'so',
    Nr = 'nr',
    St = 'st',
    Es = 'es',
    Su = 'su',
    Sw = 'sw',
    Ss = 'ss',
    Sv = 'sv',
    Tl = 'tl',
    Ty = 'ty',
    Tg = 'tg',
    Ta = 'ta',
    Tt = 'tt',
    Te = 'te',
    Th = 'th',
    Bo = 'bo',
    Ti = 'ti',
    To = 'to',
    Ts = 'ts',
    Tn = 'tn',
    Tr = 'tr',
    Tk = 'tk',
    Tw = 'tw',
    Ug = 'ug',
    Uk = 'uk',
    Ur = 'ur',
    Uz = 'uz',
    Ve = 've',
    Vi = 'vi',
    Vo = 'vo',
    Wa = 'wa',
    Cy = 'cy',
    Wo = 'wo',
    Xh = 'xh',
    Ji = 'ji',
    Yo = 'yo',
    Za = 'za',
    Zu = 'zu'
}
/**
    * @export
    * @enum {string}
    */
export enum WorkV30VisibilityEnum {
    Limited = 'limited',
    RegisteredOnly = 'registered-only',
    Public = 'public'
}

/**
 *
 * @export
 * @interface WorkV30Rc1
 */
export interface WorkV30Rc1 {
    /**
     *
     * @type {CreatedDateV30Rc1}
     * @memberof WorkV30Rc1
     */
    createdDate?: CreatedDateV30Rc1;
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof WorkV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {SourceV30Rc1}
     * @memberof WorkV30Rc1
     */
    source?: SourceV30Rc1;
    /**
     *
     * @type {number}
     * @memberof WorkV30Rc1
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof WorkV30Rc1
     */
    path?: string;
    /**
     *
     * @type {WorkTitleV30Rc1}
     * @memberof WorkV30Rc1
     */
    title?: WorkTitleV30Rc1;
    /**
     *
     * @type {TitleV30Rc1}
     * @memberof WorkV30Rc1
     */
    journalTitle?: TitleV30Rc1;
    /**
     *
     * @type {string}
     * @memberof WorkV30Rc1
     */
    shortDescription?: string;
    /**
     *
     * @type {Citation}
     * @memberof WorkV30Rc1
     */
    citation?: Citation;
    /**
     *
     * @type {string}
     * @memberof WorkV30Rc1
     */
    type?: WorkV30Rc1TypeEnum;
    /**
     *
     * @type {PublicationDateV30Rc1}
     * @memberof WorkV30Rc1
     */
    publicationDate?: PublicationDateV30Rc1;
    /**
     *
     * @type {ExternalIDsV30Rc1}
     * @memberof WorkV30Rc1
     */
    externalIds?: ExternalIDsV30Rc1;
    /**
     *
     * @type {UrlV30Rc1}
     * @memberof WorkV30Rc1
     */
    url?: UrlV30Rc1;
    /**
     *
     * @type {WorkContributorsV30Rc1}
     * @memberof WorkV30Rc1
     */
    contributors?: WorkContributorsV30Rc1;
    /**
     *
     * @type {string}
     * @memberof WorkV30Rc1
     */
    languageCode?: string;
    /**
     *
     * @type {CountryV30Rc1}
     * @memberof WorkV30Rc1
     */
    country?: CountryV30Rc1;
    /**
     *
     * @type {string}
     * @memberof WorkV30Rc1
     */
    visibility?: WorkV30Rc1VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum WorkV30Rc1TypeEnum {
    ArtisticPerformance = 'ARTISTIC_PERFORMANCE',
    BookChapter = 'BOOK_CHAPTER',
    BookReview = 'BOOK_REVIEW',
    Book = 'BOOK',
    ConferenceAbstract = 'CONFERENCE_ABSTRACT',
    ConferencePaper = 'CONFERENCE_PAPER',
    ConferencePoster = 'CONFERENCE_POSTER',
    DataSet = 'DATA_SET',
    DictionaryEntry = 'DICTIONARY_ENTRY',
    Disclosure = 'DISCLOSURE',
    Dissertation = 'DISSERTATION',
    EditedBook = 'EDITED_BOOK',
    EncyclopediaEntry = 'ENCYCLOPEDIA_ENTRY',
    Invention = 'INVENTION',
    JournalArticle = 'JOURNAL_ARTICLE',
    JournalIssue = 'JOURNAL_ISSUE',
    LectureSpeech = 'LECTURE_SPEECH',
    License = 'LICENSE',
    MagazineArticle = 'MAGAZINE_ARTICLE',
    Manual = 'MANUAL',
    NewsletterArticle = 'NEWSLETTER_ARTICLE',
    NewspaperArticle = 'NEWSPAPER_ARTICLE',
    OnlineResource = 'ONLINE_RESOURCE',
    Other = 'OTHER',
    Patent = 'PATENT',
    Preprint = 'PREPRINT',
    RegisteredCopyright = 'REGISTERED_COPYRIGHT',
    Report = 'REPORT',
    ResearchTechnique = 'RESEARCH_TECHNIQUE',
    ResearchTool = 'RESEARCH_TOOL',
    Software = 'SOFTWARE',
    SpinOffCompany = 'SPIN_OFF_COMPANY',
    StandardsAndPolicy = 'STANDARDS_AND_POLICY',
    SupervisedStudentPublication = 'SUPERVISED_STUDENT_PUBLICATION',
    TechnicalStandard = 'TECHNICAL_STANDARD',
    Test = 'TEST',
    Trademark = 'TRADEMARK',
    Translation = 'TRANSLATION',
    Website = 'WEBSITE',
    WorkingPaper = 'WORKING_PAPER',
    Undefined = 'UNDEFINED'
}
/**
    * @export
    * @enum {string}
    */
export enum WorkV30Rc1VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface WorkV30Rc2
 */
export interface WorkV30Rc2 {
    /**
     *
     * @type {CreatedDateV30Rc2}
     * @memberof WorkV30Rc2
     */
    createdDate?: CreatedDateV30Rc2;
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof WorkV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {SourceV30Rc2}
     * @memberof WorkV30Rc2
     */
    source?: SourceV30Rc2;
    /**
     *
     * @type {number}
     * @memberof WorkV30Rc2
     */
    putCode?: number;
    /**
     *
     * @type {string}
     * @memberof WorkV30Rc2
     */
    path?: string;
    /**
     *
     * @type {WorkTitleV30Rc2}
     * @memberof WorkV30Rc2
     */
    title?: WorkTitleV30Rc2;
    /**
     *
     * @type {TitleV30Rc2}
     * @memberof WorkV30Rc2
     */
    journalTitle?: TitleV30Rc2;
    /**
     *
     * @type {string}
     * @memberof WorkV30Rc2
     */
    shortDescription?: string;
    /**
     *
     * @type {Citation}
     * @memberof WorkV30Rc2
     */
    citation?: Citation;
    /**
     *
     * @type {string}
     * @memberof WorkV30Rc2
     */
    type?: WorkV30Rc2TypeEnum;
    /**
     *
     * @type {PublicationDateV30Rc2}
     * @memberof WorkV30Rc2
     */
    publicationDate?: PublicationDateV30Rc2;
    /**
     *
     * @type {ExternalIDsV30Rc2}
     * @memberof WorkV30Rc2
     */
    externalIds?: ExternalIDsV30Rc2;
    /**
     *
     * @type {UrlV30Rc2}
     * @memberof WorkV30Rc2
     */
    url?: UrlV30Rc2;
    /**
     *
     * @type {WorkContributorsV30Rc2}
     * @memberof WorkV30Rc2
     */
    contributors?: WorkContributorsV30Rc2;
    /**
     *
     * @type {string}
     * @memberof WorkV30Rc2
     */
    languageCode?: WorkV30Rc2LanguageCodeEnum;
    /**
     *
     * @type {CountryV30Rc2}
     * @memberof WorkV30Rc2
     */
    country?: CountryV30Rc2;
    /**
     *
     * @type {string}
     * @memberof WorkV30Rc2
     */
    visibility?: WorkV30Rc2VisibilityEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum WorkV30Rc2TypeEnum {
    Annotation = 'ANNOTATION',
    ArtisticPerformance = 'ARTISTIC_PERFORMANCE',
    BookChapter = 'BOOK_CHAPTER',
    BookReview = 'BOOK_REVIEW',
    Book = 'BOOK',
    ConferenceAbstract = 'CONFERENCE_ABSTRACT',
    ConferencePaper = 'CONFERENCE_PAPER',
    ConferencePoster = 'CONFERENCE_POSTER',
    DataManagementPlan = 'DATA_MANAGEMENT_PLAN',
    DataSet = 'DATA_SET',
    DictionaryEntry = 'DICTIONARY_ENTRY',
    Disclosure = 'DISCLOSURE',
    DissertationThesis = 'DISSERTATION_THESIS',
    EditedBook = 'EDITED_BOOK',
    EncyclopediaEntry = 'ENCYCLOPEDIA_ENTRY',
    Invention = 'INVENTION',
    JournalArticle = 'JOURNAL_ARTICLE',
    JournalIssue = 'JOURNAL_ISSUE',
    LectureSpeech = 'LECTURE_SPEECH',
    License = 'LICENSE',
    MagazineArticle = 'MAGAZINE_ARTICLE',
    Manual = 'MANUAL',
    NewsletterArticle = 'NEWSLETTER_ARTICLE',
    NewspaperArticle = 'NEWSPAPER_ARTICLE',
    OnlineResource = 'ONLINE_RESOURCE',
    Other = 'OTHER',
    Patent = 'PATENT',
    PhysicalObject = 'PHYSICAL_OBJECT',
    Preprint = 'PREPRINT',
    RegisteredCopyright = 'REGISTERED_COPYRIGHT',
    Report = 'REPORT',
    ResearchTechnique = 'RESEARCH_TECHNIQUE',
    ResearchTool = 'RESEARCH_TOOL',
    Software = 'SOFTWARE',
    SpinOffCompany = 'SPIN_OFF_COMPANY',
    StandardsAndPolicy = 'STANDARDS_AND_POLICY',
    SupervisedStudentPublication = 'SUPERVISED_STUDENT_PUBLICATION',
    TechnicalStandard = 'TECHNICAL_STANDARD',
    Test = 'TEST',
    Trademark = 'TRADEMARK',
    Translation = 'TRANSLATION',
    Website = 'WEBSITE',
    WorkingPaper = 'WORKING_PAPER',
    Undefined = 'UNDEFINED'
}
/**
    * @export
    * @enum {string}
    */
export enum WorkV30Rc2LanguageCodeEnum {
    Ab = 'ab',
    Aa = 'aa',
    Af = 'af',
    Ak = 'ak',
    Sq = 'sq',
    Am = 'am',
    Ar = 'ar',
    An = 'an',
    Hy = 'hy',
    As = 'as',
    Av = 'av',
    Ae = 'ae',
    Ay = 'ay',
    Az = 'az',
    Bm = 'bm',
    Ba = 'ba',
    Eu = 'eu',
    Be = 'be',
    Bn = 'bn',
    Bh = 'bh',
    Bi = 'bi',
    Bs = 'bs',
    Br = 'br',
    Bg = 'bg',
    My = 'my',
    Ca = 'ca',
    Ch = 'ch',
    Ce = 'ce',
    ZhCn = 'zh_CN',
    ZhTw = 'zh_TW',
    Cu = 'cu',
    Cv = 'cv',
    Kw = 'kw',
    Co = 'co',
    Cr = 'cr',
    Hr = 'hr',
    Cs = 'cs',
    Da = 'da',
    Dv = 'dv',
    Nl = 'nl',
    Dz = 'dz',
    En = 'en',
    Eo = 'eo',
    Et = 'et',
    Ee = 'ee',
    Fo = 'fo',
    Fj = 'fj',
    Fi = 'fi',
    Fr = 'fr',
    Fy = 'fy',
    Ff = 'ff',
    Gl = 'gl',
    Lg = 'lg',
    Ka = 'ka',
    De = 'de',
    El = 'el',
    Kl = 'kl',
    Gn = 'gn',
    Gu = 'gu',
    Ht = 'ht',
    Ha = 'ha',
    Iw = 'iw',
    Hz = 'hz',
    Hi = 'hi',
    Ho = 'ho',
    Hu = 'hu',
    Is = 'is',
    Io = 'io',
    Ig = 'ig',
    In = 'in',
    Ia = 'ia',
    Ie = 'ie',
    Iu = 'iu',
    Ik = 'ik',
    Ga = 'ga',
    It = 'it',
    Ja = 'ja',
    Jv = 'jv',
    Kn = 'kn',
    Kr = 'kr',
    Ks = 'ks',
    Kk = 'kk',
    Km = 'km',
    Ki = 'ki',
    Rw = 'rw',
    Ky = 'ky',
    Kv = 'kv',
    Kg = 'kg',
    Ko = 'ko',
    Ku = 'ku',
    Kj = 'kj',
    Lo = 'lo',
    La = 'la',
    Lv = 'lv',
    Li = 'li',
    Ln = 'ln',
    Lt = 'lt',
    Lu = 'lu',
    Lb = 'lb',
    Mk = 'mk',
    Mg = 'mg',
    Ms = 'ms',
    Ml = 'ml',
    Mt = 'mt',
    Gv = 'gv',
    Mi = 'mi',
    Mr = 'mr',
    Mh = 'mh',
    Mo = 'mo',
    Mn = 'mn',
    Na = 'na',
    Nv = 'nv',
    Ng = 'ng',
    Ne = 'ne',
    Nd = 'nd',
    Se = 'se',
    No = 'no',
    Nb = 'nb',
    Nn = 'nn',
    Ny = 'ny',
    Oc = 'oc',
    Oj = 'oj',
    Or = 'or',
    Om = 'om',
    Os = 'os',
    Pi = 'pi',
    Pa = 'pa',
    Fa = 'fa',
    Pl = 'pl',
    Pt = 'pt',
    Ps = 'ps',
    Qu = 'qu',
    Rm = 'rm',
    Ro = 'ro',
    Rn = 'rn',
    Ru = 'ru',
    Sm = 'sm',
    Sg = 'sg',
    Sa = 'sa',
    Sc = 'sc',
    Gd = 'gd',
    Sr = 'sr',
    Sn = 'sn',
    Ii = 'ii',
    Sd = 'sd',
    Si = 'si',
    Sk = 'sk',
    Sl = 'sl',
    So = 'so',
    Nr = 'nr',
    St = 'st',
    Es = 'es',
    Su = 'su',
    Sw = 'sw',
    Ss = 'ss',
    Sv = 'sv',
    Tl = 'tl',
    Ty = 'ty',
    Tg = 'tg',
    Ta = 'ta',
    Tt = 'tt',
    Te = 'te',
    Th = 'th',
    Bo = 'bo',
    Ti = 'ti',
    To = 'to',
    Ts = 'ts',
    Tn = 'tn',
    Tr = 'tr',
    Tk = 'tk',
    Tw = 'tw',
    Ug = 'ug',
    Uk = 'uk',
    Ur = 'ur',
    Uz = 'uz',
    Ve = 've',
    Vi = 'vi',
    Vo = 'vo',
    Wa = 'wa',
    Cy = 'cy',
    Wo = 'wo',
    Xh = 'xh',
    Ji = 'ji',
    Yo = 'yo',
    Za = 'za',
    Zu = 'zu'
}
/**
    * @export
    * @enum {string}
    */
export enum WorkV30Rc2VisibilityEnum {
    Limited = 'LIMITED',
    RegisteredOnly = 'REGISTERED_ONLY',
    Public = 'PUBLIC',
    Private = 'PRIVATE'
}

/**
 *
 * @export
 * @interface WorksSummaryV20
 */
export interface WorksSummaryV20 {
    /**
     *
     * @type {LastModifiedDateV20}
     * @memberof WorksSummaryV20
     */
    lastModifiedDate?: LastModifiedDateV20;
    /**
     *
     * @type {Array<WorkGroupV20>}
     * @memberof WorksSummaryV20
     */
    group?: Array<WorkGroupV20>;
    /**
     *
     * @type {string}
     * @memberof WorksSummaryV20
     */
    path?: string;
}
/**
 *
 * @export
 * @interface WorksSummaryV30
 */
export interface WorksSummaryV30 {
    /**
     *
     * @type {LastModifiedDateV30}
     * @memberof WorksSummaryV30
     */
    lastModifiedDate?: LastModifiedDateV30;
    /**
     *
     * @type {Array<WorkGroupV30>}
     * @memberof WorksSummaryV30
     */
    group?: Array<WorkGroupV30>;
    /**
     *
     * @type {string}
     * @memberof WorksSummaryV30
     */
    path?: string;
}
/**
 *
 * @export
 * @interface WorksSummaryV30Rc1
 */
export interface WorksSummaryV30Rc1 {
    /**
     *
     * @type {LastModifiedDateV30Rc1}
     * @memberof WorksSummaryV30Rc1
     */
    lastModifiedDate?: LastModifiedDateV30Rc1;
    /**
     *
     * @type {Array<WorkGroupV30Rc1>}
     * @memberof WorksSummaryV30Rc1
     */
    group?: Array<WorkGroupV30Rc1>;
    /**
     *
     * @type {string}
     * @memberof WorksSummaryV30Rc1
     */
    path?: string;
}
/**
 *
 * @export
 * @interface WorksSummaryV30Rc2
 */
export interface WorksSummaryV30Rc2 {
    /**
     *
     * @type {LastModifiedDateV30Rc2}
     * @memberof WorksSummaryV30Rc2
     */
    lastModifiedDate?: LastModifiedDateV30Rc2;
    /**
     *
     * @type {Array<WorkGroupV30Rc2>}
     * @memberof WorksSummaryV30Rc2
     */
    group?: Array<WorkGroupV30Rc2>;
    /**
     *
     * @type {string}
     * @memberof WorksSummaryV30Rc2
     */
    path?: string;
}
/**
 *
 * @export
 * @interface YearV20
 */
export interface YearV20 {
    /**
     *
     * @type {string}
     * @memberof YearV20
     */
    value?: string;
}
/**
 *
 * @export
 * @interface YearV30
 */
export interface YearV30 {
    /**
     *
     * @type {string}
     * @memberof YearV30
     */
    value?: string;
}
/**
 *
 * @export
 * @interface YearV30Rc1
 */
export interface YearV30Rc1 {
    /**
     *
     * @type {string}
     * @memberof YearV30Rc1
     */
    value?: string;
}
/**
 *
 * @export
 * @interface YearV30Rc2
 */
export interface YearV30Rc2 {
    /**
     *
     * @type {string}
     * @memberof YearV30Rc2
     */
    value?: string;
}

/**
 * DevelopmentPublicAPIV30Api - axios parameter creator
 * @export
 */
export const DevelopmentPublicAPIV30ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Search records
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchByQueryv3: async (q?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3.0/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Search records
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchByQueryv3_1: async (q?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3.0/csv-search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Search records
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchByQueryv3_2: async (q?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3.0/expanded-search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all Activities
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewActivitiesv3: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewActivitiesv3', 'orcid', orcid)
            const localVarPath = `/v3.0/{orcid}/activities`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all addresses
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAddressesv3: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewAddressesv3', 'orcid', orcid)
            const localVarPath = `/v3.0/{orcid}/address`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an address
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAddressv3: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewAddressv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewAddressv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/address/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get biography details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewBiographyv3: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewBiographyv3', 'orcid', orcid)
            const localVarPath = `/v3.0/{orcid}/biography`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch client details
         * @param {string} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewClientv3: async (clientId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('viewClientv3', 'clientId', clientId)
            const localVarPath = `/v3.0/client/{client_id}`
                .replace(`{${"client_id"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Distinction summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewDistinctionSummaryv3: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewDistinctionSummaryv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewDistinctionSummaryv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/distinction/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all distinctions
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewDistinctionsv3: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewDistinctionsv3', 'orcid', orcid)
            const localVarPath = `/v3.0/{orcid}/distinctions`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Distinction
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewDistinctionv3: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewDistinctionv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewDistinctionv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/distinction/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Education Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationSummaryv3: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEducationSummaryv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewEducationSummaryv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/education/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all educations
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationsv3: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEducationsv3', 'orcid', orcid)
            const localVarPath = `/v3.0/{orcid}/educations`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Education
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationv3: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEducationv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewEducationv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/education/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all emails for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmailsv3: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEmailsv3', 'orcid', orcid)
            const localVarPath = `/v3.0/{orcid}/email`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Employment Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentSummaryv3: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEmploymentSummaryv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewEmploymentSummaryv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/employment/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all employments
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentsv3: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEmploymentsv3', 'orcid', orcid)
            const localVarPath = `/v3.0/{orcid}/employments`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrive a specific education representation
         * @summary Fetch an Employment
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentv3: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEmploymentv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewEmploymentv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/employment/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch external identifiers
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewExternalIdentifiersv3: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewExternalIdentifiersv3', 'orcid', orcid)
            const localVarPath = `/v3.0/{orcid}/external-identifiers`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication orcid_two_legs required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "orcid_two_legs", ["/read-public"], configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch external identifier
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewExternalIdentifierv3: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewExternalIdentifierv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewExternalIdentifierv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/external-identifiers/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Funding Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingSummaryv3: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewFundingSummaryv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewFundingSummaryv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/funding/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all fundings
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingsv3: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewFundingsv3', 'orcid', orcid)
            const localVarPath = `/v3.0/{orcid}/fundings`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Funding
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingv3: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewFundingv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewFundingv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/funding/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an InvitedPosition summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewInvitedPositionSummaryv3: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewInvitedPositionSummaryv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewInvitedPositionSummaryv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/invited-position/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all invitedPositions
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewInvitedPositionsv3: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewInvitedPositionsv3', 'orcid', orcid)
            const localVarPath = `/v3.0/{orcid}/invited-positions`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an InvitedPosition
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewInvitedPositionv3: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewInvitedPositionv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewInvitedPositionv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/invited-position/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch keywords
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewKeywordsv3: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewKeywordsv3', 'orcid', orcid)
            const localVarPath = `/v3.0/{orcid}/keywords`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch keyword
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewKeywordv3: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewKeywordv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewKeywordv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/keywords/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Membership summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMembershipSummaryv3: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewMembershipSummaryv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewMembershipSummaryv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/membership/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all memberships
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMembershipsv3: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewMembershipsv3', 'orcid', orcid)
            const localVarPath = `/v3.0/{orcid}/memberships`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Membership
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMembershipv3: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewMembershipv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewMembershipv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/membership/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch Other names
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewOtherNamesv3: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewOtherNamesv3', 'orcid', orcid)
            const localVarPath = `/v3.0/{orcid}/other-names`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch Other name
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewOtherNamev3: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewOtherNamev3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewOtherNamev3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/other-names/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Peer Review Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewSummaryv3: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPeerReviewSummaryv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewPeerReviewSummaryv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/peer-review/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all peer reviews
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewsv3: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPeerReviewsv3', 'orcid', orcid)
            const localVarPath = `/v3.0/{orcid}/peer-reviews`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Peer Review
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewv3: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPeerReviewv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewPeerReviewv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/peer-review/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch personal details for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPersonalDetailsv3: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPersonalDetailsv3', 'orcid', orcid)
            const localVarPath = `/v3.0/{orcid}/personal-details`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch person details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPersonv3: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPersonv3', 'orcid', orcid)
            const localVarPath = `/v3.0/{orcid}/person`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Qualification summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewQualificationSummaryv3: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewQualificationSummaryv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewQualificationSummaryv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/qualification/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all qualifications
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewQualificationsv3: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewQualificationsv3', 'orcid', orcid)
            const localVarPath = `/v3.0/{orcid}/qualifications`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Qualification
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewQualificationv3: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewQualificationv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewQualificationv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/qualification/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch record details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewRecordv3: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewRecordv3', 'orcid', orcid)
            const localVarPath = `/v3.0/{orcid}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Research Resource summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearchResourceSummaryv3: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewResearchResourceSummaryv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewResearchResourceSummaryv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/research-resource/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all Research Resources
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearchResourcesv3: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewResearchResourcesv3', 'orcid', orcid)
            const localVarPath = `/v3.0/{orcid}/research-resources`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Research Resource
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearchResourcev3: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewResearchResourcev3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewResearchResourcev3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/research-resource/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all researcher urls for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearcherUrlsv3: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewResearcherUrlsv3', 'orcid', orcid)
            const localVarPath = `/v3.0/{orcid}/researcher-urls`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch one researcher url for an ORCID ID
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearcherUrlv3: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewResearcherUrlv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewResearcherUrlv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/researcher-urls/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Service summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewServiceSummaryv3: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewServiceSummaryv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewServiceSummaryv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/service/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all services
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewServicesv3: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewServicesv3', 'orcid', orcid)
            const localVarPath = `/v3.0/{orcid}/services`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Service
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewServicev3: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewServicev3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewServicev3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/service/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch specified works
         * @param {string} orcid
         * @param {string} putCodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewSpecifiedWorksv3: async (orcid: string, putCodes: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewSpecifiedWorksv3', 'orcid', orcid)
            // verify required parameter 'putCodes' is not null or undefined
            assertParamExists('viewSpecifiedWorksv3', 'putCodes', putCodes)
            const localVarPath = `/v3.0/{orcid}/works/{putCodes}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCodes"}}`, encodeURIComponent(String(putCodes)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewStatusJson: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3.0/pubStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Check the server status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewStatusTextv3: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3.0/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Work Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorkSummaryv3: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewWorkSummaryv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewWorkSummaryv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/work/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all works
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorksv3: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewWorksv3', 'orcid', orcid)
            const localVarPath = `/v3.0/{orcid}/works`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * More notes about this method
         * @summary Fetch a Work
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorkv3: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewWorkv3', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewWorkv3', 'putCode', putCode)
            const localVarPath = `/v3.0/{orcid}/work/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DevelopmentPublicAPIV30Api - functional programming interface
 * @export
 */
export const DevelopmentPublicAPIV30ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DevelopmentPublicAPIV30ApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Search records
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchByQueryv3(q?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchByQueryv3(q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Search records
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchByQueryv3_1(q?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchByQueryv3_1(q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Search records
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchByQueryv3_2(q?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchByQueryv3_2(q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all Activities
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewActivitiesv3(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActivitiesSummaryV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewActivitiesv3(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all addresses
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewAddressesv3(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewAddressesv3(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an address
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewAddressv3(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewAddressv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get biography details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewBiographyv3(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewBiographyv3(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch client details
         * @param {string} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewClientv3(clientId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewClientv3(clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Distinction summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewDistinctionSummaryv3(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistinctionSummaryV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewDistinctionSummaryv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all distinctions
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewDistinctionsv3(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistinctionsSummaryV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewDistinctionsv3(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Distinction
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewDistinctionv3(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistinctionV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewDistinctionv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Education Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEducationSummaryv3(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EducationSummaryV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEducationSummaryv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all educations
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEducationsv3(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EducationsSummaryV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEducationsv3(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Education
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEducationv3(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EducationV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEducationv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all emails for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEmailsv3(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEmailsv3(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Employment Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEmploymentSummaryv3(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentSummaryV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEmploymentSummaryv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all employments
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEmploymentsv3(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundingsV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEmploymentsv3(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrive a specific education representation
         * @summary Fetch an Employment
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEmploymentv3(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEmploymentv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch external identifiers
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewExternalIdentifiersv3(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewExternalIdentifiersv3(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch external identifier
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewExternalIdentifierv3(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewExternalIdentifierv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Funding Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewFundingSummaryv3(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundingSummaryV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewFundingSummaryv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all fundings
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewFundingsv3(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundingsV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewFundingsv3(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Funding
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewFundingv3(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundingV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewFundingv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an InvitedPosition summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewInvitedPositionSummaryv3(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitedPositionSummaryV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewInvitedPositionSummaryv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all invitedPositions
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewInvitedPositionsv3(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitedPositionsV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewInvitedPositionsv3(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an InvitedPosition
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewInvitedPositionv3(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitedPositionV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewInvitedPositionv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch keywords
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewKeywordsv3(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewKeywordsv3(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch keyword
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewKeywordv3(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewKeywordv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Membership summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewMembershipSummaryv3(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MembershipSummaryV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewMembershipSummaryv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all memberships
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewMembershipsv3(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MembershipsV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewMembershipsv3(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Membership
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewMembershipv3(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MembershipV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewMembershipv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch Other names
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewOtherNamesv3(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewOtherNamesv3(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch Other name
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewOtherNamev3(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewOtherNamev3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Peer Review Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPeerReviewSummaryv3(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeerReviewSummaryV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPeerReviewSummaryv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all peer reviews
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPeerReviewsv3(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeerReviewsV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPeerReviewsv3(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Peer Review
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPeerReviewv3(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeerReviewV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPeerReviewv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch personal details for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPersonalDetailsv3(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPersonalDetailsv3(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch person details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPersonv3(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPersonv3(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Qualification summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewQualificationSummaryv3(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QualificationSummaryV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewQualificationSummaryv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all qualifications
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewQualificationsv3(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QualificationsV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewQualificationsv3(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Qualification
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewQualificationv3(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QualificationV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewQualificationv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch record details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewRecordv3(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecordV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewRecordv3(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Research Resource summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewResearchResourceSummaryv3(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResearchResourceSummaryV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewResearchResourceSummaryv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all Research Resources
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewResearchResourcesv3(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResearchResourcesV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewResearchResourcesv3(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Research Resource
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewResearchResourcev3(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResearchResourceV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewResearchResourcev3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all researcher urls for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewResearcherUrlsv3(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewResearcherUrlsv3(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch one researcher url for an ORCID ID
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewResearcherUrlv3(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewResearcherUrlv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Service summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewServiceSummaryv3(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceSummaryV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewServiceSummaryv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all services
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewServicesv3(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicesV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewServicesv3(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Service
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewServicev3(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewServicev3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch specified works
         * @param {string} orcid
         * @param {string} putCodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewSpecifiedWorksv3(orcid: string, putCodes: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkBulkV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewSpecifiedWorksv3(orcid, putCodes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewStatusJson(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewStatusJson(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Check the server status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewStatusTextv3(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewStatusTextv3(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Work Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewWorkSummaryv3(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkSummaryV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewWorkSummaryv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all works
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewWorksv3(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorksSummaryV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewWorksv3(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * More notes about this method
         * @summary Fetch a Work
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewWorkv3(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkV30>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewWorkv3(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DevelopmentPublicAPIV30Api - factory interface
 * @export
 */
export const DevelopmentPublicAPIV30ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DevelopmentPublicAPIV30ApiFp(configuration)
    return {
        /**
         *
         * @summary Search records
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchByQueryv3(q?: string, options?: any): AxiosPromise<void> {
            return localVarFp.searchByQueryv3(q, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Search records
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchByQueryv3_1(q?: string, options?: any): AxiosPromise<void> {
            return localVarFp.searchByQueryv3_1(q, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Search records
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchByQueryv3_2(q?: string, options?: any): AxiosPromise<void> {
            return localVarFp.searchByQueryv3_2(q, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all Activities
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewActivitiesv3(orcid: string, options?: any): AxiosPromise<ActivitiesSummaryV30> {
            return localVarFp.viewActivitiesv3(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all addresses
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAddressesv3(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewAddressesv3(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an address
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAddressv3(orcid: string, putCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewAddressv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get biography details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewBiographyv3(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewBiographyv3(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch client details
         * @param {string} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewClientv3(clientId: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewClientv3(clientId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Distinction summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewDistinctionSummaryv3(orcid: string, putCode: string, options?: any): AxiosPromise<DistinctionSummaryV30> {
            return localVarFp.viewDistinctionSummaryv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all distinctions
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewDistinctionsv3(orcid: string, options?: any): AxiosPromise<DistinctionsSummaryV30> {
            return localVarFp.viewDistinctionsv3(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Distinction
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewDistinctionv3(orcid: string, putCode: string, options?: any): AxiosPromise<DistinctionV30> {
            return localVarFp.viewDistinctionv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Education Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationSummaryv3(orcid: string, putCode: number, options?: any): AxiosPromise<EducationSummaryV30> {
            return localVarFp.viewEducationSummaryv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all educations
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationsv3(orcid: string, options?: any): AxiosPromise<EducationsSummaryV30> {
            return localVarFp.viewEducationsv3(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Education
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationv3(orcid: string, putCode: number, options?: any): AxiosPromise<EducationV30> {
            return localVarFp.viewEducationv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all emails for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmailsv3(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewEmailsv3(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Employment Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentSummaryv3(orcid: string, putCode: number, options?: any): AxiosPromise<EmploymentSummaryV30> {
            return localVarFp.viewEmploymentSummaryv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all employments
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentsv3(orcid: string, options?: any): AxiosPromise<FundingsV30> {
            return localVarFp.viewEmploymentsv3(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrive a specific education representation
         * @summary Fetch an Employment
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentv3(orcid: string, putCode: number, options?: any): AxiosPromise<EmploymentV30> {
            return localVarFp.viewEmploymentv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch external identifiers
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewExternalIdentifiersv3(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewExternalIdentifiersv3(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch external identifier
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewExternalIdentifierv3(orcid: string, putCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewExternalIdentifierv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Funding Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingSummaryv3(orcid: string, putCode: number, options?: any): AxiosPromise<FundingSummaryV30> {
            return localVarFp.viewFundingSummaryv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all fundings
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingsv3(orcid: string, options?: any): AxiosPromise<FundingsV30> {
            return localVarFp.viewFundingsv3(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Funding
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingv3(orcid: string, putCode: number, options?: any): AxiosPromise<FundingV30> {
            return localVarFp.viewFundingv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an InvitedPosition summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewInvitedPositionSummaryv3(orcid: string, putCode: string, options?: any): AxiosPromise<InvitedPositionSummaryV30> {
            return localVarFp.viewInvitedPositionSummaryv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all invitedPositions
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewInvitedPositionsv3(orcid: string, options?: any): AxiosPromise<InvitedPositionsV30> {
            return localVarFp.viewInvitedPositionsv3(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an InvitedPosition
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewInvitedPositionv3(orcid: string, putCode: string, options?: any): AxiosPromise<InvitedPositionV30> {
            return localVarFp.viewInvitedPositionv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch keywords
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewKeywordsv3(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewKeywordsv3(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch keyword
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewKeywordv3(orcid: string, putCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewKeywordv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Membership summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMembershipSummaryv3(orcid: string, putCode: string, options?: any): AxiosPromise<MembershipSummaryV30> {
            return localVarFp.viewMembershipSummaryv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all memberships
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMembershipsv3(orcid: string, options?: any): AxiosPromise<MembershipsV30> {
            return localVarFp.viewMembershipsv3(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Membership
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMembershipv3(orcid: string, putCode: string, options?: any): AxiosPromise<MembershipV30> {
            return localVarFp.viewMembershipv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch Other names
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewOtherNamesv3(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewOtherNamesv3(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch Other name
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewOtherNamev3(orcid: string, putCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewOtherNamev3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Peer Review Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewSummaryv3(orcid: string, putCode: number, options?: any): AxiosPromise<PeerReviewSummaryV30> {
            return localVarFp.viewPeerReviewSummaryv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all peer reviews
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewsv3(orcid: string, options?: any): AxiosPromise<PeerReviewsV30> {
            return localVarFp.viewPeerReviewsv3(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Peer Review
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewv3(orcid: string, putCode: number, options?: any): AxiosPromise<PeerReviewV30> {
            return localVarFp.viewPeerReviewv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch personal details for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPersonalDetailsv3(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewPersonalDetailsv3(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch person details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPersonv3(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewPersonv3(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Qualification summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewQualificationSummaryv3(orcid: string, putCode: string, options?: any): AxiosPromise<QualificationSummaryV30> {
            return localVarFp.viewQualificationSummaryv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all qualifications
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewQualificationsv3(orcid: string, options?: any): AxiosPromise<QualificationsV30> {
            return localVarFp.viewQualificationsv3(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Qualification
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewQualificationv3(orcid: string, putCode: string, options?: any): AxiosPromise<QualificationV30> {
            return localVarFp.viewQualificationv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch record details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewRecordv3(orcid: string, options?: any): AxiosPromise<RecordV30> {
            return localVarFp.viewRecordv3(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Research Resource summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearchResourceSummaryv3(orcid: string, putCode: string, options?: any): AxiosPromise<ResearchResourceSummaryV30> {
            return localVarFp.viewResearchResourceSummaryv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all Research Resources
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearchResourcesv3(orcid: string, options?: any): AxiosPromise<ResearchResourcesV30> {
            return localVarFp.viewResearchResourcesv3(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Research Resource
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearchResourcev3(orcid: string, putCode: string, options?: any): AxiosPromise<ResearchResourceV30> {
            return localVarFp.viewResearchResourcev3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all researcher urls for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearcherUrlsv3(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewResearcherUrlsv3(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch one researcher url for an ORCID ID
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearcherUrlv3(orcid: string, putCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewResearcherUrlv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Service summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewServiceSummaryv3(orcid: string, putCode: string, options?: any): AxiosPromise<ServiceSummaryV30> {
            return localVarFp.viewServiceSummaryv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all services
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewServicesv3(orcid: string, options?: any): AxiosPromise<ServicesV30> {
            return localVarFp.viewServicesv3(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Service
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewServicev3(orcid: string, putCode: string, options?: any): AxiosPromise<ServiceV30> {
            return localVarFp.viewServicev3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch specified works
         * @param {string} orcid
         * @param {string} putCodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewSpecifiedWorksv3(orcid: string, putCodes: string, options?: any): AxiosPromise<WorkBulkV30> {
            return localVarFp.viewSpecifiedWorksv3(orcid, putCodes, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewStatusJson(options?: any): AxiosPromise<void> {
            return localVarFp.viewStatusJson(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Check the server status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewStatusTextv3(options?: any): AxiosPromise<string> {
            return localVarFp.viewStatusTextv3(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Work Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorkSummaryv3(orcid: string, putCode: number, options?: any): AxiosPromise<WorkSummaryV30> {
            return localVarFp.viewWorkSummaryv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all works
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorksv3(orcid: string, options?: any): AxiosPromise<WorksSummaryV30> {
            return localVarFp.viewWorksv3(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         * More notes about this method
         * @summary Fetch a Work
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorkv3(orcid: string, putCode: number, options?: any): AxiosPromise<WorkV30> {
            return localVarFp.viewWorkv3(orcid, putCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DevelopmentPublicAPIV30Api - object-oriented interface
 * @export
 * @class DevelopmentPublicAPIV30Api
 * @extends {BaseAPI}
 */
export class DevelopmentPublicAPIV30Api extends BaseAPI {
    /**
     *
     * @summary Search records
     * @param {string} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public searchByQueryv3(q?: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).searchByQueryv3(q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Search records
     * @param {string} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public searchByQueryv3_1(q?: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).searchByQueryv3_1(q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Search records
     * @param {string} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public searchByQueryv3_2(q?: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).searchByQueryv3_2(q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all Activities
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewActivitiesv3(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewActivitiesv3(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all addresses
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewAddressesv3(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewAddressesv3(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an address
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewAddressv3(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewAddressv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get biography details
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewBiographyv3(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewBiographyv3(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch client details
     * @param {string} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewClientv3(clientId: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewClientv3(clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Distinction summary
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewDistinctionSummaryv3(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewDistinctionSummaryv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all distinctions
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewDistinctionsv3(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewDistinctionsv3(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Distinction
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewDistinctionv3(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewDistinctionv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Education Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewEducationSummaryv3(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewEducationSummaryv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all educations
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewEducationsv3(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewEducationsv3(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Education
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewEducationv3(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewEducationv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all emails for an ORCID ID
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewEmailsv3(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewEmailsv3(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Employment Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewEmploymentSummaryv3(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewEmploymentSummaryv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all employments
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewEmploymentsv3(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewEmploymentsv3(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrive a specific education representation
     * @summary Fetch an Employment
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewEmploymentv3(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewEmploymentv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch external identifiers
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewExternalIdentifiersv3(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewExternalIdentifiersv3(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch external identifier
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewExternalIdentifierv3(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewExternalIdentifierv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Funding Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewFundingSummaryv3(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewFundingSummaryv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all fundings
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewFundingsv3(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewFundingsv3(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Funding
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewFundingv3(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewFundingv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an InvitedPosition summary
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewInvitedPositionSummaryv3(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewInvitedPositionSummaryv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all invitedPositions
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewInvitedPositionsv3(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewInvitedPositionsv3(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an InvitedPosition
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewInvitedPositionv3(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewInvitedPositionv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch keywords
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewKeywordsv3(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewKeywordsv3(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch keyword
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewKeywordv3(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewKeywordv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Membership summary
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewMembershipSummaryv3(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewMembershipSummaryv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all memberships
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewMembershipsv3(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewMembershipsv3(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Membership
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewMembershipv3(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewMembershipv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch Other names
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewOtherNamesv3(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewOtherNamesv3(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch Other name
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewOtherNamev3(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewOtherNamev3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Peer Review Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewPeerReviewSummaryv3(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewPeerReviewSummaryv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all peer reviews
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewPeerReviewsv3(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewPeerReviewsv3(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Peer Review
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewPeerReviewv3(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewPeerReviewv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch personal details for an ORCID ID
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewPersonalDetailsv3(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewPersonalDetailsv3(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch person details
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewPersonv3(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewPersonv3(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Qualification summary
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewQualificationSummaryv3(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewQualificationSummaryv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all qualifications
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewQualificationsv3(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewQualificationsv3(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Qualification
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewQualificationv3(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewQualificationv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch record details
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewRecordv3(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewRecordv3(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Research Resource summary
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewResearchResourceSummaryv3(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewResearchResourceSummaryv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all Research Resources
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewResearchResourcesv3(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewResearchResourcesv3(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Research Resource
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewResearchResourcev3(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewResearchResourcev3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all researcher urls for an ORCID ID
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewResearcherUrlsv3(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewResearcherUrlsv3(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch one researcher url for an ORCID ID
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewResearcherUrlv3(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewResearcherUrlv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Service summary
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewServiceSummaryv3(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewServiceSummaryv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all services
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewServicesv3(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewServicesv3(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Service
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewServicev3(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewServicev3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch specified works
     * @param {string} orcid
     * @param {string} putCodes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewSpecifiedWorksv3(orcid: string, putCodes: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewSpecifiedWorksv3(orcid, putCodes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewStatusJson(options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewStatusJson(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Check the server status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewStatusTextv3(options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewStatusTextv3(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Work Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewWorkSummaryv3(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewWorkSummaryv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all works
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewWorksv3(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewWorksv3(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * More notes about this method
     * @summary Fetch a Work
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Api
     */
    public viewWorkv3(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30ApiFp(this.configuration).viewWorkv3(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DevelopmentPublicAPIV30Rc1Api - axios parameter creator
 * @export
 */
export const DevelopmentPublicAPIV30Rc1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Search records
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchByQueryV3Rc1: async (q?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3.0_rc1/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all Activities
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewActivitiesV3Rc1: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewActivitiesV3Rc1', 'orcid', orcid)
            const localVarPath = `/v3.0_rc1/{orcid}/activities`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an address
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAddressV3Rc1: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewAddressV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewAddressV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/address/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all addresses
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAddressesV3Rc1: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewAddressesV3Rc1', 'orcid', orcid)
            const localVarPath = `/v3.0_rc1/{orcid}/address`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get biography details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewBiographyV3Rc1: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewBiographyV3Rc1', 'orcid', orcid)
            const localVarPath = `/v3.0_rc1/{orcid}/biography`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch client details
         * @param {string} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewClientV3Rc1: async (clientId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('viewClientV3Rc1', 'clientId', clientId)
            const localVarPath = `/v3.0_rc1/client/{client_id}`
                .replace(`{${"client_id"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Distinction summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewDistinctionSummaryV3Rc1: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewDistinctionSummaryV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewDistinctionSummaryV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/distinction/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Distinction
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewDistinctionV3Rc1: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewDistinctionV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewDistinctionV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/distinction/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all distinctions
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewDistinctionsV3Rc1: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewDistinctionsV3Rc1', 'orcid', orcid)
            const localVarPath = `/v3.0_rc1/{orcid}/distinctions`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Education Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationSummaryV3Rc1: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEducationSummaryV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewEducationSummaryV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/education/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Education
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationV3Rc1: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEducationV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewEducationV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/education/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all educations
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationsV3Rc1: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEducationsV3Rc1', 'orcid', orcid)
            const localVarPath = `/v3.0_rc1/{orcid}/educations`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all emails for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmailsV3Rc1: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEmailsV3Rc1', 'orcid', orcid)
            const localVarPath = `/v3.0_rc1/{orcid}/email`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Employment Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentSummaryV3Rc1: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEmploymentSummaryV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewEmploymentSummaryV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/employment/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrive a specific education representation
         * @summary Fetch an Employment
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentV3Rc1: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEmploymentV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewEmploymentV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/employment/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all employments
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentsV3Rc1: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEmploymentsV3Rc1', 'orcid', orcid)
            const localVarPath = `/v3.0_rc1/{orcid}/employments`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch external identifier
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewExternalIdentifierV3Rc1: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewExternalIdentifierV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewExternalIdentifierV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/external-identifiers/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch external identifiers
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewExternalIdentifiersV3Rc1: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewExternalIdentifiersV3Rc1', 'orcid', orcid)
            const localVarPath = `/v3.0_rc1/{orcid}/external-identifiers`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication orcid_two_legs required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "orcid_two_legs", ["/read-public"], configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Funding Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingSummaryV3Rc1: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewFundingSummaryV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewFundingSummaryV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/funding/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Funding
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingV3Rc1: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewFundingV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewFundingV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/funding/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all fundings
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingsV3Rc1: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewFundingsV3Rc1', 'orcid', orcid)
            const localVarPath = `/v3.0_rc1/{orcid}/fundings`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an InvitedPosition summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewInvitedPositionSummaryV3Rc1: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewInvitedPositionSummaryV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewInvitedPositionSummaryV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/invited-position/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an InvitedPosition
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewInvitedPositionV3Rc1: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewInvitedPositionV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewInvitedPositionV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/invited-position/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all invitedPositions
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewInvitedPositionsV3Rc1: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewInvitedPositionsV3Rc1', 'orcid', orcid)
            const localVarPath = `/v3.0_rc1/{orcid}/invited-positions`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch keyword
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewKeywordV3Rc1: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewKeywordV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewKeywordV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/keywords/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch keywords
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewKeywordsV3Rc1: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewKeywordsV3Rc1', 'orcid', orcid)
            const localVarPath = `/v3.0_rc1/{orcid}/keywords`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Membership summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMembershipSummaryV3Rc1: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewMembershipSummaryV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewMembershipSummaryV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/membership/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Membership
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMembershipV3Rc1: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewMembershipV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewMembershipV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/membership/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all memberships
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMembershipsV3Rc1: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewMembershipsV3Rc1', 'orcid', orcid)
            const localVarPath = `/v3.0_rc1/{orcid}/memberships`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch Other name
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewOtherNameV3Rc1: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewOtherNameV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewOtherNameV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/other-names/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch Other names
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewOtherNamesV3Rc1: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewOtherNamesV3Rc1', 'orcid', orcid)
            const localVarPath = `/v3.0_rc1/{orcid}/other-names`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Peer Review Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewSummaryV3Rc1: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPeerReviewSummaryV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewPeerReviewSummaryV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/peer-review/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Peer Review
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewV3Rc1: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPeerReviewV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewPeerReviewV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/peer-review/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all peer reviews
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewsV3Rc1: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPeerReviewsV3Rc1', 'orcid', orcid)
            const localVarPath = `/v3.0_rc1/{orcid}/peer-reviews`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch person details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPersonV3Rc1: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPersonV3Rc1', 'orcid', orcid)
            const localVarPath = `/v3.0_rc1/{orcid}/person`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch personal details for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPersonalDetailsV3Rc1: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPersonalDetailsV3Rc1', 'orcid', orcid)
            const localVarPath = `/v3.0_rc1/{orcid}/personal-details`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Qualification summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewQualificationSummaryV3Rc1: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewQualificationSummaryV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewQualificationSummaryV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/qualification/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Qualification
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewQualificationV3Rc1: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewQualificationV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewQualificationV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/qualification/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all qualifications
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewQualificationsV3Rc1: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewQualificationsV3Rc1', 'orcid', orcid)
            const localVarPath = `/v3.0_rc1/{orcid}/qualifications`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch record details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewRecordV3Rc1: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewRecordV3Rc1', 'orcid', orcid)
            const localVarPath = `/v3.0_rc1/{orcid}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Research Resource summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearchResourceSummaryV3Rc1: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewResearchResourceSummaryV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewResearchResourceSummaryV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/research-resource/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Research Resource
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearchResourceV3Rc1: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewResearchResourceV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewResearchResourceV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/research-resource/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all Research Resources
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearchResourcesV3Rc1: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewResearchResourcesV3Rc1', 'orcid', orcid)
            const localVarPath = `/v3.0_rc1/{orcid}/research-resources`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch one researcher url for an ORCID ID
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearcherUrlV3Rc1: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewResearcherUrlV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewResearcherUrlV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/researcher-urls/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all researcher urls for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearcherUrlsV3Rc1: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewResearcherUrlsV3Rc1', 'orcid', orcid)
            const localVarPath = `/v3.0_rc1/{orcid}/researcher-urls`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Service summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewServiceSummaryV3Rc1: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewServiceSummaryV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewServiceSummaryV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/service/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Service
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewServiceV3Rc1: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewServiceV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewServiceV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/service/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all services
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewServicesV3Rc1: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewServicesV3Rc1', 'orcid', orcid)
            const localVarPath = `/v3.0_rc1/{orcid}/services`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch specified works
         * @param {string} orcid
         * @param {string} putCodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewSpecifiedWorksV3Rc1: async (orcid: string, putCodes: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewSpecifiedWorksV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCodes' is not null or undefined
            assertParamExists('viewSpecifiedWorksV3Rc1', 'putCodes', putCodes)
            const localVarPath = `/v3.0_rc1/{orcid}/works/{putCodes}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCodes"}}`, encodeURIComponent(String(putCodes)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewStatusJson: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3.0_rc1/pubStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Check the server status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewStatusTextV3Rc1: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3.0_rc1/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Work Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorkSummaryV3Rc1: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewWorkSummaryV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewWorkSummaryV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/work/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * More notes about this method
         * @summary Fetch a Work
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorkV3Rc1: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewWorkV3Rc1', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewWorkV3Rc1', 'putCode', putCode)
            const localVarPath = `/v3.0_rc1/{orcid}/work/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all works
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorksV3Rc1: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewWorksV3Rc1', 'orcid', orcid)
            const localVarPath = `/v3.0_rc1/{orcid}/works`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DevelopmentPublicAPIV30Rc1Api - functional programming interface
 * @export
 */
export const DevelopmentPublicAPIV30Rc1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DevelopmentPublicAPIV30Rc1ApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Search records
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchByQueryV3Rc1(q?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchByQueryV3Rc1(q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all Activities
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewActivitiesV3Rc1(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActivitiesSummaryV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewActivitiesV3Rc1(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an address
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewAddressV3Rc1(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewAddressV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all addresses
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewAddressesV3Rc1(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewAddressesV3Rc1(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get biography details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewBiographyV3Rc1(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewBiographyV3Rc1(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch client details
         * @param {string} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewClientV3Rc1(clientId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewClientV3Rc1(clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Distinction summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewDistinctionSummaryV3Rc1(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistinctionSummaryV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewDistinctionSummaryV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Distinction
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewDistinctionV3Rc1(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistinctionV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewDistinctionV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all distinctions
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewDistinctionsV3Rc1(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistinctionsV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewDistinctionsV3Rc1(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Education Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEducationSummaryV3Rc1(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EducationSummaryV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEducationSummaryV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Education
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEducationV3Rc1(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EducationV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEducationV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all educations
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEducationsV3Rc1(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EducationsSummaryV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEducationsV3Rc1(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all emails for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEmailsV3Rc1(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEmailsV3Rc1(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Employment Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEmploymentSummaryV3Rc1(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentSummaryV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEmploymentSummaryV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrive a specific education representation
         * @summary Fetch an Employment
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEmploymentV3Rc1(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEmploymentV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all employments
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEmploymentsV3Rc1(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundingsV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEmploymentsV3Rc1(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch external identifier
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewExternalIdentifierV3Rc1(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewExternalIdentifierV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch external identifiers
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewExternalIdentifiersV3Rc1(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewExternalIdentifiersV3Rc1(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Funding Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewFundingSummaryV3Rc1(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundingSummaryV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewFundingSummaryV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Funding
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewFundingV3Rc1(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundingV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewFundingV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all fundings
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewFundingsV3Rc1(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundingsV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewFundingsV3Rc1(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an InvitedPosition summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewInvitedPositionSummaryV3Rc1(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitedPositionSummaryV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewInvitedPositionSummaryV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an InvitedPosition
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewInvitedPositionV3Rc1(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitedPositionV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewInvitedPositionV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all invitedPositions
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewInvitedPositionsV3Rc1(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitedPositionsV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewInvitedPositionsV3Rc1(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch keyword
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewKeywordV3Rc1(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewKeywordV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch keywords
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewKeywordsV3Rc1(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewKeywordsV3Rc1(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Membership summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewMembershipSummaryV3Rc1(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MembershipSummaryV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewMembershipSummaryV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Membership
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewMembershipV3Rc1(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MembershipV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewMembershipV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all memberships
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewMembershipsV3Rc1(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MembershipsV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewMembershipsV3Rc1(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch Other name
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewOtherNameV3Rc1(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewOtherNameV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch Other names
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewOtherNamesV3Rc1(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewOtherNamesV3Rc1(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Peer Review Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPeerReviewSummaryV3Rc1(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeerReviewSummaryV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPeerReviewSummaryV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Peer Review
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPeerReviewV3Rc1(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeerReviewV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPeerReviewV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all peer reviews
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPeerReviewsV3Rc1(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeerReviewsV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPeerReviewsV3Rc1(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch person details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPersonV3Rc1(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPersonV3Rc1(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch personal details for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPersonalDetailsV3Rc1(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPersonalDetailsV3Rc1(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Qualification summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewQualificationSummaryV3Rc1(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QualificationSummaryV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewQualificationSummaryV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Qualification
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewQualificationV3Rc1(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QualificationV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewQualificationV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all qualifications
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewQualificationsV3Rc1(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QualificationsV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewQualificationsV3Rc1(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch record details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewRecordV3Rc1(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecordV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewRecordV3Rc1(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Research Resource summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewResearchResourceSummaryV3Rc1(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResearchResourceSummaryV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewResearchResourceSummaryV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Research Resource
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewResearchResourceV3Rc1(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResearchResourceV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewResearchResourceV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all Research Resources
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewResearchResourcesV3Rc1(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResearchResourcesV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewResearchResourcesV3Rc1(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch one researcher url for an ORCID ID
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewResearcherUrlV3Rc1(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewResearcherUrlV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all researcher urls for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewResearcherUrlsV3Rc1(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewResearcherUrlsV3Rc1(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Service summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewServiceSummaryV3Rc1(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceSummaryV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewServiceSummaryV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Service
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewServiceV3Rc1(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewServiceV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all services
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewServicesV3Rc1(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicesV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewServicesV3Rc1(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch specified works
         * @param {string} orcid
         * @param {string} putCodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewSpecifiedWorksV3Rc1(orcid: string, putCodes: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkBulkV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewSpecifiedWorksV3Rc1(orcid, putCodes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewStatusJson(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewStatusJson(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Check the server status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewStatusTextV3Rc1(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewStatusTextV3Rc1(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Work Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewWorkSummaryV3Rc1(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkSummaryV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewWorkSummaryV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * More notes about this method
         * @summary Fetch a Work
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewWorkV3Rc1(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewWorkV3Rc1(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all works
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewWorksV3Rc1(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorksSummaryV30Rc1>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewWorksV3Rc1(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DevelopmentPublicAPIV30Rc1Api - factory interface
 * @export
 */
export const DevelopmentPublicAPIV30Rc1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DevelopmentPublicAPIV30Rc1ApiFp(configuration)
    return {
        /**
         *
         * @summary Search records
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchByQueryV3Rc1(q?: string, options?: any): AxiosPromise<void> {
            return localVarFp.searchByQueryV3Rc1(q, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all Activities
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewActivitiesV3Rc1(orcid: string, options?: any): AxiosPromise<ActivitiesSummaryV30Rc1> {
            return localVarFp.viewActivitiesV3Rc1(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an address
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAddressV3Rc1(orcid: string, putCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewAddressV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all addresses
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAddressesV3Rc1(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewAddressesV3Rc1(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get biography details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewBiographyV3Rc1(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewBiographyV3Rc1(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch client details
         * @param {string} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewClientV3Rc1(clientId: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewClientV3Rc1(clientId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Distinction summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewDistinctionSummaryV3Rc1(orcid: string, putCode: string, options?: any): AxiosPromise<DistinctionSummaryV30Rc1> {
            return localVarFp.viewDistinctionSummaryV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Distinction
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewDistinctionV3Rc1(orcid: string, putCode: string, options?: any): AxiosPromise<DistinctionV30Rc1> {
            return localVarFp.viewDistinctionV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all distinctions
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewDistinctionsV3Rc1(orcid: string, options?: any): AxiosPromise<DistinctionsV30Rc1> {
            return localVarFp.viewDistinctionsV3Rc1(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Education Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationSummaryV3Rc1(orcid: string, putCode: number, options?: any): AxiosPromise<EducationSummaryV30Rc1> {
            return localVarFp.viewEducationSummaryV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Education
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationV3Rc1(orcid: string, putCode: number, options?: any): AxiosPromise<EducationV30Rc1> {
            return localVarFp.viewEducationV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all educations
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationsV3Rc1(orcid: string, options?: any): AxiosPromise<EducationsSummaryV30Rc1> {
            return localVarFp.viewEducationsV3Rc1(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all emails for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmailsV3Rc1(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewEmailsV3Rc1(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Employment Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentSummaryV3Rc1(orcid: string, putCode: number, options?: any): AxiosPromise<EmploymentSummaryV30Rc1> {
            return localVarFp.viewEmploymentSummaryV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrive a specific education representation
         * @summary Fetch an Employment
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentV3Rc1(orcid: string, putCode: number, options?: any): AxiosPromise<EmploymentV30Rc1> {
            return localVarFp.viewEmploymentV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all employments
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentsV3Rc1(orcid: string, options?: any): AxiosPromise<FundingsV30Rc1> {
            return localVarFp.viewEmploymentsV3Rc1(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch external identifier
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewExternalIdentifierV3Rc1(orcid: string, putCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewExternalIdentifierV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch external identifiers
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewExternalIdentifiersV3Rc1(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewExternalIdentifiersV3Rc1(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Funding Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingSummaryV3Rc1(orcid: string, putCode: number, options?: any): AxiosPromise<FundingSummaryV30Rc1> {
            return localVarFp.viewFundingSummaryV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Funding
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingV3Rc1(orcid: string, putCode: number, options?: any): AxiosPromise<FundingV30Rc1> {
            return localVarFp.viewFundingV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all fundings
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingsV3Rc1(orcid: string, options?: any): AxiosPromise<FundingsV30Rc1> {
            return localVarFp.viewFundingsV3Rc1(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an InvitedPosition summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewInvitedPositionSummaryV3Rc1(orcid: string, putCode: string, options?: any): AxiosPromise<InvitedPositionSummaryV30Rc1> {
            return localVarFp.viewInvitedPositionSummaryV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an InvitedPosition
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewInvitedPositionV3Rc1(orcid: string, putCode: string, options?: any): AxiosPromise<InvitedPositionV30Rc1> {
            return localVarFp.viewInvitedPositionV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all invitedPositions
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewInvitedPositionsV3Rc1(orcid: string, options?: any): AxiosPromise<InvitedPositionsV30Rc1> {
            return localVarFp.viewInvitedPositionsV3Rc1(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch keyword
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewKeywordV3Rc1(orcid: string, putCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewKeywordV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch keywords
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewKeywordsV3Rc1(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewKeywordsV3Rc1(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Membership summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMembershipSummaryV3Rc1(orcid: string, putCode: string, options?: any): AxiosPromise<MembershipSummaryV30Rc1> {
            return localVarFp.viewMembershipSummaryV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Membership
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMembershipV3Rc1(orcid: string, putCode: string, options?: any): AxiosPromise<MembershipV30Rc1> {
            return localVarFp.viewMembershipV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all memberships
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMembershipsV3Rc1(orcid: string, options?: any): AxiosPromise<MembershipsV30Rc1> {
            return localVarFp.viewMembershipsV3Rc1(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch Other name
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewOtherNameV3Rc1(orcid: string, putCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewOtherNameV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch Other names
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewOtherNamesV3Rc1(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewOtherNamesV3Rc1(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Peer Review Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewSummaryV3Rc1(orcid: string, putCode: number, options?: any): AxiosPromise<PeerReviewSummaryV30Rc1> {
            return localVarFp.viewPeerReviewSummaryV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Peer Review
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewV3Rc1(orcid: string, putCode: number, options?: any): AxiosPromise<PeerReviewV30Rc1> {
            return localVarFp.viewPeerReviewV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all peer reviews
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewsV3Rc1(orcid: string, options?: any): AxiosPromise<PeerReviewsV30Rc1> {
            return localVarFp.viewPeerReviewsV3Rc1(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch person details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPersonV3Rc1(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewPersonV3Rc1(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch personal details for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPersonalDetailsV3Rc1(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewPersonalDetailsV3Rc1(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Qualification summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewQualificationSummaryV3Rc1(orcid: string, putCode: string, options?: any): AxiosPromise<QualificationSummaryV30Rc1> {
            return localVarFp.viewQualificationSummaryV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Qualification
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewQualificationV3Rc1(orcid: string, putCode: string, options?: any): AxiosPromise<QualificationV30Rc1> {
            return localVarFp.viewQualificationV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all qualifications
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewQualificationsV3Rc1(orcid: string, options?: any): AxiosPromise<QualificationsV30Rc1> {
            return localVarFp.viewQualificationsV3Rc1(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch record details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewRecordV3Rc1(orcid: string, options?: any): AxiosPromise<RecordV30Rc1> {
            return localVarFp.viewRecordV3Rc1(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Research Resource summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearchResourceSummaryV3Rc1(orcid: string, putCode: string, options?: any): AxiosPromise<ResearchResourceSummaryV30Rc1> {
            return localVarFp.viewResearchResourceSummaryV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Research Resource
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearchResourceV3Rc1(orcid: string, putCode: string, options?: any): AxiosPromise<ResearchResourceV30Rc1> {
            return localVarFp.viewResearchResourceV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all Research Resources
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearchResourcesV3Rc1(orcid: string, options?: any): AxiosPromise<ResearchResourcesV30Rc1> {
            return localVarFp.viewResearchResourcesV3Rc1(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch one researcher url for an ORCID ID
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearcherUrlV3Rc1(orcid: string, putCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewResearcherUrlV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all researcher urls for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearcherUrlsV3Rc1(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewResearcherUrlsV3Rc1(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Service summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewServiceSummaryV3Rc1(orcid: string, putCode: string, options?: any): AxiosPromise<ServiceSummaryV30Rc1> {
            return localVarFp.viewServiceSummaryV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Service
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewServiceV3Rc1(orcid: string, putCode: string, options?: any): AxiosPromise<ServiceV30Rc1> {
            return localVarFp.viewServiceV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all services
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewServicesV3Rc1(orcid: string, options?: any): AxiosPromise<ServicesV30Rc1> {
            return localVarFp.viewServicesV3Rc1(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch specified works
         * @param {string} orcid
         * @param {string} putCodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewSpecifiedWorksV3Rc1(orcid: string, putCodes: string, options?: any): AxiosPromise<WorkBulkV30Rc1> {
            return localVarFp.viewSpecifiedWorksV3Rc1(orcid, putCodes, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewStatusJson(options?: any): AxiosPromise<void> {
            return localVarFp.viewStatusJson(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Check the server status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewStatusTextV3Rc1(options?: any): AxiosPromise<string> {
            return localVarFp.viewStatusTextV3Rc1(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Work Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorkSummaryV3Rc1(orcid: string, putCode: number, options?: any): AxiosPromise<WorkSummaryV30Rc1> {
            return localVarFp.viewWorkSummaryV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         * More notes about this method
         * @summary Fetch a Work
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorkV3Rc1(orcid: string, putCode: number, options?: any): AxiosPromise<WorkV30Rc1> {
            return localVarFp.viewWorkV3Rc1(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all works
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorksV3Rc1(orcid: string, options?: any): AxiosPromise<WorksSummaryV30Rc1> {
            return localVarFp.viewWorksV3Rc1(orcid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DevelopmentPublicAPIV30Rc1Api - object-oriented interface
 * @export
 * @class DevelopmentPublicAPIV30Rc1Api
 * @extends {BaseAPI}
 */
export class DevelopmentPublicAPIV30Rc1Api extends BaseAPI {
    /**
     *
     * @summary Search records
     * @param {string} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public searchByQueryV3Rc1(q?: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).searchByQueryV3Rc1(q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all Activities
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewActivitiesV3Rc1(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewActivitiesV3Rc1(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an address
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewAddressV3Rc1(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewAddressV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all addresses
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewAddressesV3Rc1(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewAddressesV3Rc1(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get biography details
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewBiographyV3Rc1(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewBiographyV3Rc1(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch client details
     * @param {string} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewClientV3Rc1(clientId: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewClientV3Rc1(clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Distinction summary
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewDistinctionSummaryV3Rc1(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewDistinctionSummaryV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Distinction
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewDistinctionV3Rc1(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewDistinctionV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all distinctions
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewDistinctionsV3Rc1(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewDistinctionsV3Rc1(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Education Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewEducationSummaryV3Rc1(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewEducationSummaryV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Education
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewEducationV3Rc1(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewEducationV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all educations
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewEducationsV3Rc1(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewEducationsV3Rc1(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all emails for an ORCID ID
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewEmailsV3Rc1(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewEmailsV3Rc1(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Employment Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewEmploymentSummaryV3Rc1(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewEmploymentSummaryV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrive a specific education representation
     * @summary Fetch an Employment
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewEmploymentV3Rc1(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewEmploymentV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all employments
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewEmploymentsV3Rc1(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewEmploymentsV3Rc1(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch external identifier
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewExternalIdentifierV3Rc1(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewExternalIdentifierV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch external identifiers
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewExternalIdentifiersV3Rc1(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewExternalIdentifiersV3Rc1(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Funding Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewFundingSummaryV3Rc1(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewFundingSummaryV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Funding
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewFundingV3Rc1(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewFundingV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all fundings
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewFundingsV3Rc1(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewFundingsV3Rc1(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an InvitedPosition summary
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewInvitedPositionSummaryV3Rc1(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewInvitedPositionSummaryV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an InvitedPosition
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewInvitedPositionV3Rc1(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewInvitedPositionV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all invitedPositions
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewInvitedPositionsV3Rc1(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewInvitedPositionsV3Rc1(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch keyword
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewKeywordV3Rc1(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewKeywordV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch keywords
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewKeywordsV3Rc1(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewKeywordsV3Rc1(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Membership summary
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewMembershipSummaryV3Rc1(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewMembershipSummaryV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Membership
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewMembershipV3Rc1(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewMembershipV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all memberships
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewMembershipsV3Rc1(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewMembershipsV3Rc1(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch Other name
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewOtherNameV3Rc1(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewOtherNameV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch Other names
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewOtherNamesV3Rc1(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewOtherNamesV3Rc1(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Peer Review Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewPeerReviewSummaryV3Rc1(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewPeerReviewSummaryV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Peer Review
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewPeerReviewV3Rc1(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewPeerReviewV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all peer reviews
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewPeerReviewsV3Rc1(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewPeerReviewsV3Rc1(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch person details
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewPersonV3Rc1(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewPersonV3Rc1(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch personal details for an ORCID ID
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewPersonalDetailsV3Rc1(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewPersonalDetailsV3Rc1(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Qualification summary
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewQualificationSummaryV3Rc1(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewQualificationSummaryV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Qualification
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewQualificationV3Rc1(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewQualificationV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all qualifications
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewQualificationsV3Rc1(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewQualificationsV3Rc1(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch record details
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewRecordV3Rc1(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewRecordV3Rc1(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Research Resource summary
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewResearchResourceSummaryV3Rc1(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewResearchResourceSummaryV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Research Resource
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewResearchResourceV3Rc1(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewResearchResourceV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all Research Resources
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewResearchResourcesV3Rc1(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewResearchResourcesV3Rc1(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch one researcher url for an ORCID ID
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewResearcherUrlV3Rc1(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewResearcherUrlV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all researcher urls for an ORCID ID
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewResearcherUrlsV3Rc1(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewResearcherUrlsV3Rc1(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Service summary
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewServiceSummaryV3Rc1(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewServiceSummaryV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Service
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewServiceV3Rc1(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewServiceV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all services
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewServicesV3Rc1(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewServicesV3Rc1(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch specified works
     * @param {string} orcid
     * @param {string} putCodes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewSpecifiedWorksV3Rc1(orcid: string, putCodes: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewSpecifiedWorksV3Rc1(orcid, putCodes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewStatusJson(options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewStatusJson(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Check the server status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewStatusTextV3Rc1(options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewStatusTextV3Rc1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Work Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewWorkSummaryV3Rc1(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewWorkSummaryV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * More notes about this method
     * @summary Fetch a Work
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewWorkV3Rc1(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewWorkV3Rc1(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all works
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc1Api
     */
    public viewWorksV3Rc1(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc1ApiFp(this.configuration).viewWorksV3Rc1(orcid, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DevelopmentPublicAPIV30Rc2Api - axios parameter creator
 * @export
 */
export const DevelopmentPublicAPIV30Rc2ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Search records
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchByQueryv3Rc2: async (q?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3.0_rc2/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all Activities
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewActivitiesv3Rc2: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewActivitiesv3Rc2', 'orcid', orcid)
            const localVarPath = `/v3.0_rc2/{orcid}/activities`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all addresses
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAddressesv3Rc2: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewAddressesv3Rc2', 'orcid', orcid)
            const localVarPath = `/v3.0_rc2/{orcid}/address`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an address
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAddressv3Rc2: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewAddressv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewAddressv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/address/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get biography details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewBiographyv3Rc2: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewBiographyv3Rc2', 'orcid', orcid)
            const localVarPath = `/v3.0_rc2/{orcid}/biography`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch client details
         * @param {string} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewClientv3Rc2: async (clientId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('viewClientv3Rc2', 'clientId', clientId)
            const localVarPath = `/v3.0_rc2/client/{client_id}`
                .replace(`{${"client_id"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Distinction summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewDistinctionSummaryv3Rc2: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewDistinctionSummaryv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewDistinctionSummaryv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/distinction/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all distinctions
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewDistinctionsv3Rc2: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewDistinctionsv3Rc2', 'orcid', orcid)
            const localVarPath = `/v3.0_rc2/{orcid}/distinctions`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Distinction
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewDistinctionv3Rc2: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewDistinctionv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewDistinctionv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/distinction/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Education Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationSummaryv3Rc2: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEducationSummaryv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewEducationSummaryv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/education/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all educations
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationsv3Rc2: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEducationsv3Rc2', 'orcid', orcid)
            const localVarPath = `/v3.0_rc2/{orcid}/educations`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Education
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationv3Rc2: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEducationv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewEducationv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/education/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all emails for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmailsv3Rc2: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEmailsv3Rc2', 'orcid', orcid)
            const localVarPath = `/v3.0_rc2/{orcid}/email`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Employment Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentSummaryv3Rc2: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEmploymentSummaryv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewEmploymentSummaryv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/employment/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all employments
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentsv3Rc2: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEmploymentsv3Rc2', 'orcid', orcid)
            const localVarPath = `/v3.0_rc2/{orcid}/employments`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrive a specific education representation
         * @summary Fetch an Employment
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentv3Rc2: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEmploymentv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewEmploymentv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/employment/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch external identifiers
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewExternalIdentifiersv3Rc2: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewExternalIdentifiersv3Rc2', 'orcid', orcid)
            const localVarPath = `/v3.0_rc2/{orcid}/external-identifiers`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication orcid_two_legs required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "orcid_two_legs", ["/read-public"], configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch external identifier
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewExternalIdentifierv3Rc2: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewExternalIdentifierv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewExternalIdentifierv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/external-identifiers/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Funding Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingSummaryv3Rc2: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewFundingSummaryv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewFundingSummaryv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/funding/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all fundings
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingsv3Rc2: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewFundingsv3Rc2', 'orcid', orcid)
            const localVarPath = `/v3.0_rc2/{orcid}/fundings`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Funding
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingv3Rc2: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewFundingv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewFundingv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/funding/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an InvitedPosition summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewInvitedPositionSummaryv3Rc2: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewInvitedPositionSummaryv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewInvitedPositionSummaryv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/invited-position/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all invitedPositions
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewInvitedPositionsv3Rc2: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewInvitedPositionsv3Rc2', 'orcid', orcid)
            const localVarPath = `/v3.0_rc2/{orcid}/invited-positions`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an InvitedPosition
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewInvitedPositionv3Rc2: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewInvitedPositionv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewInvitedPositionv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/invited-position/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch keywords
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewKeywordsv3Rc2: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewKeywordsv3Rc2', 'orcid', orcid)
            const localVarPath = `/v3.0_rc2/{orcid}/keywords`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch keyword
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewKeywordv3Rc2: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewKeywordv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewKeywordv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/keywords/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Membership summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMembershipSummaryv3Rc2: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewMembershipSummaryv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewMembershipSummaryv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/membership/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all memberships
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMembershipsv3Rc2: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewMembershipsv3Rc2', 'orcid', orcid)
            const localVarPath = `/v3.0_rc2/{orcid}/memberships`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Membership
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMembershipv3Rc2: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewMembershipv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewMembershipv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/membership/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch Other names
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewOtherNamesv3Rc2: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewOtherNamesv3Rc2', 'orcid', orcid)
            const localVarPath = `/v3.0_rc2/{orcid}/other-names`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch Other name
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewOtherNamev3Rc2: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewOtherNamev3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewOtherNamev3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/other-names/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Peer Review Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewSummaryv3Rc2: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPeerReviewSummaryv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewPeerReviewSummaryv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/peer-review/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all peer reviews
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewsv3Rc2: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPeerReviewsv3Rc2', 'orcid', orcid)
            const localVarPath = `/v3.0_rc2/{orcid}/peer-reviews`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Peer Review
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewv3Rc2: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPeerReviewv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewPeerReviewv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/peer-review/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch personal details for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPersonalDetailsv3Rc2: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPersonalDetailsv3Rc2', 'orcid', orcid)
            const localVarPath = `/v3.0_rc2/{orcid}/personal-details`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch person details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPersonv3Rc2: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPersonv3Rc2', 'orcid', orcid)
            const localVarPath = `/v3.0_rc2/{orcid}/person`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Qualification summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewQualificationSummaryv3Rc2: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewQualificationSummaryv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewQualificationSummaryv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/qualification/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all qualifications
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewQualificationsv3Rc2: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewQualificationsv3Rc2', 'orcid', orcid)
            const localVarPath = `/v3.0_rc2/{orcid}/qualifications`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Qualification
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewQualificationv3Rc2: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewQualificationv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewQualificationv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/qualification/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch record details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewRecordv3Rc2: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewRecordv3Rc2', 'orcid', orcid)
            const localVarPath = `/v3.0_rc2/{orcid}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Research Resource summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearchResourceSummaryv3Rc2: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewResearchResourceSummaryv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewResearchResourceSummaryv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/research-resource/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all Research Resources
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearchResourcesv3Rc2: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewResearchResourcesv3Rc2', 'orcid', orcid)
            const localVarPath = `/v3.0_rc2/{orcid}/research-resources`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Research Resource
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearchResourcev3Rc2: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewResearchResourcev3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewResearchResourcev3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/research-resource/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all researcher urls for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearcherUrlsv3Rc2: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewResearcherUrlsv3Rc2', 'orcid', orcid)
            const localVarPath = `/v3.0_rc2/{orcid}/researcher-urls`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch one researcher url for an ORCID ID
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearcherUrlv3Rc2: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewResearcherUrlv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewResearcherUrlv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/researcher-urls/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Service summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewServiceSummaryv3Rc2: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewServiceSummaryv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewServiceSummaryv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/service/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all services
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewServicesv3Rc2: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewServicesv3Rc2', 'orcid', orcid)
            const localVarPath = `/v3.0_rc2/{orcid}/services`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Service
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewServicev3Rc2: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewServicev3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewServicev3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/service/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch specified works
         * @param {string} orcid
         * @param {string} putCodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewSpecifiedWorksv3Rc2: async (orcid: string, putCodes: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewSpecifiedWorksv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCodes' is not null or undefined
            assertParamExists('viewSpecifiedWorksv3Rc2', 'putCodes', putCodes)
            const localVarPath = `/v3.0_rc2/{orcid}/works/{putCodes}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCodes"}}`, encodeURIComponent(String(putCodes)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewStatusJson: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3.0_rc2/pubStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Check the server status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewStatusTextv3Rc2: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v3.0_rc2/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Work Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorkSummaryv3Rc2: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewWorkSummaryv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewWorkSummaryv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/work/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all works
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorksv3Rc2: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewWorksv3Rc2', 'orcid', orcid)
            const localVarPath = `/v3.0_rc2/{orcid}/works`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * More notes about this method
         * @summary Fetch a Work
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorkv3Rc2: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewWorkv3Rc2', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewWorkv3Rc2', 'putCode', putCode)
            const localVarPath = `/v3.0_rc2/{orcid}/work/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DevelopmentPublicAPIV30Rc2Api - functional programming interface
 * @export
 */
export const DevelopmentPublicAPIV30Rc2ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DevelopmentPublicAPIV30Rc2ApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Search records
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchByQueryv3Rc2(q?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchByQueryv3Rc2(q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all Activities
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewActivitiesv3Rc2(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActivitiesSummaryV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewActivitiesv3Rc2(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all addresses
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewAddressesv3Rc2(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewAddressesv3Rc2(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an address
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewAddressv3Rc2(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewAddressv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get biography details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewBiographyv3Rc2(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewBiographyv3Rc2(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch client details
         * @param {string} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewClientv3Rc2(clientId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewClientv3Rc2(clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Distinction summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewDistinctionSummaryv3Rc2(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistinctionSummaryV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewDistinctionSummaryv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all distinctions
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewDistinctionsv3Rc2(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistinctionsSummaryV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewDistinctionsv3Rc2(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Distinction
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewDistinctionv3Rc2(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DistinctionV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewDistinctionv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Education Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEducationSummaryv3Rc2(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EducationSummaryV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEducationSummaryv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all educations
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEducationsv3Rc2(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EducationsSummaryV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEducationsv3Rc2(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Education
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEducationv3Rc2(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EducationV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEducationv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all emails for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEmailsv3Rc2(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEmailsv3Rc2(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Employment Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEmploymentSummaryv3Rc2(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentSummaryV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEmploymentSummaryv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all employments
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEmploymentsv3Rc2(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundingsV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEmploymentsv3Rc2(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrive a specific education representation
         * @summary Fetch an Employment
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEmploymentv3Rc2(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEmploymentv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch external identifiers
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewExternalIdentifiersv3Rc2(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewExternalIdentifiersv3Rc2(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch external identifier
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewExternalIdentifierv3Rc2(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewExternalIdentifierv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Funding Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewFundingSummaryv3Rc2(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundingSummaryV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewFundingSummaryv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all fundings
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewFundingsv3Rc2(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundingsV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewFundingsv3Rc2(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Funding
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewFundingv3Rc2(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundingV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewFundingv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an InvitedPosition summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewInvitedPositionSummaryv3Rc2(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitedPositionSummaryV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewInvitedPositionSummaryv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all invitedPositions
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewInvitedPositionsv3Rc2(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitedPositionsV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewInvitedPositionsv3Rc2(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an InvitedPosition
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewInvitedPositionv3Rc2(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvitedPositionV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewInvitedPositionv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch keywords
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewKeywordsv3Rc2(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewKeywordsv3Rc2(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch keyword
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewKeywordv3Rc2(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewKeywordv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Membership summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewMembershipSummaryv3Rc2(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MembershipSummaryV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewMembershipSummaryv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all memberships
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewMembershipsv3Rc2(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MembershipsV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewMembershipsv3Rc2(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Membership
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewMembershipv3Rc2(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MembershipV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewMembershipv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch Other names
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewOtherNamesv3Rc2(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewOtherNamesv3Rc2(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch Other name
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewOtherNamev3Rc2(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewOtherNamev3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Peer Review Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPeerReviewSummaryv3Rc2(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeerReviewSummaryV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPeerReviewSummaryv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all peer reviews
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPeerReviewsv3Rc2(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeerReviewsV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPeerReviewsv3Rc2(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Peer Review
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPeerReviewv3Rc2(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeerReviewV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPeerReviewv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch personal details for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPersonalDetailsv3Rc2(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPersonalDetailsv3Rc2(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch person details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPersonv3Rc2(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPersonv3Rc2(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Qualification summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewQualificationSummaryv3Rc2(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QualificationSummaryV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewQualificationSummaryv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all qualifications
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewQualificationsv3Rc2(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QualificationsV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewQualificationsv3Rc2(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Qualification
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewQualificationv3Rc2(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QualificationV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewQualificationv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch record details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewRecordv3Rc2(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecordV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewRecordv3Rc2(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Research Resource summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewResearchResourceSummaryv3Rc2(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResearchResourceSummaryV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewResearchResourceSummaryv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all Research Resources
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewResearchResourcesv3Rc2(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResearchResourcesV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewResearchResourcesv3Rc2(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Research Resource
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewResearchResourcev3Rc2(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResearchResourceV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewResearchResourcev3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all researcher urls for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewResearcherUrlsv3Rc2(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewResearcherUrlsv3Rc2(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch one researcher url for an ORCID ID
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewResearcherUrlv3Rc2(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewResearcherUrlv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Service summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewServiceSummaryv3Rc2(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceSummaryV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewServiceSummaryv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all services
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewServicesv3Rc2(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServicesV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewServicesv3Rc2(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Service
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewServicev3Rc2(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewServicev3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch specified works
         * @param {string} orcid
         * @param {string} putCodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewSpecifiedWorksv3Rc2(orcid: string, putCodes: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkBulkV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewSpecifiedWorksv3Rc2(orcid, putCodes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewStatusJson(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewStatusJson(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Check the server status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewStatusTextv3Rc2(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewStatusTextv3Rc2(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Work Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewWorkSummaryv3Rc2(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkSummaryV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewWorkSummaryv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all works
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewWorksv3Rc2(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorksSummaryV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewWorksv3Rc2(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * More notes about this method
         * @summary Fetch a Work
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewWorkv3Rc2(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkV30Rc2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewWorkv3Rc2(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DevelopmentPublicAPIV30Rc2Api - factory interface
 * @export
 */
export const DevelopmentPublicAPIV30Rc2ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DevelopmentPublicAPIV30Rc2ApiFp(configuration)
    return {
        /**
         *
         * @summary Search records
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchByQueryv3Rc2(q?: string, options?: any): AxiosPromise<void> {
            return localVarFp.searchByQueryv3Rc2(q, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all Activities
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewActivitiesv3Rc2(orcid: string, options?: any): AxiosPromise<ActivitiesSummaryV30Rc2> {
            return localVarFp.viewActivitiesv3Rc2(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all addresses
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAddressesv3Rc2(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewAddressesv3Rc2(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an address
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAddressv3Rc2(orcid: string, putCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewAddressv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get biography details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewBiographyv3Rc2(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewBiographyv3Rc2(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch client details
         * @param {string} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewClientv3Rc2(clientId: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewClientv3Rc2(clientId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Distinction summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewDistinctionSummaryv3Rc2(orcid: string, putCode: string, options?: any): AxiosPromise<DistinctionSummaryV30Rc2> {
            return localVarFp.viewDistinctionSummaryv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all distinctions
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewDistinctionsv3Rc2(orcid: string, options?: any): AxiosPromise<DistinctionsSummaryV30Rc2> {
            return localVarFp.viewDistinctionsv3Rc2(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Distinction
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewDistinctionv3Rc2(orcid: string, putCode: string, options?: any): AxiosPromise<DistinctionV30Rc2> {
            return localVarFp.viewDistinctionv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Education Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationSummaryv3Rc2(orcid: string, putCode: number, options?: any): AxiosPromise<EducationSummaryV30Rc2> {
            return localVarFp.viewEducationSummaryv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all educations
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationsv3Rc2(orcid: string, options?: any): AxiosPromise<EducationsSummaryV30Rc2> {
            return localVarFp.viewEducationsv3Rc2(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Education
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationv3Rc2(orcid: string, putCode: number, options?: any): AxiosPromise<EducationV30Rc2> {
            return localVarFp.viewEducationv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all emails for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmailsv3Rc2(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewEmailsv3Rc2(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Employment Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentSummaryv3Rc2(orcid: string, putCode: number, options?: any): AxiosPromise<EmploymentSummaryV30Rc2> {
            return localVarFp.viewEmploymentSummaryv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all employments
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentsv3Rc2(orcid: string, options?: any): AxiosPromise<FundingsV30Rc2> {
            return localVarFp.viewEmploymentsv3Rc2(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrive a specific education representation
         * @summary Fetch an Employment
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentv3Rc2(orcid: string, putCode: number, options?: any): AxiosPromise<EmploymentV30Rc2> {
            return localVarFp.viewEmploymentv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch external identifiers
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewExternalIdentifiersv3Rc2(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewExternalIdentifiersv3Rc2(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch external identifier
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewExternalIdentifierv3Rc2(orcid: string, putCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewExternalIdentifierv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Funding Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingSummaryv3Rc2(orcid: string, putCode: number, options?: any): AxiosPromise<FundingSummaryV30Rc2> {
            return localVarFp.viewFundingSummaryv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all fundings
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingsv3Rc2(orcid: string, options?: any): AxiosPromise<FundingsV30Rc2> {
            return localVarFp.viewFundingsv3Rc2(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Funding
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingv3Rc2(orcid: string, putCode: number, options?: any): AxiosPromise<FundingV30Rc2> {
            return localVarFp.viewFundingv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an InvitedPosition summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewInvitedPositionSummaryv3Rc2(orcid: string, putCode: string, options?: any): AxiosPromise<InvitedPositionSummaryV30Rc2> {
            return localVarFp.viewInvitedPositionSummaryv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all invitedPositions
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewInvitedPositionsv3Rc2(orcid: string, options?: any): AxiosPromise<InvitedPositionsV30Rc2> {
            return localVarFp.viewInvitedPositionsv3Rc2(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an InvitedPosition
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewInvitedPositionv3Rc2(orcid: string, putCode: string, options?: any): AxiosPromise<InvitedPositionV30Rc2> {
            return localVarFp.viewInvitedPositionv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch keywords
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewKeywordsv3Rc2(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewKeywordsv3Rc2(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch keyword
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewKeywordv3Rc2(orcid: string, putCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewKeywordv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Membership summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMembershipSummaryv3Rc2(orcid: string, putCode: string, options?: any): AxiosPromise<MembershipSummaryV30Rc2> {
            return localVarFp.viewMembershipSummaryv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all memberships
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMembershipsv3Rc2(orcid: string, options?: any): AxiosPromise<MembershipsV30Rc2> {
            return localVarFp.viewMembershipsv3Rc2(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Membership
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewMembershipv3Rc2(orcid: string, putCode: string, options?: any): AxiosPromise<MembershipV30Rc2> {
            return localVarFp.viewMembershipv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch Other names
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewOtherNamesv3Rc2(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewOtherNamesv3Rc2(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch Other name
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewOtherNamev3Rc2(orcid: string, putCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewOtherNamev3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Peer Review Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewSummaryv3Rc2(orcid: string, putCode: number, options?: any): AxiosPromise<PeerReviewSummaryV30Rc2> {
            return localVarFp.viewPeerReviewSummaryv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all peer reviews
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewsv3Rc2(orcid: string, options?: any): AxiosPromise<PeerReviewsV30Rc2> {
            return localVarFp.viewPeerReviewsv3Rc2(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Peer Review
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewv3Rc2(orcid: string, putCode: number, options?: any): AxiosPromise<PeerReviewV30Rc2> {
            return localVarFp.viewPeerReviewv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch personal details for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPersonalDetailsv3Rc2(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewPersonalDetailsv3Rc2(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch person details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPersonv3Rc2(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewPersonv3Rc2(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Qualification summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewQualificationSummaryv3Rc2(orcid: string, putCode: string, options?: any): AxiosPromise<QualificationSummaryV30Rc2> {
            return localVarFp.viewQualificationSummaryv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all qualifications
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewQualificationsv3Rc2(orcid: string, options?: any): AxiosPromise<QualificationsV30Rc2> {
            return localVarFp.viewQualificationsv3Rc2(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Qualification
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewQualificationv3Rc2(orcid: string, putCode: string, options?: any): AxiosPromise<QualificationV30Rc2> {
            return localVarFp.viewQualificationv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch record details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewRecordv3Rc2(orcid: string, options?: any): AxiosPromise<RecordV30Rc2> {
            return localVarFp.viewRecordv3Rc2(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Research Resource summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearchResourceSummaryv3Rc2(orcid: string, putCode: string, options?: any): AxiosPromise<ResearchResourceSummaryV30Rc2> {
            return localVarFp.viewResearchResourceSummaryv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all Research Resources
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearchResourcesv3Rc2(orcid: string, options?: any): AxiosPromise<ResearchResourcesV30Rc2> {
            return localVarFp.viewResearchResourcesv3Rc2(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Research Resource
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearchResourcev3Rc2(orcid: string, putCode: string, options?: any): AxiosPromise<ResearchResourceV30Rc2> {
            return localVarFp.viewResearchResourcev3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all researcher urls for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearcherUrlsv3Rc2(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewResearcherUrlsv3Rc2(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch one researcher url for an ORCID ID
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearcherUrlv3Rc2(orcid: string, putCode: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewResearcherUrlv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Service summary
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewServiceSummaryv3Rc2(orcid: string, putCode: string, options?: any): AxiosPromise<ServiceSummaryV30Rc2> {
            return localVarFp.viewServiceSummaryv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all services
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewServicesv3Rc2(orcid: string, options?: any): AxiosPromise<ServicesV30Rc2> {
            return localVarFp.viewServicesv3Rc2(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Service
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewServicev3Rc2(orcid: string, putCode: string, options?: any): AxiosPromise<ServiceV30Rc2> {
            return localVarFp.viewServicev3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch specified works
         * @param {string} orcid
         * @param {string} putCodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewSpecifiedWorksv3Rc2(orcid: string, putCodes: string, options?: any): AxiosPromise<WorkBulkV30Rc2> {
            return localVarFp.viewSpecifiedWorksv3Rc2(orcid, putCodes, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewStatusJson(options?: any): AxiosPromise<void> {
            return localVarFp.viewStatusJson(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Check the server status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewStatusTextv3Rc2(options?: any): AxiosPromise<string> {
            return localVarFp.viewStatusTextv3Rc2(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Work Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorkSummaryv3Rc2(orcid: string, putCode: number, options?: any): AxiosPromise<WorkSummaryV30Rc2> {
            return localVarFp.viewWorkSummaryv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all works
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorksv3Rc2(orcid: string, options?: any): AxiosPromise<WorksSummaryV30Rc2> {
            return localVarFp.viewWorksv3Rc2(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         * More notes about this method
         * @summary Fetch a Work
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorkv3Rc2(orcid: string, putCode: number, options?: any): AxiosPromise<WorkV30Rc2> {
            return localVarFp.viewWorkv3Rc2(orcid, putCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DevelopmentPublicAPIV30Rc2Api - object-oriented interface
 * @export
 * @class DevelopmentPublicAPIV30Rc2Api
 * @extends {BaseAPI}
 */
export class DevelopmentPublicAPIV30Rc2Api extends BaseAPI {
    /**
     *
     * @summary Search records
     * @param {string} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public searchByQueryv3Rc2(q?: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).searchByQueryv3Rc2(q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all Activities
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewActivitiesv3Rc2(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewActivitiesv3Rc2(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all addresses
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewAddressesv3Rc2(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewAddressesv3Rc2(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an address
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewAddressv3Rc2(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewAddressv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get biography details
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewBiographyv3Rc2(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewBiographyv3Rc2(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch client details
     * @param {string} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewClientv3Rc2(clientId: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewClientv3Rc2(clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Distinction summary
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewDistinctionSummaryv3Rc2(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewDistinctionSummaryv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all distinctions
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewDistinctionsv3Rc2(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewDistinctionsv3Rc2(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Distinction
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewDistinctionv3Rc2(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewDistinctionv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Education Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewEducationSummaryv3Rc2(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewEducationSummaryv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all educations
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewEducationsv3Rc2(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewEducationsv3Rc2(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Education
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewEducationv3Rc2(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewEducationv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all emails for an ORCID ID
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewEmailsv3Rc2(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewEmailsv3Rc2(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Employment Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewEmploymentSummaryv3Rc2(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewEmploymentSummaryv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all employments
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewEmploymentsv3Rc2(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewEmploymentsv3Rc2(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrive a specific education representation
     * @summary Fetch an Employment
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewEmploymentv3Rc2(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewEmploymentv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch external identifiers
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewExternalIdentifiersv3Rc2(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewExternalIdentifiersv3Rc2(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch external identifier
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewExternalIdentifierv3Rc2(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewExternalIdentifierv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Funding Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewFundingSummaryv3Rc2(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewFundingSummaryv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all fundings
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewFundingsv3Rc2(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewFundingsv3Rc2(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Funding
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewFundingv3Rc2(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewFundingv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an InvitedPosition summary
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewInvitedPositionSummaryv3Rc2(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewInvitedPositionSummaryv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all invitedPositions
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewInvitedPositionsv3Rc2(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewInvitedPositionsv3Rc2(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an InvitedPosition
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewInvitedPositionv3Rc2(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewInvitedPositionv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch keywords
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewKeywordsv3Rc2(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewKeywordsv3Rc2(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch keyword
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewKeywordv3Rc2(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewKeywordv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Membership summary
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewMembershipSummaryv3Rc2(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewMembershipSummaryv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all memberships
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewMembershipsv3Rc2(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewMembershipsv3Rc2(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Membership
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewMembershipv3Rc2(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewMembershipv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch Other names
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewOtherNamesv3Rc2(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewOtherNamesv3Rc2(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch Other name
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewOtherNamev3Rc2(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewOtherNamev3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Peer Review Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewPeerReviewSummaryv3Rc2(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewPeerReviewSummaryv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all peer reviews
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewPeerReviewsv3Rc2(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewPeerReviewsv3Rc2(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Peer Review
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewPeerReviewv3Rc2(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewPeerReviewv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch personal details for an ORCID ID
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewPersonalDetailsv3Rc2(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewPersonalDetailsv3Rc2(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch person details
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewPersonv3Rc2(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewPersonv3Rc2(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Qualification summary
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewQualificationSummaryv3Rc2(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewQualificationSummaryv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all qualifications
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewQualificationsv3Rc2(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewQualificationsv3Rc2(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Qualification
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewQualificationv3Rc2(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewQualificationv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch record details
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewRecordv3Rc2(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewRecordv3Rc2(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Research Resource summary
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewResearchResourceSummaryv3Rc2(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewResearchResourceSummaryv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all Research Resources
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewResearchResourcesv3Rc2(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewResearchResourcesv3Rc2(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Research Resource
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewResearchResourcev3Rc2(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewResearchResourcev3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all researcher urls for an ORCID ID
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewResearcherUrlsv3Rc2(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewResearcherUrlsv3Rc2(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch one researcher url for an ORCID ID
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewResearcherUrlv3Rc2(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewResearcherUrlv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Service summary
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewServiceSummaryv3Rc2(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewServiceSummaryv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all services
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewServicesv3Rc2(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewServicesv3Rc2(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Service
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewServicev3Rc2(orcid: string, putCode: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewServicev3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch specified works
     * @param {string} orcid
     * @param {string} putCodes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewSpecifiedWorksv3Rc2(orcid: string, putCodes: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewSpecifiedWorksv3Rc2(orcid, putCodes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewStatusJson(options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewStatusJson(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Check the server status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewStatusTextv3Rc2(options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewStatusTextv3Rc2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Work Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewWorkSummaryv3Rc2(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewWorkSummaryv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all works
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewWorksv3Rc2(orcid: string, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewWorksv3Rc2(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * More notes about this method
     * @summary Fetch a Work
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DevelopmentPublicAPIV30Rc2Api
     */
    public viewWorkv3Rc2(orcid: string, putCode: number, options?: any) {
        return DevelopmentPublicAPIV30Rc2ApiFp(this.configuration).viewWorkv3Rc2(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IdentifierAPIApi - axios parameter creator
 * @export
 */
export const IdentifierAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Fetch identifier type map. Defaults to English descriptions
         * @param {string} [locale]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewIdentifierTypes: async (locale?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v{version}/identifiers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication orcid_two_legs required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "orcid_two_legs", ["/read-public"], configuration)

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IdentifierAPIApi - functional programming interface
 * @export
 */
export const IdentifierAPIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IdentifierAPIApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Fetch identifier type map. Defaults to English descriptions
         * @param {string} [locale]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewIdentifierTypes(locale?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewIdentifierTypes(locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IdentifierAPIApi - factory interface
 * @export
 */
export const IdentifierAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IdentifierAPIApiFp(configuration)
    return {
        /**
         *
         * @summary Fetch identifier type map. Defaults to English descriptions
         * @param {string} [locale]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewIdentifierTypes(locale?: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewIdentifierTypes(locale, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IdentifierAPIApi - object-oriented interface
 * @export
 * @class IdentifierAPIApi
 * @extends {BaseAPI}
 */
export class IdentifierAPIApi extends BaseAPI {
    /**
     *
     * @summary Fetch identifier type map. Defaults to English descriptions
     * @param {string} [locale]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IdentifierAPIApi
     */
    public viewIdentifierTypes(locale?: string, options?: any) {
        return IdentifierAPIApiFp(this.configuration).viewIdentifierTypes(locale, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PublicAPIV20Api - axios parameter creator
 * @export
 */
export const PublicAPIV20ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Search records
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchByQuery: async (q?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2.0/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all Activities
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewActivities: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewActivities', 'orcid', orcid)
            const localVarPath = `/v2.0/{orcid}/activities`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an address
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAddress: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewAddress', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewAddress', 'putCode', putCode)
            const localVarPath = `/v2.0/{orcid}/address/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all addresses
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAddresses: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewAddresses', 'orcid', orcid)
            const localVarPath = `/v2.0/{orcid}/address`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get biography details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewBiography: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewBiography', 'orcid', orcid)
            const localVarPath = `/v2.0/{orcid}/biography`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch client details
         * @param {string} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewClient: async (clientId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('viewClient', 'clientId', clientId)
            const localVarPath = `/v2.0/client/{client_id}`
                .replace(`{${"client_id"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Education
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducation: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEducation', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewEducation', 'putCode', putCode)
            const localVarPath = `/v2.0/{orcid}/education/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Education Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationSummary: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEducationSummary', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewEducationSummary', 'putCode', putCode)
            const localVarPath = `/v2.0/{orcid}/education/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all educations
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducations: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEducations', 'orcid', orcid)
            const localVarPath = `/v2.0/{orcid}/educations`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all emails for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmails: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEmails', 'orcid', orcid)
            const localVarPath = `/v2.0/{orcid}/email`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrive a specific education representation
         * @summary Fetch an Employment
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmployment: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEmployment', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewEmployment', 'putCode', putCode)
            const localVarPath = `/v2.0/{orcid}/employment/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Employment Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentSummary: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEmploymentSummary', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewEmploymentSummary', 'putCode', putCode)
            const localVarPath = `/v2.0/{orcid}/employment/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all employments
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmployments: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEmployments', 'orcid', orcid)
            const localVarPath = `/v2.0/{orcid}/employments`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch external identifier
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewExternalIdentifier: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewExternalIdentifier', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewExternalIdentifier', 'putCode', putCode)
            const localVarPath = `/v2.0/{orcid}/external-identifiers/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch external identifiers
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewExternalIdentifiers: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewExternalIdentifiers', 'orcid', orcid)
            const localVarPath = `/v2.0/{orcid}/external-identifiers`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication orcid_two_legs required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "orcid_two_legs", ["/read-public"], configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Funding
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFunding: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewFunding', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewFunding', 'putCode', putCode)
            const localVarPath = `/v2.0/{orcid}/funding/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Funding Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingSummary: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewFundingSummary', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewFundingSummary', 'putCode', putCode)
            const localVarPath = `/v2.0/{orcid}/funding/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all fundings
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundings: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewFundings', 'orcid', orcid)
            const localVarPath = `/v2.0/{orcid}/fundings`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch keyword
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewKeyword: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewKeyword', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewKeyword', 'putCode', putCode)
            const localVarPath = `/v2.0/{orcid}/keywords/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch keywords
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewKeywords: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewKeywords', 'orcid', orcid)
            const localVarPath = `/v2.0/{orcid}/keywords`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch Other name
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewOtherName: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewOtherName', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewOtherName', 'putCode', putCode)
            const localVarPath = `/v2.0/{orcid}/other-names/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch Other names
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewOtherNames: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewOtherNames', 'orcid', orcid)
            const localVarPath = `/v2.0/{orcid}/other-names`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Peer Review
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReview: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPeerReview', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewPeerReview', 'putCode', putCode)
            const localVarPath = `/v2.0/{orcid}/peer-review/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Peer Review Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewSummary: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPeerReviewSummary', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewPeerReviewSummary', 'putCode', putCode)
            const localVarPath = `/v2.0/{orcid}/peer-review/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all peer reviews
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviews: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPeerReviews', 'orcid', orcid)
            const localVarPath = `/v2.0/{orcid}/peer-reviews`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch person details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPerson: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPerson', 'orcid', orcid)
            const localVarPath = `/v2.0/{orcid}/person`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch personal details for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPersonalDetails: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPersonalDetails', 'orcid', orcid)
            const localVarPath = `/v2.0/{orcid}/personal-details`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch record details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewRecord: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewRecord', 'orcid', orcid)
            const localVarPath = `/v2.0/{orcid}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch one researcher url for an ORCID ID
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearcherUrl: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewResearcherUrl', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewResearcherUrl', 'putCode', putCode)
            const localVarPath = `/v2.0/{orcid}/researcher-urls/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all researcher urls for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearcherUrls: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewResearcherUrls', 'orcid', orcid)
            const localVarPath = `/v2.0/{orcid}/researcher-urls`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch specified works
         * @param {string} orcid
         * @param {string} putCodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewSpecifiedWorks: async (orcid: string, putCodes: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewSpecifiedWorks', 'orcid', orcid)
            // verify required parameter 'putCodes' is not null or undefined
            assertParamExists('viewSpecifiedWorks', 'putCodes', putCodes)
            const localVarPath = `/v2.0/{orcid}/works/{putCodes}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCodes"}}`, encodeURIComponent(String(putCodes)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Check the server status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewStatusText: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2.0/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * More notes about this method
         * @summary Fetch a Work
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWork: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewWork', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewWork', 'putCode', putCode)
            const localVarPath = `/v2.0/{orcid}/work/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Work Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorkSummary: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewWorkSummary', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewWorkSummary', 'putCode', putCode)
            const localVarPath = `/v2.0/{orcid}/work/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all works
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorks: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewWorks', 'orcid', orcid)
            const localVarPath = `/v2.0/{orcid}/works`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicAPIV20Api - functional programming interface
 * @export
 */
export const PublicAPIV20ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublicAPIV20ApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Search records
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchByQuery(q?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchByQuery(q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all Activities
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewActivities(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActivitiesSummaryV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewActivities(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an address
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewAddress(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewAddress(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all addresses
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewAddresses(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressesV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewAddresses(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get biography details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewBiography(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BiographyV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewBiography(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch client details
         * @param {string} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewClient(clientId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewClient(clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Education
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEducation(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EducationV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEducation(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Education Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEducationSummary(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EducationSummaryV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEducationSummary(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all educations
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEducations(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EducationsSummaryV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEducations(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all emails for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEmails(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailsV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEmails(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrive a specific education representation
         * @summary Fetch an Employment
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEmployment(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEmployment(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Employment Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEmploymentSummary(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentSummaryV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEmploymentSummary(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all employments
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEmployments(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentsSummaryV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEmployments(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch external identifier
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewExternalIdentifier(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonExternalIdentifierV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewExternalIdentifier(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch external identifiers
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewExternalIdentifiers(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonExternalIdentifiersV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewExternalIdentifiers(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Funding
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewFunding(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundingV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewFunding(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Funding Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewFundingSummary(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundingSummaryV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewFundingSummary(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all fundings
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewFundings(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundingsV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewFundings(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch keyword
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewKeyword(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeywordV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewKeyword(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch keywords
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewKeywords(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeywordsV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewKeywords(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch Other name
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewOtherName(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OtherNameV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewOtherName(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch Other names
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewOtherNames(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OtherNamesV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewOtherNames(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Peer Review
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPeerReview(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeerReviewV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPeerReview(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Peer Review Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPeerReviewSummary(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeerReviewSummaryV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPeerReviewSummary(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all peer reviews
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPeerReviews(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeerReviewsV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPeerReviews(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch person details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPerson(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPerson(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch personal details for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPersonalDetails(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonalDetailsV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPersonalDetails(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch record details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewRecord(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecordV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewRecord(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch one researcher url for an ORCID ID
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewResearcherUrl(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResearcherUrlsV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewResearcherUrl(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all researcher urls for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewResearcherUrls(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResearcherUrlsV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewResearcherUrls(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch specified works
         * @param {string} orcid
         * @param {string} putCodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewSpecifiedWorks(orcid: string, putCodes: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkBulkV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewSpecifiedWorks(orcid, putCodes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Check the server status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewStatusText(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewStatusText(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * More notes about this method
         * @summary Fetch a Work
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewWork(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewWork(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Work Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewWorkSummary(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkSummaryV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewWorkSummary(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all works
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewWorks(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorksSummaryV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewWorks(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PublicAPIV20Api - factory interface
 * @export
 */
export const PublicAPIV20ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublicAPIV20ApiFp(configuration)
    return {
        /**
         *
         * @summary Search records
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchByQuery(q?: string, options?: any): AxiosPromise<SearchV20> {
            return localVarFp.searchByQuery(q, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all Activities
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewActivities(orcid: string, options?: any): AxiosPromise<ActivitiesSummaryV20> {
            return localVarFp.viewActivities(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an address
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAddress(orcid: string, putCode: string, options?: any): AxiosPromise<AddressV20> {
            return localVarFp.viewAddress(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all addresses
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAddresses(orcid: string, options?: any): AxiosPromise<AddressesV20> {
            return localVarFp.viewAddresses(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get biography details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewBiography(orcid: string, options?: any): AxiosPromise<BiographyV20> {
            return localVarFp.viewBiography(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch client details
         * @param {string} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewClient(clientId: string, options?: any): AxiosPromise<ClientSummary> {
            return localVarFp.viewClient(clientId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Education
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducation(orcid: string, putCode: number, options?: any): AxiosPromise<EducationV20> {
            return localVarFp.viewEducation(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Education Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationSummary(orcid: string, putCode: number, options?: any): AxiosPromise<EducationSummaryV20> {
            return localVarFp.viewEducationSummary(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all educations
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducations(orcid: string, options?: any): AxiosPromise<EducationsSummaryV20> {
            return localVarFp.viewEducations(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all emails for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmails(orcid: string, options?: any): AxiosPromise<EmailsV20> {
            return localVarFp.viewEmails(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrive a specific education representation
         * @summary Fetch an Employment
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmployment(orcid: string, putCode: number, options?: any): AxiosPromise<EmploymentV20> {
            return localVarFp.viewEmployment(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Employment Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentSummary(orcid: string, putCode: number, options?: any): AxiosPromise<EmploymentSummaryV20> {
            return localVarFp.viewEmploymentSummary(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all employments
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmployments(orcid: string, options?: any): AxiosPromise<EmploymentsSummaryV20> {
            return localVarFp.viewEmployments(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch external identifier
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewExternalIdentifier(orcid: string, putCode: string, options?: any): AxiosPromise<PersonExternalIdentifierV20> {
            return localVarFp.viewExternalIdentifier(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch external identifiers
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewExternalIdentifiers(orcid: string, options?: any): AxiosPromise<PersonExternalIdentifiersV20> {
            return localVarFp.viewExternalIdentifiers(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Funding
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFunding(orcid: string, putCode: number, options?: any): AxiosPromise<FundingV20> {
            return localVarFp.viewFunding(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Funding Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingSummary(orcid: string, putCode: number, options?: any): AxiosPromise<FundingSummaryV20> {
            return localVarFp.viewFundingSummary(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all fundings
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundings(orcid: string, options?: any): AxiosPromise<FundingsV20> {
            return localVarFp.viewFundings(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch keyword
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewKeyword(orcid: string, putCode: string, options?: any): AxiosPromise<KeywordV20> {
            return localVarFp.viewKeyword(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch keywords
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewKeywords(orcid: string, options?: any): AxiosPromise<KeywordsV20> {
            return localVarFp.viewKeywords(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch Other name
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewOtherName(orcid: string, putCode: string, options?: any): AxiosPromise<OtherNameV20> {
            return localVarFp.viewOtherName(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch Other names
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewOtherNames(orcid: string, options?: any): AxiosPromise<OtherNamesV20> {
            return localVarFp.viewOtherNames(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Peer Review
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReview(orcid: string, putCode: number, options?: any): AxiosPromise<PeerReviewV20> {
            return localVarFp.viewPeerReview(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Peer Review Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewSummary(orcid: string, putCode: number, options?: any): AxiosPromise<PeerReviewSummaryV20> {
            return localVarFp.viewPeerReviewSummary(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all peer reviews
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviews(orcid: string, options?: any): AxiosPromise<PeerReviewsV20> {
            return localVarFp.viewPeerReviews(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch person details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPerson(orcid: string, options?: any): AxiosPromise<PersonV20> {
            return localVarFp.viewPerson(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch personal details for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPersonalDetails(orcid: string, options?: any): AxiosPromise<PersonalDetailsV20> {
            return localVarFp.viewPersonalDetails(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch record details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewRecord(orcid: string, options?: any): AxiosPromise<RecordV20> {
            return localVarFp.viewRecord(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch one researcher url for an ORCID ID
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearcherUrl(orcid: string, putCode: string, options?: any): AxiosPromise<ResearcherUrlsV20> {
            return localVarFp.viewResearcherUrl(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all researcher urls for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearcherUrls(orcid: string, options?: any): AxiosPromise<ResearcherUrlsV20> {
            return localVarFp.viewResearcherUrls(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch specified works
         * @param {string} orcid
         * @param {string} putCodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewSpecifiedWorks(orcid: string, putCodes: string, options?: any): AxiosPromise<WorkBulkV20> {
            return localVarFp.viewSpecifiedWorks(orcid, putCodes, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Check the server status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewStatusText(options?: any): AxiosPromise<string> {
            return localVarFp.viewStatusText(options).then((request) => request(axios, basePath));
        },
        /**
         * More notes about this method
         * @summary Fetch a Work
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWork(orcid: string, putCode: number, options?: any): AxiosPromise<WorkV20> {
            return localVarFp.viewWork(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Work Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorkSummary(orcid: string, putCode: number, options?: any): AxiosPromise<WorkSummaryV20> {
            return localVarFp.viewWorkSummary(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all works
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorks(orcid: string, options?: any): AxiosPromise<WorksSummaryV20> {
            return localVarFp.viewWorks(orcid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublicAPIV20Api - object-oriented interface
 * @export
 * @class PublicAPIV20Api
 * @extends {BaseAPI}
 */
export class PublicAPIV20Api extends BaseAPI {
    /**
     *
     * @summary Search records
     * @param {string} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public searchByQuery(q?: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).searchByQuery(q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all Activities
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewActivities(orcid: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewActivities(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an address
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewAddress(orcid: string, putCode: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewAddress(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all addresses
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewAddresses(orcid: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewAddresses(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get biography details
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewBiography(orcid: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewBiography(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch client details
     * @param {string} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewClient(clientId: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewClient(clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Education
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewEducation(orcid: string, putCode: number, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewEducation(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Education Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewEducationSummary(orcid: string, putCode: number, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewEducationSummary(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all educations
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewEducations(orcid: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewEducations(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all emails for an ORCID ID
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewEmails(orcid: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewEmails(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrive a specific education representation
     * @summary Fetch an Employment
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewEmployment(orcid: string, putCode: number, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewEmployment(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Employment Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewEmploymentSummary(orcid: string, putCode: number, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewEmploymentSummary(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all employments
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewEmployments(orcid: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewEmployments(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch external identifier
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewExternalIdentifier(orcid: string, putCode: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewExternalIdentifier(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch external identifiers
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewExternalIdentifiers(orcid: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewExternalIdentifiers(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Funding
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewFunding(orcid: string, putCode: number, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewFunding(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Funding Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewFundingSummary(orcid: string, putCode: number, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewFundingSummary(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all fundings
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewFundings(orcid: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewFundings(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch keyword
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewKeyword(orcid: string, putCode: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewKeyword(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch keywords
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewKeywords(orcid: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewKeywords(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch Other name
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewOtherName(orcid: string, putCode: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewOtherName(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch Other names
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewOtherNames(orcid: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewOtherNames(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Peer Review
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewPeerReview(orcid: string, putCode: number, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewPeerReview(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Peer Review Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewPeerReviewSummary(orcid: string, putCode: number, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewPeerReviewSummary(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all peer reviews
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewPeerReviews(orcid: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewPeerReviews(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch person details
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewPerson(orcid: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewPerson(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch personal details for an ORCID ID
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewPersonalDetails(orcid: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewPersonalDetails(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch record details
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewRecord(orcid: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewRecord(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch one researcher url for an ORCID ID
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewResearcherUrl(orcid: string, putCode: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewResearcherUrl(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all researcher urls for an ORCID ID
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewResearcherUrls(orcid: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewResearcherUrls(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch specified works
     * @param {string} orcid
     * @param {string} putCodes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewSpecifiedWorks(orcid: string, putCodes: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewSpecifiedWorks(orcid, putCodes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Check the server status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewStatusText(options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewStatusText(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * More notes about this method
     * @summary Fetch a Work
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewWork(orcid: string, putCode: number, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewWork(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Work Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewWorkSummary(orcid: string, putCode: number, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewWorkSummary(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all works
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV20Api
     */
    public viewWorks(orcid: string, options?: any) {
        return PublicAPIV20ApiFp(this.configuration).viewWorks(orcid, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PublicAPIV21Api - axios parameter creator
 * @export
 */
export const PublicAPIV21ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @summary Search records
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchByQueryV21: async (q?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2.1/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all Activities
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewActivitiesV21: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewActivitiesV21', 'orcid', orcid)
            const localVarPath = `/v2.1/{orcid}/activities`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an address
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAddressV21: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewAddressV21', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewAddressV21', 'putCode', putCode)
            const localVarPath = `/v2.1/{orcid}/address/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all addresses
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAddressesV21: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewAddressesV21', 'orcid', orcid)
            const localVarPath = `/v2.1/{orcid}/address`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Get biography details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewBiographyV21: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewBiographyV21', 'orcid', orcid)
            const localVarPath = `/v2.1/{orcid}/biography`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch client details
         * @param {string} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewClientV21: async (clientId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('viewClientV21', 'clientId', clientId)
            const localVarPath = `/v2.1/client/{client_id}`
                .replace(`{${"client_id"}}`, encodeURIComponent(String(clientId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Education Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationSummaryV21: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEducationSummaryV21', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewEducationSummaryV21', 'putCode', putCode)
            const localVarPath = `/v2.1/{orcid}/education/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Education
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationV21: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEducationV21', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewEducationV21', 'putCode', putCode)
            const localVarPath = `/v2.1/{orcid}/education/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all educations
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationsV21: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEducationsV21', 'orcid', orcid)
            const localVarPath = `/v2.1/{orcid}/educations`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all emails for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmailsV21: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEmailsV21', 'orcid', orcid)
            const localVarPath = `/v2.1/{orcid}/email`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch an Employment Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentSummaryV21: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEmploymentSummaryV21', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewEmploymentSummaryV21', 'putCode', putCode)
            const localVarPath = `/v2.1/{orcid}/employment/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrive a specific education representation
         * @summary Fetch an Employment
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentV21: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEmploymentV21', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewEmploymentV21', 'putCode', putCode)
            const localVarPath = `/v2.1/{orcid}/employment/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all employments
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentsV21: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewEmploymentsV21', 'orcid', orcid)
            const localVarPath = `/v2.1/{orcid}/employments`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch external identifier
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewExternalIdentifierV21: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewExternalIdentifierV21', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewExternalIdentifierV21', 'putCode', putCode)
            const localVarPath = `/v2.1/{orcid}/external-identifiers/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch external identifiers
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewExternalIdentifiersV21: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewExternalIdentifiersV21', 'orcid', orcid)
            const localVarPath = `/v2.1/{orcid}/external-identifiers`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication orcid_two_legs required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "orcid_two_legs", ["/read-public"], configuration)



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Funding Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingSummaryV21: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewFundingSummaryV21', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewFundingSummaryV21', 'putCode', putCode)
            const localVarPath = `/v2.1/{orcid}/funding/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Funding
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingV21: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewFundingV21', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewFundingV21', 'putCode', putCode)
            const localVarPath = `/v2.1/{orcid}/funding/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all fundings
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingsV21: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewFundingsV21', 'orcid', orcid)
            const localVarPath = `/v2.1/{orcid}/fundings`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch keyword
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewKeywordV21: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewKeywordV21', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewKeywordV21', 'putCode', putCode)
            const localVarPath = `/v2.1/{orcid}/keywords/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch keywords
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewKeywordsV21: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewKeywordsV21', 'orcid', orcid)
            const localVarPath = `/v2.1/{orcid}/keywords`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch Other name
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewOtherNameV21: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewOtherNameV21', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewOtherNameV21', 'putCode', putCode)
            const localVarPath = `/v2.1/{orcid}/other-names/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch Other names
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewOtherNamesV21: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewOtherNamesV21', 'orcid', orcid)
            const localVarPath = `/v2.1/{orcid}/other-names`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Peer Review Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewSummaryV21: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPeerReviewSummaryV21', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewPeerReviewSummaryV21', 'putCode', putCode)
            const localVarPath = `/v2.1/{orcid}/peer-review/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Peer Review
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewV21: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPeerReviewV21', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewPeerReviewV21', 'putCode', putCode)
            const localVarPath = `/v2.1/{orcid}/peer-review/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all peer reviews
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewsV21: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPeerReviewsV21', 'orcid', orcid)
            const localVarPath = `/v2.1/{orcid}/peer-reviews`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch person details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPersonV21: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPersonV21', 'orcid', orcid)
            const localVarPath = `/v2.1/{orcid}/person`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch personal details for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPersonalDetailsV21: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewPersonalDetailsV21', 'orcid', orcid)
            const localVarPath = `/v2.1/{orcid}/personal-details`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch record details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewRecordV21: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewRecordV21', 'orcid', orcid)
            const localVarPath = `/v2.1/{orcid}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch one researcher url for an ORCID ID
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearcherUrlV21: async (orcid: string, putCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewResearcherUrlV21', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewResearcherUrlV21', 'putCode', putCode)
            const localVarPath = `/v2.1/{orcid}/researcher-urls/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all researcher urls for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearcherUrlsV21: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewResearcherUrlsV21', 'orcid', orcid)
            const localVarPath = `/v2.1/{orcid}/researcher-urls`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch specified works
         * @param {string} orcid
         * @param {string} putCodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewSpecifiedWorksV21: async (orcid: string, putCodes: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewSpecifiedWorksV21', 'orcid', orcid)
            // verify required parameter 'putCodes' is not null or undefined
            assertParamExists('viewSpecifiedWorksV21', 'putCodes', putCodes)
            const localVarPath = `/v2.1/{orcid}/works/{putCodes}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCodes"}}`, encodeURIComponent(String(putCodes)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Check the server status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewStatusTextV21: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v2.1/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch a Work Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorkSummaryV21: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewWorkSummaryV21', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewWorkSummaryV21', 'putCode', putCode)
            const localVarPath = `/v2.1/{orcid}/work/summary/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * More notes about this method
         * @summary Fetch a Work
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorkV21: async (orcid: string, putCode: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewWorkV21', 'orcid', orcid)
            // verify required parameter 'putCode' is not null or undefined
            assertParamExists('viewWorkV21', 'putCode', putCode)
            const localVarPath = `/v2.1/{orcid}/work/{putCode}`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)))
                .replace(`{${"putCode"}}`, encodeURIComponent(String(putCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @summary Fetch all works
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorksV21: async (orcid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orcid' is not null or undefined
            assertParamExists('viewWorksV21', 'orcid', orcid)
            const localVarPath = `/v2.1/{orcid}/works`
                .replace(`{${"orcid"}}`, encodeURIComponent(String(orcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;



            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicAPIV21Api - functional programming interface
 * @export
 */
export const PublicAPIV21ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PublicAPIV21ApiAxiosParamCreator(configuration)
    return {
        /**
         *
         * @summary Search records
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchByQueryV21(q?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchByQueryV21(q, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all Activities
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewActivitiesV21(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActivitiesSummaryV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewActivitiesV21(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an address
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewAddressV21(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewAddressV21(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all addresses
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewAddressesV21(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressesV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewAddressesV21(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Get biography details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewBiographyV21(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BiographyV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewBiographyV21(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch client details
         * @param {string} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewClientV21(clientId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientSummary>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewClientV21(clientId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Education Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEducationSummaryV21(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EducationSummaryV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEducationSummaryV21(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Education
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEducationV21(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EducationV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEducationV21(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all educations
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEducationsV21(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EducationsSummaryV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEducationsV21(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all emails for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEmailsV21(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailsV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEmailsV21(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch an Employment Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEmploymentSummaryV21(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentSummaryV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEmploymentSummaryV21(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrive a specific education representation
         * @summary Fetch an Employment
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEmploymentV21(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEmploymentV21(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all employments
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewEmploymentsV21(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmploymentsSummaryV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewEmploymentsV21(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch external identifier
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewExternalIdentifierV21(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonExternalIdentifierV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewExternalIdentifierV21(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch external identifiers
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewExternalIdentifiersV21(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonExternalIdentifiersV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewExternalIdentifiersV21(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Funding Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewFundingSummaryV21(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundingSummaryV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewFundingSummaryV21(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Funding
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewFundingV21(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundingV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewFundingV21(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all fundings
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewFundingsV21(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FundingsV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewFundingsV21(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch keyword
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewKeywordV21(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeywordV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewKeywordV21(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch keywords
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewKeywordsV21(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeywordsV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewKeywordsV21(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch Other name
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewOtherNameV21(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OtherNameV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewOtherNameV21(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch Other names
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewOtherNamesV21(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OtherNamesV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewOtherNamesV21(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Peer Review Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPeerReviewSummaryV21(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeerReviewSummaryV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPeerReviewSummaryV21(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Peer Review
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPeerReviewV21(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeerReviewV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPeerReviewV21(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all peer reviews
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPeerReviewsV21(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PeerReviewsV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPeerReviewsV21(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch person details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPersonV21(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPersonV21(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch personal details for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewPersonalDetailsV21(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonalDetailsV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewPersonalDetailsV21(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch record details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewRecordV21(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecordV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewRecordV21(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch one researcher url for an ORCID ID
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewResearcherUrlV21(orcid: string, putCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResearcherUrlsV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewResearcherUrlV21(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all researcher urls for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewResearcherUrlsV21(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewResearcherUrlsV21(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch specified works
         * @param {string} orcid
         * @param {string} putCodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewSpecifiedWorksV21(orcid: string, putCodes: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkBulkV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewSpecifiedWorksV21(orcid, putCodes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Check the server status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewStatusTextV21(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewStatusTextV21(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch a Work Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewWorkSummaryV21(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkSummaryV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewWorkSummaryV21(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * More notes about this method
         * @summary Fetch a Work
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewWorkV21(orcid: string, putCode: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewWorkV21(orcid, putCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         *
         * @summary Fetch all works
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async viewWorksV21(orcid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorksSummaryV20>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.viewWorksV21(orcid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PublicAPIV21Api - factory interface
 * @export
 */
export const PublicAPIV21ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PublicAPIV21ApiFp(configuration)
    return {
        /**
         *
         * @summary Search records
         * @param {string} [q]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchByQueryV21(q?: string, options?: any): AxiosPromise<SearchV20> {
            return localVarFp.searchByQueryV21(q, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all Activities
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewActivitiesV21(orcid: string, options?: any): AxiosPromise<ActivitiesSummaryV20> {
            return localVarFp.viewActivitiesV21(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an address
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAddressV21(orcid: string, putCode: string, options?: any): AxiosPromise<AddressV20> {
            return localVarFp.viewAddressV21(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all addresses
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewAddressesV21(orcid: string, options?: any): AxiosPromise<AddressesV20> {
            return localVarFp.viewAddressesV21(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Get biography details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewBiographyV21(orcid: string, options?: any): AxiosPromise<BiographyV20> {
            return localVarFp.viewBiographyV21(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch client details
         * @param {string} clientId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewClientV21(clientId: string, options?: any): AxiosPromise<ClientSummary> {
            return localVarFp.viewClientV21(clientId, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Education Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationSummaryV21(orcid: string, putCode: number, options?: any): AxiosPromise<EducationSummaryV20> {
            return localVarFp.viewEducationSummaryV21(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Education
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationV21(orcid: string, putCode: number, options?: any): AxiosPromise<EducationV20> {
            return localVarFp.viewEducationV21(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all educations
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEducationsV21(orcid: string, options?: any): AxiosPromise<EducationsSummaryV20> {
            return localVarFp.viewEducationsV21(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all emails for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmailsV21(orcid: string, options?: any): AxiosPromise<EmailsV20> {
            return localVarFp.viewEmailsV21(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch an Employment Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentSummaryV21(orcid: string, putCode: number, options?: any): AxiosPromise<EmploymentSummaryV20> {
            return localVarFp.viewEmploymentSummaryV21(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrive a specific education representation
         * @summary Fetch an Employment
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentV21(orcid: string, putCode: number, options?: any): AxiosPromise<EmploymentV20> {
            return localVarFp.viewEmploymentV21(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all employments
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewEmploymentsV21(orcid: string, options?: any): AxiosPromise<EmploymentsSummaryV20> {
            return localVarFp.viewEmploymentsV21(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch external identifier
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewExternalIdentifierV21(orcid: string, putCode: string, options?: any): AxiosPromise<PersonExternalIdentifierV20> {
            return localVarFp.viewExternalIdentifierV21(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch external identifiers
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewExternalIdentifiersV21(orcid: string, options?: any): AxiosPromise<PersonExternalIdentifiersV20> {
            return localVarFp.viewExternalIdentifiersV21(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Funding Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingSummaryV21(orcid: string, putCode: number, options?: any): AxiosPromise<FundingSummaryV20> {
            return localVarFp.viewFundingSummaryV21(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Funding
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingV21(orcid: string, putCode: number, options?: any): AxiosPromise<FundingV20> {
            return localVarFp.viewFundingV21(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all fundings
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewFundingsV21(orcid: string, options?: any): AxiosPromise<FundingsV20> {
            return localVarFp.viewFundingsV21(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch keyword
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewKeywordV21(orcid: string, putCode: string, options?: any): AxiosPromise<KeywordV20> {
            return localVarFp.viewKeywordV21(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch keywords
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewKeywordsV21(orcid: string, options?: any): AxiosPromise<KeywordsV20> {
            return localVarFp.viewKeywordsV21(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch Other name
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewOtherNameV21(orcid: string, putCode: string, options?: any): AxiosPromise<OtherNameV20> {
            return localVarFp.viewOtherNameV21(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch Other names
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewOtherNamesV21(orcid: string, options?: any): AxiosPromise<OtherNamesV20> {
            return localVarFp.viewOtherNamesV21(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Peer Review Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewSummaryV21(orcid: string, putCode: number, options?: any): AxiosPromise<PeerReviewSummaryV20> {
            return localVarFp.viewPeerReviewSummaryV21(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Peer Review
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewV21(orcid: string, putCode: number, options?: any): AxiosPromise<PeerReviewV20> {
            return localVarFp.viewPeerReviewV21(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all peer reviews
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPeerReviewsV21(orcid: string, options?: any): AxiosPromise<PeerReviewsV20> {
            return localVarFp.viewPeerReviewsV21(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch person details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPersonV21(orcid: string, options?: any): AxiosPromise<PersonV20> {
            return localVarFp.viewPersonV21(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch personal details for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewPersonalDetailsV21(orcid: string, options?: any): AxiosPromise<PersonalDetailsV20> {
            return localVarFp.viewPersonalDetailsV21(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch record details
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewRecordV21(orcid: string, options?: any): AxiosPromise<RecordV20> {
            return localVarFp.viewRecordV21(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch one researcher url for an ORCID ID
         * @param {string} orcid
         * @param {string} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearcherUrlV21(orcid: string, putCode: string, options?: any): AxiosPromise<ResearcherUrlsV20> {
            return localVarFp.viewResearcherUrlV21(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all researcher urls for an ORCID ID
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewResearcherUrlsV21(orcid: string, options?: any): AxiosPromise<void> {
            return localVarFp.viewResearcherUrlsV21(orcid, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch specified works
         * @param {string} orcid
         * @param {string} putCodes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewSpecifiedWorksV21(orcid: string, putCodes: string, options?: any): AxiosPromise<WorkBulkV20> {
            return localVarFp.viewSpecifiedWorksV21(orcid, putCodes, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Check the server status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewStatusTextV21(options?: any): AxiosPromise<string> {
            return localVarFp.viewStatusTextV21(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch a Work Summary
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorkSummaryV21(orcid: string, putCode: number, options?: any): AxiosPromise<WorkSummaryV20> {
            return localVarFp.viewWorkSummaryV21(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         * More notes about this method
         * @summary Fetch a Work
         * @param {string} orcid
         * @param {number} putCode
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorkV21(orcid: string, putCode: number, options?: any): AxiosPromise<WorkV20> {
            return localVarFp.viewWorkV21(orcid, putCode, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @summary Fetch all works
         * @param {string} orcid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        viewWorksV21(orcid: string, options?: any): AxiosPromise<WorksSummaryV20> {
            return localVarFp.viewWorksV21(orcid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublicAPIV21Api - object-oriented interface
 * @export
 * @class PublicAPIV21Api
 * @extends {BaseAPI}
 */
export class PublicAPIV21Api extends BaseAPI {
    /**
     *
     * @summary Search records
     * @param {string} [q]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public searchByQueryV21(q?: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).searchByQueryV21(q, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all Activities
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewActivitiesV21(orcid: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewActivitiesV21(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an address
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewAddressV21(orcid: string, putCode: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewAddressV21(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all addresses
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewAddressesV21(orcid: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewAddressesV21(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Get biography details
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewBiographyV21(orcid: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewBiographyV21(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch client details
     * @param {string} clientId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewClientV21(clientId: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewClientV21(clientId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Education Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewEducationSummaryV21(orcid: string, putCode: number, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewEducationSummaryV21(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Education
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewEducationV21(orcid: string, putCode: number, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewEducationV21(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all educations
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewEducationsV21(orcid: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewEducationsV21(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all emails for an ORCID ID
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewEmailsV21(orcid: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewEmailsV21(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch an Employment Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewEmploymentSummaryV21(orcid: string, putCode: number, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewEmploymentSummaryV21(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrive a specific education representation
     * @summary Fetch an Employment
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewEmploymentV21(orcid: string, putCode: number, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewEmploymentV21(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all employments
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewEmploymentsV21(orcid: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewEmploymentsV21(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch external identifier
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewExternalIdentifierV21(orcid: string, putCode: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewExternalIdentifierV21(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch external identifiers
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewExternalIdentifiersV21(orcid: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewExternalIdentifiersV21(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Funding Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewFundingSummaryV21(orcid: string, putCode: number, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewFundingSummaryV21(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Funding
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewFundingV21(orcid: string, putCode: number, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewFundingV21(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all fundings
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewFundingsV21(orcid: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewFundingsV21(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch keyword
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewKeywordV21(orcid: string, putCode: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewKeywordV21(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch keywords
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewKeywordsV21(orcid: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewKeywordsV21(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch Other name
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewOtherNameV21(orcid: string, putCode: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewOtherNameV21(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch Other names
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewOtherNamesV21(orcid: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewOtherNamesV21(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Peer Review Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewPeerReviewSummaryV21(orcid: string, putCode: number, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewPeerReviewSummaryV21(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Peer Review
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewPeerReviewV21(orcid: string, putCode: number, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewPeerReviewV21(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all peer reviews
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewPeerReviewsV21(orcid: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewPeerReviewsV21(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch person details
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewPersonV21(orcid: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewPersonV21(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch personal details for an ORCID ID
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewPersonalDetailsV21(orcid: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewPersonalDetailsV21(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch record details
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewRecordV21(orcid: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewRecordV21(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch one researcher url for an ORCID ID
     * @param {string} orcid
     * @param {string} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewResearcherUrlV21(orcid: string, putCode: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewResearcherUrlV21(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all researcher urls for an ORCID ID
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewResearcherUrlsV21(orcid: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewResearcherUrlsV21(orcid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch specified works
     * @param {string} orcid
     * @param {string} putCodes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewSpecifiedWorksV21(orcid: string, putCodes: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewSpecifiedWorksV21(orcid, putCodes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Check the server status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewStatusTextV21(options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewStatusTextV21(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch a Work Summary
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewWorkSummaryV21(orcid: string, putCode: number, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewWorkSummaryV21(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * More notes about this method
     * @summary Fetch a Work
     * @param {string} orcid
     * @param {number} putCode
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewWorkV21(orcid: string, putCode: number, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewWorkV21(orcid, putCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     *
     * @summary Fetch all works
     * @param {string} orcid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicAPIV21Api
     */
    public viewWorksV21(orcid: string, options?: any) {
        return PublicAPIV21ApiFp(this.configuration).viewWorksV21(orcid, options).then((request) => request(this.axios, this.basePath));
    }
}
